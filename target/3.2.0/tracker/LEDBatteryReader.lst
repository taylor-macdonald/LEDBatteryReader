
c:/Users/taylor.macdonald/LEDBatteryReader/target/3.2.0/tracker/LEDBatteryReader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000020e4  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000b6100  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000006c  2003e5f4  000b6104  0001e5f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000190  2003e660  2003e660  0002e660  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000b6170  000b6170  00026170  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000b6198  000b6198  00026198  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   00125119  00000000  00000000  0002619c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_abbrev 00013b98  00000000  00000000  0014b2b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_loc    00037777  00000000  00000000  0015ee4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000028f8  00000000  00000000  001965c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 0000a080  00000000  00000000  00198ebc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003aa61  00000000  00000000  001a2f3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0003fccb  00000000  00000000  001dd99d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0013008c  00000000  00000000  0021d668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_frame  0000737c  00000000  00000000  0034d6f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b401c:	4809      	ldr	r0, [pc, #36]	; (b4044 <module_user_pre_init+0x28>)
   b401e:	490a      	ldr	r1, [pc, #40]	; (b4048 <module_user_pre_init+0x2c>)
   b4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4024:	d005      	beq.n	b4032 <module_user_pre_init+0x16>
   b4026:	4a09      	ldr	r2, [pc, #36]	; (b404c <module_user_pre_init+0x30>)
   b4028:	4282      	cmp	r2, r0
   b402a:	d002      	beq.n	b4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b402c:	1a12      	subs	r2, r2, r0
   b402e:	f001 fe30 	bl	b5c92 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4032:	4807      	ldr	r0, [pc, #28]	; (b4050 <module_user_pre_init+0x34>)
   b4034:	4a07      	ldr	r2, [pc, #28]	; (b4054 <module_user_pre_init+0x38>)
   b4036:	2100      	movs	r1, #0
   b4038:	1a12      	subs	r2, r2, r0
   b403a:	f001 fe38 	bl	b5cae <memset>
    return &link_global_data_start;
}
   b403e:	4801      	ldr	r0, [pc, #4]	; (b4044 <module_user_pre_init+0x28>)
   b4040:	bd08      	pop	{r3, pc}
   b4042:	bf00      	nop
   b4044:	2003e5f4 	.word	0x2003e5f4
   b4048:	000b6104 	.word	0x000b6104
   b404c:	2003e660 	.word	0x2003e660
   b4050:	2003e660 	.word	0x2003e660
   b4054:	2003e7ed 	.word	0x2003e7ed

000b4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405a:	4e07      	ldr	r6, [pc, #28]	; (b4078 <module_user_init+0x20>)
   b405c:	4c07      	ldr	r4, [pc, #28]	; (b407c <module_user_init+0x24>)
    module_user_init_hook();
   b405e:	f000 ffaf 	bl	b4fc0 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4062:	1ba4      	subs	r4, r4, r6
   b4064:	08a4      	lsrs	r4, r4, #2
   b4066:	2500      	movs	r5, #0
   b4068:	42ac      	cmp	r4, r5
   b406a:	d100      	bne.n	b406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b406e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4072:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4074:	3501      	adds	r5, #1
   b4076:	e7f7      	b.n	b4068 <module_user_init+0x10>
   b4078:	000b60d4 	.word	0x000b60d4
   b407c:	000b6100 	.word	0x000b6100

000b4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4080:	f000 b816 	b.w	b40b0 <setup>

000b4084 <module_user_loop>:
}

void module_user_loop() {
   b4084:	b508      	push	{r3, lr}
    loop();
   b4086:	f000 f971 	bl	b436c <loop>
    _post_loop();
}
   b408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b408e:	f000 bf4f 	b.w	b4f30 <_post_loop>

000b4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4092:	f000 bdf5 	b.w	b4c80 <malloc>

000b4096 <_Znaj>:
   b4096:	f000 bdf3 	b.w	b4c80 <malloc>

000b409a <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409a:	f000 bdf9 	b.w	b4c90 <free>

000b409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b409e:	7800      	ldrb	r0, [r0, #0]
   b40a0:	fab0 f080 	clz	r0, r0
   b40a4:	0940      	lsrs	r0, r0, #5
   b40a6:	4770      	bx	lr

000b40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40a8:	2301      	movs	r3, #1
   b40aa:	7003      	strb	r3, [r0, #0]
   b40ac:	4770      	bx	lr
	...

000b40b0 <setup>:
#define CHARGING_LED_QTY 1 //how many more LEDs to light up to indicate charging
#define PUBLISHING false //true: publish

Adafruit_NeoPixel strip(PIXEL_COUNT, PIXEL_PIN, PIXEL_TYPE);

void setup() {
   b40b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b40b2:	4b12      	ldr	r3, [pc, #72]	; (b40fc <setup+0x4c>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b40b4:	4a12      	ldr	r2, [pc, #72]	; (b4100 <setup+0x50>)
   b40b6:	781b      	ldrb	r3, [r3, #0]
   b40b8:	f88d 3000 	strb.w	r3, [sp]
   b40bc:	4911      	ldr	r1, [pc, #68]	; (b4104 <setup+0x54>)
   b40be:	233c      	movs	r3, #60	; 0x3c
   b40c0:	a802      	add	r0, sp, #8
   b40c2:	f001 f8db 	bl	b527c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   b40c6:	9c03      	ldr	r4, [sp, #12]
   b40c8:	b17c      	cbz	r4, b40ea <setup+0x3a>
      if (--_M_use_count == 0)
   b40ca:	6863      	ldr	r3, [r4, #4]
   b40cc:	3b01      	subs	r3, #1
   b40ce:	6063      	str	r3, [r4, #4]
   b40d0:	b95b      	cbnz	r3, b40ea <setup+0x3a>
          _M_dispose();
   b40d2:	6823      	ldr	r3, [r4, #0]
   b40d4:	4620      	mov	r0, r4
   b40d6:	689b      	ldr	r3, [r3, #8]
   b40d8:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b40da:	68a3      	ldr	r3, [r4, #8]
   b40dc:	3b01      	subs	r3, #1
   b40de:	60a3      	str	r3, [r4, #8]
   b40e0:	b91b      	cbnz	r3, b40ea <setup+0x3a>
            _M_destroy();
   b40e2:	6823      	ldr	r3, [r4, #0]
   b40e4:	4620      	mov	r0, r4
   b40e6:	68db      	ldr	r3, [r3, #12]
   b40e8:	4798      	blx	r3
  Particle.publish("PTO1","Device initialized");
  strip.begin();
   b40ea:	4807      	ldr	r0, [pc, #28]	; (b4108 <setup+0x58>)
   b40ec:	f000 f9ad 	bl	b444a <_ZN17Adafruit_NeoPixel5beginEv>
  strip.show();
   b40f0:	4805      	ldr	r0, [pc, #20]	; (b4108 <setup+0x58>)
}
   b40f2:	b004      	add	sp, #16
   b40f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  strip.show();
   b40f8:	f000 b9e0 	b.w	b44bc <_ZN17Adafruit_NeoPixel4showEv>
   b40fc:	2003e66c 	.word	0x2003e66c
   b4100:	000b5e48 	.word	0x000b5e48
   b4104:	000b5e5b 	.word	0x000b5e5b
   b4108:	2003e670 	.word	0x2003e670

000b410c <_Z11errorLightsv>:
  for (i=0; i<=5; i++){
    fullyCharged();
  }
}

void errorLights(){ // red light then no light
   b410c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b410e:	2400      	movs	r4, #0
  uint16_t i;
  for (i=0;i<PIXEL_COUNT;i++){ // all pixels red
    strip.setPixelColor(i,255,0,0);
   b4110:	4d14      	ldr	r5, [pc, #80]	; (b4164 <_Z11errorLightsv+0x58>)
   b4112:	4626      	mov	r6, r4
   b4114:	b2a1      	uxth	r1, r4
   b4116:	9600      	str	r6, [sp, #0]
   b4118:	2300      	movs	r3, #0
   b411a:	22ff      	movs	r2, #255	; 0xff
   b411c:	4628      	mov	r0, r5
  for (i=0;i<PIXEL_COUNT;i++){ // all pixels red
   b411e:	3401      	adds	r4, #1
    strip.setPixelColor(i,255,0,0);
   b4120:	f000 fb78 	bl	b4814 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
  for (i=0;i<PIXEL_COUNT;i++){ // all pixels red
   b4124:	2c18      	cmp	r4, #24
   b4126:	d1f5      	bne.n	b4114 <_Z11errorLightsv+0x8>
  }
  strip.show();//shows changes on LED strip
   b4128:	480e      	ldr	r0, [pc, #56]	; (b4164 <_Z11errorLightsv+0x58>)
  delay(500);
  
  for (i=0;i<PIXEL_COUNT;i++){ // all pixels off
    strip.setPixelColor(i,0,0,0);
   b412a:	4d0e      	ldr	r5, [pc, #56]	; (b4164 <_Z11errorLightsv+0x58>)
  strip.show();//shows changes on LED strip
   b412c:	f000 f9c6 	bl	b44bc <_ZN17Adafruit_NeoPixel4showEv>
  delay(500);
   b4130:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b4134:	f000 fed0 	bl	b4ed8 <delay>
   b4138:	2400      	movs	r4, #0
    strip.setPixelColor(i,0,0,0);
   b413a:	4626      	mov	r6, r4
   b413c:	2300      	movs	r3, #0
   b413e:	b2a1      	uxth	r1, r4
   b4140:	9600      	str	r6, [sp, #0]
   b4142:	461a      	mov	r2, r3
   b4144:	4628      	mov	r0, r5
  for (i=0;i<PIXEL_COUNT;i++){ // all pixels off
   b4146:	3401      	adds	r4, #1
    strip.setPixelColor(i,0,0,0);
   b4148:	f000 fb64 	bl	b4814 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
  for (i=0;i<PIXEL_COUNT;i++){ // all pixels off
   b414c:	2c18      	cmp	r4, #24
   b414e:	d1f5      	bne.n	b413c <_Z11errorLightsv+0x30>
  }
  strip.show();//shows changes on LED strip
   b4150:	4804      	ldr	r0, [pc, #16]	; (b4164 <_Z11errorLightsv+0x58>)
   b4152:	f000 f9b3 	bl	b44bc <_ZN17Adafruit_NeoPixel4showEv>
  delay(500);
   b4156:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
}
   b415a:	b002      	add	sp, #8
   b415c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  delay(500);
   b4160:	f000 beba 	b.w	b4ed8 <delay>
   b4164:	2003e670 	.word	0x2003e670

000b4168 <_Z10bootLightsv>:
    }
  }
  strip.show(); //shows changes on LED strip
} 

void bootLights(){
   b4168:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b416a:	2400      	movs	r4, #0
  if (PUBLISHING == true){
    Particle.publish("PTO1","Boot Sequence");
  }
  uint16_t i;
  for (i=0; i<PIXEL_COUNT;i++){ //red loop
    strip.setPixelColor(i, 255,0,0);
   b416c:	4d2f      	ldr	r5, [pc, #188]	; (b422c <_Z10bootLightsv+0xc4>)
   b416e:	4626      	mov	r6, r4
   b4170:	b2a1      	uxth	r1, r4
   b4172:	2300      	movs	r3, #0
   b4174:	22ff      	movs	r2, #255	; 0xff
   b4176:	4628      	mov	r0, r5
   b4178:	9600      	str	r6, [sp, #0]
   b417a:	f000 fb4b 	bl	b4814 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
    delay(LIGHT_DELAY);
   b417e:	2014      	movs	r0, #20
   b4180:	f000 feaa 	bl	b4ed8 <delay>
  for (i=0; i<PIXEL_COUNT;i++){ //red loop
   b4184:	3401      	adds	r4, #1
    strip.show();
   b4186:	4628      	mov	r0, r5
   b4188:	f000 f998 	bl	b44bc <_ZN17Adafruit_NeoPixel4showEv>
  for (i=0; i<PIXEL_COUNT;i++){ //red loop
   b418c:	2c18      	cmp	r4, #24
   b418e:	d1ef      	bne.n	b4170 <_Z10bootLightsv+0x8>
  }  
  for (i=0; i<PIXEL_COUNT;i++){ //blue loop
    strip.setPixelColor(i, 0,0,255);
   b4190:	4d26      	ldr	r5, [pc, #152]	; (b422c <_Z10bootLightsv+0xc4>)
   b4192:	2400      	movs	r4, #0
   b4194:	26ff      	movs	r6, #255	; 0xff
   b4196:	2300      	movs	r3, #0
   b4198:	b2a1      	uxth	r1, r4
   b419a:	461a      	mov	r2, r3
   b419c:	4628      	mov	r0, r5
   b419e:	9600      	str	r6, [sp, #0]
   b41a0:	f000 fb38 	bl	b4814 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
    delay(LIGHT_DELAY);
   b41a4:	2014      	movs	r0, #20
   b41a6:	f000 fe97 	bl	b4ed8 <delay>
  for (i=0; i<PIXEL_COUNT;i++){ //blue loop
   b41aa:	3401      	adds	r4, #1
    strip.show();
   b41ac:	4628      	mov	r0, r5
   b41ae:	f000 f985 	bl	b44bc <_ZN17Adafruit_NeoPixel4showEv>
  for (i=0; i<PIXEL_COUNT;i++){ //blue loop
   b41b2:	2c18      	cmp	r4, #24
   b41b4:	d1ef      	bne.n	b4196 <_Z10bootLightsv+0x2e>
   b41b6:	2400      	movs	r4, #0
  }
  for (i=0; i<PIXEL_COUNT;i++){ // green loop
    strip.setPixelColor(i, 0,255,0);
   b41b8:	4d1c      	ldr	r5, [pc, #112]	; (b422c <_Z10bootLightsv+0xc4>)
   b41ba:	4626      	mov	r6, r4
   b41bc:	b2a1      	uxth	r1, r4
   b41be:	23ff      	movs	r3, #255	; 0xff
   b41c0:	2200      	movs	r2, #0
   b41c2:	4628      	mov	r0, r5
   b41c4:	9600      	str	r6, [sp, #0]
   b41c6:	f000 fb25 	bl	b4814 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
    delay(LIGHT_DELAY);
   b41ca:	2014      	movs	r0, #20
   b41cc:	f000 fe84 	bl	b4ed8 <delay>
  for (i=0; i<PIXEL_COUNT;i++){ // green loop
   b41d0:	3401      	adds	r4, #1
    strip.show();
   b41d2:	4628      	mov	r0, r5
   b41d4:	f000 f972 	bl	b44bc <_ZN17Adafruit_NeoPixel4showEv>
  for (i=0; i<PIXEL_COUNT;i++){ // green loop
   b41d8:	2c18      	cmp	r4, #24
   b41da:	d1ef      	bne.n	b41bc <_Z10bootLightsv+0x54>
   b41dc:	2400      	movs	r4, #0
  }
  for (i=0; i<PIXEL_COUNT;i++){ //yellow loop
    strip.setPixelColor(i,255,255,0);
   b41de:	4d13      	ldr	r5, [pc, #76]	; (b422c <_Z10bootLightsv+0xc4>)
   b41e0:	4626      	mov	r6, r4
   b41e2:	23ff      	movs	r3, #255	; 0xff
   b41e4:	b2a1      	uxth	r1, r4
   b41e6:	461a      	mov	r2, r3
   b41e8:	4628      	mov	r0, r5
   b41ea:	9600      	str	r6, [sp, #0]
   b41ec:	f000 fb12 	bl	b4814 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
    delay(LIGHT_DELAY);
   b41f0:	2014      	movs	r0, #20
   b41f2:	f000 fe71 	bl	b4ed8 <delay>
  for (i=0; i<PIXEL_COUNT;i++){ //yellow loop
   b41f6:	3401      	adds	r4, #1
    strip.show();
   b41f8:	4628      	mov	r0, r5
   b41fa:	f000 f95f 	bl	b44bc <_ZN17Adafruit_NeoPixel4showEv>
  for (i=0; i<PIXEL_COUNT;i++){ //yellow loop
   b41fe:	2c18      	cmp	r4, #24
   b4200:	d1ef      	bne.n	b41e2 <_Z10bootLightsv+0x7a>
   b4202:	2400      	movs	r4, #0
  }
  for (i=0; i<PIXEL_COUNT;i++){ //yellow loop
    strip.setPixelColor(i,0,0,0);
   b4204:	4d09      	ldr	r5, [pc, #36]	; (b422c <_Z10bootLightsv+0xc4>)
   b4206:	4626      	mov	r6, r4
   b4208:	2300      	movs	r3, #0
   b420a:	b2a1      	uxth	r1, r4
   b420c:	461a      	mov	r2, r3
   b420e:	4628      	mov	r0, r5
   b4210:	9600      	str	r6, [sp, #0]
   b4212:	f000 faff 	bl	b4814 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
    delay(LIGHT_DELAY);
   b4216:	2014      	movs	r0, #20
   b4218:	f000 fe5e 	bl	b4ed8 <delay>
  for (i=0; i<PIXEL_COUNT;i++){ //yellow loop
   b421c:	3401      	adds	r4, #1
    strip.show();
   b421e:	4628      	mov	r0, r5
   b4220:	f000 f94c 	bl	b44bc <_ZN17Adafruit_NeoPixel4showEv>
  for (i=0; i<PIXEL_COUNT;i++){ //yellow loop
   b4224:	2c18      	cmp	r4, #24
   b4226:	d1ef      	bne.n	b4208 <_Z10bootLightsv+0xa0>
  }
}
   b4228:	b002      	add	sp, #8
   b422a:	bd70      	pop	{r4, r5, r6, pc}
   b422c:	2003e670 	.word	0x2003e670

000b4230 <_Z15setBatteryBlockh>:

void setBatteryBlock(uint8_t percentage){ //pass in a percentage (0-100) that the battery is current at (not charging)
   b4230:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    Particle.publish("PTO1","Battery set to " + String(percentage) + " percent");
  }
  uint16_t j, i;
  int LED_GROUPS = PIXEL_COUNT / BLOCK_COUNT; //LED GROUPS is how many LEDs are in each block. It is how many need to be activated each time
  for (j=0; j < BLOCK_COUNT; j++){ //repeat for each block
    if(j<=BLOCK_COUNT * percentage/100){ //converts percentage to block quantity
   b4234:	2400      	movs	r4, #0
        }
      }
    }
    else{
      for (i=0; i<LED_GROUPS; i++){ // turns the remaining groups of LEDs off
        strip.setPixelColor(j*LED_GROUPS+i,0,0,0); 
   b4236:	f8df 80b0 	ldr.w	r8, [pc, #176]	; b42e8 <_Z15setBatteryBlockh+0xb8>
void setBatteryBlock(uint8_t percentage){ //pass in a percentage (0-100) that the battery is current at (not charging)
   b423a:	4606      	mov	r6, r0
        strip.setPixelColor(j*LED_GROUPS+i,0,0,0); 
   b423c:	4627      	mov	r7, r4
    if(j<=BLOCK_COUNT * percentage/100){ //converts percentage to block quantity
   b423e:	ea4f 0ac0 	mov.w	sl, r0, lsl #3
   b4242:	2364      	movs	r3, #100	; 0x64
   b4244:	fbba faf3 	udiv	sl, sl, r3
   b4248:	eb04 0544 	add.w	r5, r4, r4, lsl #1
   b424c:	45a2      	cmp	sl, r4
   b424e:	b2ad      	uxth	r5, r5
   b4250:	f04f 0900 	mov.w	r9, #0
   b4254:	db39      	blt.n	b42ca <_Z15setBatteryBlockh+0x9a>
      if (percentage < 25){ // sets LEDs to Red if battery is below 25%
   b4256:	2e18      	cmp	r6, #24
   b4258:	d816      	bhi.n	b4288 <_Z15setBatteryBlockh+0x58>
          strip.setPixelColor(j*LED_GROUPS+i,255*FADE,0,0); //j is the groupnumber, i is the LED in that group
   b425a:	eb05 0109 	add.w	r1, r5, r9
   b425e:	9700      	str	r7, [sp, #0]
   b4260:	2300      	movs	r3, #0
   b4262:	22ff      	movs	r2, #255	; 0xff
   b4264:	b289      	uxth	r1, r1
   b4266:	4640      	mov	r0, r8
        for (i=0; i<LED_GROUPS; i++){
   b4268:	f109 0901 	add.w	r9, r9, #1
          strip.setPixelColor(j*LED_GROUPS+i,255*FADE,0,0); //j is the groupnumber, i is the LED in that group
   b426c:	f000 fad2 	bl	b4814 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        for (i=0; i<LED_GROUPS; i++){
   b4270:	f1b9 0f03 	cmp.w	r9, #3
   b4274:	d1f1      	bne.n	b425a <_Z15setBatteryBlockh+0x2a>
  for (j=0; j < BLOCK_COUNT; j++){ //repeat for each block
   b4276:	3401      	adds	r4, #1
   b4278:	2c08      	cmp	r4, #8
   b427a:	d1e5      	bne.n	b4248 <_Z15setBatteryBlockh+0x18>
      }
    }
  }
  strip.show();//shows changes on LED strip
   b427c:	481a      	ldr	r0, [pc, #104]	; (b42e8 <_Z15setBatteryBlockh+0xb8>)
} 
   b427e:	b002      	add	sp, #8
   b4280:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  strip.show();//shows changes on LED strip
   b4284:	f000 b91a 	b.w	b44bc <_ZN17Adafruit_NeoPixel4showEv>
      else if (percentage < 50){ // sets LEDs to Amber if battery is below 50%
   b4288:	2e31      	cmp	r6, #49	; 0x31
   b428a:	d80e      	bhi.n	b42aa <_Z15setBatteryBlockh+0x7a>
          strip.setPixelColor(j*LED_GROUPS+i,255*FADE,127*FADE,0);
   b428c:	eb05 0109 	add.w	r1, r5, r9
   b4290:	9700      	str	r7, [sp, #0]
   b4292:	237f      	movs	r3, #127	; 0x7f
   b4294:	22ff      	movs	r2, #255	; 0xff
   b4296:	b289      	uxth	r1, r1
   b4298:	4640      	mov	r0, r8
        for (i=0; i<LED_GROUPS; i++){
   b429a:	f109 0901 	add.w	r9, r9, #1
          strip.setPixelColor(j*LED_GROUPS+i,255*FADE,127*FADE,0);
   b429e:	f000 fab9 	bl	b4814 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        for (i=0; i<LED_GROUPS; i++){
   b42a2:	f1b9 0f03 	cmp.w	r9, #3
   b42a6:	d1f1      	bne.n	b428c <_Z15setBatteryBlockh+0x5c>
   b42a8:	e7e5      	b.n	b4276 <_Z15setBatteryBlockh+0x46>
          strip.setPixelColor(j*LED_GROUPS+i,0,255*FADE,0,0);
   b42aa:	eb05 0109 	add.w	r1, r5, r9
   b42ae:	e9cd 7700 	strd	r7, r7, [sp]
   b42b2:	23ff      	movs	r3, #255	; 0xff
   b42b4:	2200      	movs	r2, #0
   b42b6:	b289      	uxth	r1, r1
   b42b8:	4640      	mov	r0, r8
        for (i=0; i<LED_GROUPS; i++){ // sets groups of LEDs to Green if battery is above 50%
   b42ba:	f109 0901 	add.w	r9, r9, #1
          strip.setPixelColor(j*LED_GROUPS+i,0,255*FADE,0,0);
   b42be:	f000 fad6 	bl	b486e <_ZN17Adafruit_NeoPixel13setPixelColorEthhhh>
        for (i=0; i<LED_GROUPS; i++){ // sets groups of LEDs to Green if battery is above 50%
   b42c2:	f1b9 0f03 	cmp.w	r9, #3
   b42c6:	d1f0      	bne.n	b42aa <_Z15setBatteryBlockh+0x7a>
   b42c8:	e7d5      	b.n	b4276 <_Z15setBatteryBlockh+0x46>
        strip.setPixelColor(j*LED_GROUPS+i,0,0,0); 
   b42ca:	eb05 0109 	add.w	r1, r5, r9
   b42ce:	2300      	movs	r3, #0
   b42d0:	9700      	str	r7, [sp, #0]
   b42d2:	461a      	mov	r2, r3
   b42d4:	b289      	uxth	r1, r1
   b42d6:	4640      	mov	r0, r8
      for (i=0; i<LED_GROUPS; i++){ // turns the remaining groups of LEDs off
   b42d8:	f109 0901 	add.w	r9, r9, #1
        strip.setPixelColor(j*LED_GROUPS+i,0,0,0); 
   b42dc:	f000 fa9a 	bl	b4814 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
      for (i=0; i<LED_GROUPS; i++){ // turns the remaining groups of LEDs off
   b42e0:	f1b9 0f03 	cmp.w	r9, #3
   b42e4:	d1f1      	bne.n	b42ca <_Z15setBatteryBlockh+0x9a>
   b42e6:	e7c6      	b.n	b4276 <_Z15setBatteryBlockh+0x46>
   b42e8:	2003e670 	.word	0x2003e670

000b42ec <_Z8chargingh>:
void charging(uint8_t percentage){ //pass in a percentage (0-100) that the battery is currently at (when charging).
   b42ec:	b510      	push	{r4, lr}
   b42ee:	4604      	mov	r4, r0
  setBatteryBlock(percentage);//calls setBatteryPercentage function
   b42f0:	f7ff ff9e 	bl	b4230 <_Z15setBatteryBlockh>
  delay(250);
   b42f4:	20fa      	movs	r0, #250	; 0xfa
   b42f6:	f000 fdef 	bl	b4ed8 <delay>
  setBatteryBlock(percentage + CHARGING_LED_QTY * 100/BLOCK_COUNT);//calls setBatteryPercentage function with enough additional percent to activate more LEDs
   b42fa:	f104 000c 	add.w	r0, r4, #12
   b42fe:	b2c0      	uxtb	r0, r0
   b4300:	f7ff ff96 	bl	b4230 <_Z15setBatteryBlockh>
}
   b4304:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  delay(250);
   b4308:	20fa      	movs	r0, #250	; 0xfa
   b430a:	f000 bde5 	b.w	b4ed8 <delay>
	...

000b4310 <_Z12fullyChargedv>:

void fullyCharged(){ // Green light then dim green light
   b4310:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b4312:	2400      	movs	r4, #0
  uint16_t i;
  for (i=0;i<PIXEL_COUNT;i++){ //set all pixels off
    strip.setPixelColor(i,0,100,0);
   b4314:	4d14      	ldr	r5, [pc, #80]	; (b4368 <_Z12fullyChargedv+0x58>)
   b4316:	4626      	mov	r6, r4
   b4318:	b2a1      	uxth	r1, r4
   b431a:	9600      	str	r6, [sp, #0]
   b431c:	2364      	movs	r3, #100	; 0x64
   b431e:	2200      	movs	r2, #0
   b4320:	4628      	mov	r0, r5
  for (i=0;i<PIXEL_COUNT;i++){ //set all pixels off
   b4322:	3401      	adds	r4, #1
    strip.setPixelColor(i,0,100,0);
   b4324:	f000 fa76 	bl	b4814 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
  for (i=0;i<PIXEL_COUNT;i++){ //set all pixels off
   b4328:	2c18      	cmp	r4, #24
   b432a:	d1f5      	bne.n	b4318 <_Z12fullyChargedv+0x8>
  }
  strip.show();//shows changes on LED strip
   b432c:	480e      	ldr	r0, [pc, #56]	; (b4368 <_Z12fullyChargedv+0x58>)
  delay(500);

  for (i=0;i<PIXEL_COUNT;i++){ //set all pixels green
    strip.setPixelColor(i,0,250,0);
   b432e:	4d0e      	ldr	r5, [pc, #56]	; (b4368 <_Z12fullyChargedv+0x58>)
  strip.show();//shows changes on LED strip
   b4330:	f000 f8c4 	bl	b44bc <_ZN17Adafruit_NeoPixel4showEv>
  delay(500);
   b4334:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b4338:	f000 fdce 	bl	b4ed8 <delay>
   b433c:	2400      	movs	r4, #0
    strip.setPixelColor(i,0,250,0);
   b433e:	4626      	mov	r6, r4
   b4340:	b2a1      	uxth	r1, r4
   b4342:	9600      	str	r6, [sp, #0]
   b4344:	23fa      	movs	r3, #250	; 0xfa
   b4346:	2200      	movs	r2, #0
   b4348:	4628      	mov	r0, r5
  for (i=0;i<PIXEL_COUNT;i++){ //set all pixels green
   b434a:	3401      	adds	r4, #1
    strip.setPixelColor(i,0,250,0);
   b434c:	f000 fa62 	bl	b4814 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
  for (i=0;i<PIXEL_COUNT;i++){ //set all pixels green
   b4350:	2c18      	cmp	r4, #24
   b4352:	d1f5      	bne.n	b4340 <_Z12fullyChargedv+0x30>
  }
  strip.show();//shows changes on LED strip
   b4354:	4804      	ldr	r0, [pc, #16]	; (b4368 <_Z12fullyChargedv+0x58>)
   b4356:	f000 f8b1 	bl	b44bc <_ZN17Adafruit_NeoPixel4showEv>
  delay(500);
   b435a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
}
   b435e:	b002      	add	sp, #8
   b4360:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  delay(500);
   b4364:	f000 bdb8 	b.w	b4ed8 <delay>
   b4368:	2003e670 	.word	0x2003e670

000b436c <loop>:
void loop() {
   b436c:	b510      	push	{r4, lr}
  bootLights();
   b436e:	f7ff fefb 	bl	b4168 <_Z10bootLightsv>
  delay(1000);
   b4372:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b4376:	f000 fdaf 	bl	b4ed8 <delay>
   b437a:	2464      	movs	r4, #100	; 0x64
    setBatteryBlock(100-i);
   b437c:	4620      	mov	r0, r4
  for (i=0; i<=100; i=i+4){
   b437e:	3c04      	subs	r4, #4
    setBatteryBlock(100-i);
   b4380:	f7ff ff56 	bl	b4230 <_Z15setBatteryBlockh>
  for (i=0; i<=100; i=i+4){
   b4384:	b2e4      	uxtb	r4, r4
    delay(250);
   b4386:	20fa      	movs	r0, #250	; 0xfa
   b4388:	f000 fda6 	bl	b4ed8 <delay>
  for (i=0; i<=100; i=i+4){
   b438c:	2cfc      	cmp	r4, #252	; 0xfc
   b438e:	d1f5      	bne.n	b437c <loop+0x10>
    errorLights();
   b4390:	f7ff febc 	bl	b410c <_Z11errorLightsv>
   b4394:	f7ff feba 	bl	b410c <_Z11errorLightsv>
   b4398:	f7ff feb8 	bl	b410c <_Z11errorLightsv>
   b439c:	f7ff feb6 	bl	b410c <_Z11errorLightsv>
   b43a0:	f7ff feb4 	bl	b410c <_Z11errorLightsv>
   b43a4:	f7ff feb2 	bl	b410c <_Z11errorLightsv>
  for (i=0; i<=100; i=i+4){
   b43a8:	2400      	movs	r4, #0
    charging(i);
   b43aa:	b2e4      	uxtb	r4, r4
   b43ac:	4620      	mov	r0, r4
   b43ae:	3404      	adds	r4, #4
   b43b0:	f7ff ff9c 	bl	b42ec <_Z8chargingh>
  for (i=0; i<=100; i=i+4){
   b43b4:	b2e3      	uxtb	r3, r4
   b43b6:	2b68      	cmp	r3, #104	; 0x68
   b43b8:	b264      	sxtb	r4, r4
   b43ba:	d1f6      	bne.n	b43aa <loop+0x3e>
    fullyCharged();
   b43bc:	f7ff ffa8 	bl	b4310 <_Z12fullyChargedv>
   b43c0:	f7ff ffa6 	bl	b4310 <_Z12fullyChargedv>
   b43c4:	f7ff ffa4 	bl	b4310 <_Z12fullyChargedv>
   b43c8:	f7ff ffa2 	bl	b4310 <_Z12fullyChargedv>
   b43cc:	f7ff ffa0 	bl	b4310 <_Z12fullyChargedv>
}
   b43d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fullyCharged();
   b43d4:	f7ff bf9c 	b.w	b4310 <_Z12fullyChargedv>

000b43d8 <_GLOBAL__sub_I_j1939>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b43d8:	4b0a      	ldr	r3, [pc, #40]	; (b4404 <_GLOBAL__sub_I_j1939+0x2c>)
}
   b43da:	b510      	push	{r4, lr}
   b43dc:	2200      	movs	r2, #0
   b43de:	701a      	strb	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b43e0:	4b09      	ldr	r3, [pc, #36]	; (b4408 <_GLOBAL__sub_I_j1939+0x30>)
   b43e2:	e9c3 2200 	strd	r2, r2, [r3]
    SleepResult() {}
   b43e6:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
   b43ea:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b43ec:	2001      	movs	r0, #1
   b43ee:	f000 fb9b 	bl	b4b28 <set_system_mode>
   b43f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
Adafruit_NeoPixel strip(PIXEL_COUNT, PIXEL_PIN, PIXEL_TYPE);
   b43f6:	4805      	ldr	r0, [pc, #20]	; (b440c <_GLOBAL__sub_I_j1939+0x34>)
   b43f8:	2302      	movs	r3, #2
   b43fa:	2203      	movs	r2, #3
   b43fc:	2118      	movs	r1, #24
   b43fe:	f000 b84b 	b.w	b4498 <_ZN17Adafruit_NeoPixelC1Ethh>
   b4402:	bf00      	nop
   b4404:	2003e66c 	.word	0x2003e66c
   b4408:	2003e660 	.word	0x2003e660
   b440c:	2003e670 	.word	0x2003e670

000b4410 <_ZN17Adafruit_NeoPixel12updateLengthEt>:
Adafruit_NeoPixel::~Adafruit_NeoPixel() {
  if (pixels) free(pixels);
  if (begun) pinMode(pin, INPUT);
}

void Adafruit_NeoPixel::updateLength(uint16_t n) {
   b4410:	b538      	push	{r3, r4, r5, lr}
   b4412:	4604      	mov	r4, r0
  if (pixels) free(pixels); // Free existing data (if any)
   b4414:	68c0      	ldr	r0, [r0, #12]
void Adafruit_NeoPixel::updateLength(uint16_t n) {
   b4416:	460d      	mov	r5, r1
  if (pixels) free(pixels); // Free existing data (if any)
   b4418:	b108      	cbz	r0, b441e <_ZN17Adafruit_NeoPixel12updateLengthEt+0xe>
   b441a:	f000 fc39 	bl	b4c90 <free>

  // Allocate new data -- note: ALL PIXELS ARE CLEARED
  numBytes = n * ((type == SK6812RGBW) ? 4 : 3);
   b441e:	79a3      	ldrb	r3, [r4, #6]
   b4420:	2b06      	cmp	r3, #6
   b4422:	bf0c      	ite	eq
   b4424:	2004      	moveq	r0, #4
   b4426:	2003      	movne	r0, #3
   b4428:	fb10 f005 	smulbb	r0, r0, r5
   b442c:	b280      	uxth	r0, r0
   b442e:	80a0      	strh	r0, [r4, #4]
  if ((pixels = (uint8_t *)malloc(numBytes))) {
   b4430:	f000 fc26 	bl	b4c80 <malloc>
   b4434:	60e0      	str	r0, [r4, #12]
   b4436:	b128      	cbz	r0, b4444 <_ZN17Adafruit_NeoPixel12updateLengthEt+0x34>
    memset(pixels, 0, numBytes);
   b4438:	88a2      	ldrh	r2, [r4, #4]
   b443a:	2100      	movs	r1, #0
   b443c:	f001 fc37 	bl	b5cae <memset>
    numLEDs = n;
   b4440:	8065      	strh	r5, [r4, #2]
  } else {
    numLEDs = numBytes = 0;
  }
}
   b4442:	bd38      	pop	{r3, r4, r5, pc}
    numLEDs = numBytes = 0;
   b4444:	80a0      	strh	r0, [r4, #4]
   b4446:	8060      	strh	r0, [r4, #2]
}
   b4448:	e7fb      	b.n	b4442 <_ZN17Adafruit_NeoPixel12updateLengthEt+0x32>

000b444a <_ZN17Adafruit_NeoPixel5beginEv>:

void Adafruit_NeoPixel::begin(void) {
   b444a:	b510      	push	{r4, lr}
   b444c:	4604      	mov	r4, r0
  pinMode(pin, OUTPUT);
   b444e:	2101      	movs	r1, #1
   b4450:	79c0      	ldrb	r0, [r0, #7]
   b4452:	f001 fb67 	bl	b5b24 <pinMode>
  digitalWrite(pin, LOW);
   b4456:	79e0      	ldrb	r0, [r4, #7]
   b4458:	2100      	movs	r1, #0
   b445a:	f001 fb74 	bl	b5b46 <digitalWrite>
  begun = true;
   b445e:	2301      	movs	r3, #1
   b4460:	7023      	strb	r3, [r4, #0]
}
   b4462:	bd10      	pop	{r4, pc}

000b4464 <_ZN17Adafruit_NeoPixel6setPinEh>:

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
   b4464:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (begun) {
   b4466:	7803      	ldrb	r3, [r0, #0]
void Adafruit_NeoPixel::setPin(uint8_t p) {
   b4468:	4605      	mov	r5, r0
   b446a:	460c      	mov	r4, r1
    if (begun) {
   b446c:	b11b      	cbz	r3, b4476 <_ZN17Adafruit_NeoPixel6setPinEh+0x12>
        pinMode(pin, INPUT);
   b446e:	79c0      	ldrb	r0, [r0, #7]
   b4470:	2100      	movs	r1, #0
   b4472:	f001 fb57 	bl	b5b24 <pinMode>
    }
    pin = p;
    if (begun) {
   b4476:	782b      	ldrb	r3, [r5, #0]
    pin = p;
   b4478:	71ec      	strb	r4, [r5, #7]
    if (begun) {
   b447a:	b15b      	cbz	r3, b4494 <_ZN17Adafruit_NeoPixel6setPinEh+0x30>
        pinMode(p, OUTPUT);
   b447c:	b2a0      	uxth	r0, r4
   b447e:	2101      	movs	r1, #1
   b4480:	9001      	str	r0, [sp, #4]
   b4482:	f001 fb4f 	bl	b5b24 <pinMode>
        digitalWrite(p, LOW);
   b4486:	9801      	ldr	r0, [sp, #4]
   b4488:	2100      	movs	r1, #0
    }
}
   b448a:	b003      	add	sp, #12
   b448c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        digitalWrite(p, LOW);
   b4490:	f001 bb59 	b.w	b5b46 <digitalWrite>
}
   b4494:	b003      	add	sp, #12
   b4496:	bd30      	pop	{r4, r5, pc}

000b4498 <_ZN17Adafruit_NeoPixelC1Ethh>:
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
   b4498:	b570      	push	{r4, r5, r6, lr}
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
   b449a:	2500      	movs	r5, #0
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
   b449c:	4604      	mov	r4, r0
   b449e:	4616      	mov	r6, r2
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
   b44a0:	7183      	strb	r3, [r0, #6]
   b44a2:	e9c0 5503 	strd	r5, r5, [r0, #12]
   b44a6:	7005      	strb	r5, [r0, #0]
   b44a8:	7205      	strb	r5, [r0, #8]
  updateLength(n);
   b44aa:	f7ff ffb1 	bl	b4410 <_ZN17Adafruit_NeoPixel12updateLengthEt>
  setPin(p);
   b44ae:	4620      	mov	r0, r4
   b44b0:	4631      	mov	r1, r6
   b44b2:	f7ff ffd7 	bl	b4464 <_ZN17Adafruit_NeoPixel6setPinEh>
}
   b44b6:	4620      	mov	r0, r4
   b44b8:	bd70      	pop	{r4, r5, r6, pc}
	...

000b44bc <_ZN17Adafruit_NeoPixel4showEv>:

void Adafruit_NeoPixel::show(void) {
  if(!pixels) return;
   b44bc:	68c3      	ldr	r3, [r0, #12]
   b44be:	2b00      	cmp	r3, #0
   b44c0:	f000 81a4 	beq.w	b480c <_ZN17Adafruit_NeoPixel4showEv+0x350>
void Adafruit_NeoPixel::show(void) {
   b44c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b44c8:	7983      	ldrb	r3, [r0, #6]
   b44ca:	3b02      	subs	r3, #2
   b44cc:	b2db      	uxtb	r3, r3
   b44ce:	2b04      	cmp	r3, #4
   b44d0:	bf9c      	itt	ls
   b44d2:	4abf      	ldrls	r2, [pc, #764]	; (b47d0 <_ZN17Adafruit_NeoPixel4showEv+0x314>)
   b44d4:	f852 4023 	ldrls.w	r4, [r2, r3, lsl #2]
   b44d8:	b085      	sub	sp, #20
   b44da:	4605      	mov	r5, r0
  // the function will simply hold off (if needed) on issuing the
  // subsequent round of data until the latch time has elapsed.  This
  // allows the mainline code to start generating the next frame of data
  // rather than stalling for the latch.
  uint32_t wait_time; // wait time in microseconds.
  switch(type) {
   b44dc:	bf88      	it	hi
   b44de:	2432      	movhi	r4, #50	; 0x32
#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   b44e0:	f000 fa4a 	bl	b4978 <HAL_Timer_Get_Micro_Seconds>
    case WS2812B2_FAST:
    default: {   // default = 50us reset pulse
        wait_time = 50L;
      } break;
  }
  while((micros() - endTime) < wait_time);
   b44e4:	692b      	ldr	r3, [r5, #16]
   b44e6:	1ac0      	subs	r0, r0, r3
   b44e8:	42a0      	cmp	r0, r4
   b44ea:	d3f9      	bcc.n	b44e0 <_ZN17Adafruit_NeoPixel4showEv+0x24>

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   b44ec:	4cb9      	ldr	r4, [pc, #740]	; (b47d4 <_ZN17Adafruit_NeoPixel4showEv+0x318>)
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   b44ee:	88ae      	ldrh	r6, [r5, #4]
    if( (PWM[device]->ENABLE == 0)                            &&
   b44f0:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b44f4:	b91b      	cbnz	r3, b44fe <_ZN17Adafruit_NeoPixel4showEv+0x42>
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b44f6:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560
    if( (PWM[device]->ENABLE == 0)                            &&
   b44fa:	2b00      	cmp	r3, #0
   b44fc:	db7e      	blt.n	b45fc <_ZN17Adafruit_NeoPixel4showEv+0x140>
   b44fe:	4cb6      	ldr	r4, [pc, #728]	; (b47d8 <_ZN17Adafruit_NeoPixel4showEv+0x31c>)
   b4500:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4504:	b923      	cbnz	r3, b4510 <_ZN17Adafruit_NeoPixel4showEv+0x54>
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4506:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560
    if( (PWM[device]->ENABLE == 0)                            &&
   b450a:	2b00      	cmp	r3, #0
   b450c:	f2c0 816e 	blt.w	b47ec <_ZN17Adafruit_NeoPixel4showEv+0x330>
   b4510:	4cb2      	ldr	r4, [pc, #712]	; (b47dc <_ZN17Adafruit_NeoPixel4showEv+0x320>)
   b4512:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4516:	2b00      	cmp	r3, #0
   b4518:	f000 8144 	beq.w	b47a4 <_ZN17Adafruit_NeoPixel4showEv+0x2e8>
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b451c:	79eb      	ldrb	r3, [r5, #7]
   b451e:	4ab0      	ldr	r2, [pc, #704]	; (b47e0 <_ZN17Adafruit_NeoPixel4showEv+0x324>)
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   b4520:	4cb0      	ldr	r4, [pc, #704]	; (b47e4 <_ZN17Adafruit_NeoPixel4showEv+0x328>)
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b4522:	6812      	ldr	r2, [r2, #0]
   b4524:	0119      	lsls	r1, r3, #4
   b4526:	eb02 1303 	add.w	r3, r2, r3, lsl #4
   b452a:	5c57      	ldrb	r7, [r2, r1]
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   b452c:	49ae      	ldr	r1, [pc, #696]	; (b47e8 <_ZN17Adafruit_NeoPixel4showEv+0x32c>)
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b452e:	785b      	ldrb	r3, [r3, #1]
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   b4530:	f8d1 20fc 	ldr.w	r2, [r1, #252]	; 0xfc
   b4534:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
   b4538:	f8c1 20fc 	str.w	r2, [r1, #252]	; 0xfc
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   b453c:	6822      	ldr	r2, [r4, #0]
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b453e:	f003 031f 	and.w	r3, r3, #31
   b4542:	ea43 1347 	orr.w	r3, r3, r7, lsl #5
   b4546:	2701      	movs	r7, #1
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   b4548:	433a      	orrs	r2, r7
   b454a:	6022      	str	r2, [r4, #0]
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   b454c:	88a9      	ldrh	r1, [r5, #4]
      uint8_t *p = pixels;
   b454e:	f8d5 800c 	ldr.w	r8, [r5, #12]
      uint32_t cycStart = DWT->CYCCNT;
   b4552:	f8d4 9004 	ldr.w	r9, [r4, #4]
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b4556:	409f      	lsls	r7, r3
      for(uint16_t n=0; n<numBytes; n++) {
   b4558:	2900      	cmp	r1, #0
   b455a:	d044      	beq.n	b45e6 <_ZN17Adafruit_NeoPixel4showEv+0x12a>
   b455c:	f04f 0e00 	mov.w	lr, #0
      uint32_t cyc = 0;
   b4560:	4672      	mov	r2, lr

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
          while(DWT->CYCCNT - cyc < CYCLES_X00);
          cyc  = DWT->CYCCNT;

          NRF_GPIO->OUTSET |= pinMask;
   b4562:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
        uint8_t pix = *p++;
   b4566:	f818 cb01 	ldrb.w	ip, [r8], #1
   b456a:	2008      	movs	r0, #8
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   b456c:	2680      	movs	r6, #128	; 0x80
          while(DWT->CYCCNT - cyc < CYCLES_X00);
   b456e:	6863      	ldr	r3, [r4, #4]
   b4570:	1a9b      	subs	r3, r3, r2
   b4572:	2b46      	cmp	r3, #70	; 0x46
   b4574:	d9fb      	bls.n	b456e <_ZN17Adafruit_NeoPixel4showEv+0xb2>
          cyc  = DWT->CYCCNT;
   b4576:	6862      	ldr	r2, [r4, #4]
          NRF_GPIO->OUTSET |= pinMask;
   b4578:	f8d1 3508 	ldr.w	r3, [r1, #1288]	; 0x508

          if(pix & mask) {
   b457c:	ea1c 0f06 	tst.w	ip, r6
          NRF_GPIO->OUTSET |= pinMask;
   b4580:	ea43 0307 	orr.w	r3, r3, r7
   b4584:	f8c1 3508 	str.w	r3, [r1, #1288]	; 0x508
          if(pix & mask) {
   b4588:	d02f      	beq.n	b45ea <_ZN17Adafruit_NeoPixel4showEv+0x12e>
            while(DWT->CYCCNT - cyc < CYCLES_X00_T1H);
   b458a:	6863      	ldr	r3, [r4, #4]
   b458c:	1a9b      	subs	r3, r3, r2
   b458e:	2b28      	cmp	r3, #40	; 0x28
   b4590:	d9fb      	bls.n	b458a <_ZN17Adafruit_NeoPixel4showEv+0xce>
          } else {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
          }

          NRF_GPIO->OUTCLR |= pinMask;
   b4592:	f8d1 350c 	ldr.w	r3, [r1, #1292]	; 0x50c
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   b4596:	3801      	subs	r0, #1
          NRF_GPIO->OUTCLR |= pinMask;
   b4598:	ea43 0307 	orr.w	r3, r3, r7
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   b459c:	ea4f 0656 	mov.w	r6, r6, lsr #1
          NRF_GPIO->OUTCLR |= pinMask;
   b45a0:	f8c1 350c 	str.w	r3, [r1, #1292]	; 0x50c
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   b45a4:	d1e3      	bne.n	b456e <_ZN17Adafruit_NeoPixel4showEv+0xb2>
      for(uint16_t n=0; n<numBytes; n++) {
   b45a6:	88ab      	ldrh	r3, [r5, #4]
   b45a8:	f10e 0e01 	add.w	lr, lr, #1
   b45ac:	fa1f fe8e 	uxth.w	lr, lr
   b45b0:	4573      	cmp	r3, lr
   b45b2:	d8d8      	bhi.n	b4566 <_ZN17Adafruit_NeoPixel4showEv+0xaa>
      while(DWT->CYCCNT - cyc < CYCLES_X00);


      // If total time longer than 25%, resend the whole data.
      // Since we are likely to be interrupted by SoftDevice
      if ( (DWT->CYCCNT - cycStart) < ( 8*numBytes*((CYCLES_X00*5)/4) ) ) {
   b45b4:	f44f 7130 	mov.w	r1, #704	; 0x2c0
   b45b8:	fb03 f101 	mul.w	r1, r3, r1
      while(DWT->CYCCNT - cyc < CYCLES_X00);
   b45bc:	6863      	ldr	r3, [r4, #4]
   b45be:	1a9b      	subs	r3, r3, r2
   b45c0:	2b46      	cmp	r3, #70	; 0x46
   b45c2:	d9fb      	bls.n	b45bc <_ZN17Adafruit_NeoPixel4showEv+0x100>
      if ( (DWT->CYCCNT - cycStart) < ( 8*numBytes*((CYCLES_X00*5)/4) ) ) {
   b45c4:	6863      	ldr	r3, [r4, #4]
   b45c6:	eba3 0909 	sub.w	r9, r3, r9
   b45ca:	4589      	cmp	r9, r1
   b45cc:	f0c0 80e4 	bcc.w	b4798 <_ZN17Adafruit_NeoPixel4showEv+0x2dc>
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b45d0:	f44f 7096 	mov.w	r0, #300	; 0x12c
   b45d4:	f000 f9c8 	bl	b4968 <HAL_Delay_Microseconds>
      for(uint16_t n=0; n<numBytes; n++) {
   b45d8:	88a9      	ldrh	r1, [r5, #4]
      uint8_t *p = pixels;
   b45da:	f8d5 800c 	ldr.w	r8, [r5, #12]
      uint32_t cycStart = DWT->CYCCNT;
   b45de:	f8d4 9004 	ldr.w	r9, [r4, #4]
      for(uint16_t n=0; n<numBytes; n++) {
   b45e2:	2900      	cmp	r1, #0
   b45e4:	d1ba      	bne.n	b455c <_ZN17Adafruit_NeoPixel4showEv+0xa0>
      uint32_t cyc = 0;
   b45e6:	460a      	mov	r2, r1
   b45e8:	e7e8      	b.n	b45bc <_ZN17Adafruit_NeoPixel4showEv+0x100>
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
   b45ea:	6863      	ldr	r3, [r4, #4]
   b45ec:	1a9b      	subs	r3, r3, r2
   b45ee:	2b11      	cmp	r3, #17
   b45f0:	d8cf      	bhi.n	b4592 <_ZN17Adafruit_NeoPixel4showEv+0xd6>
   b45f2:	6863      	ldr	r3, [r4, #4]
   b45f4:	1a9b      	subs	r3, r3, r2
   b45f6:	2b11      	cmp	r3, #17
   b45f8:	d9f7      	bls.n	b45ea <_ZN17Adafruit_NeoPixel4showEv+0x12e>
   b45fa:	e7ca      	b.n	b4592 <_ZN17Adafruit_NeoPixel4showEv+0xd6>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b45fc:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4600:	2b00      	cmp	r3, #0
   b4602:	f6bf af7c 	bge.w	b44fe <_ZN17Adafruit_NeoPixel4showEv+0x42>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4606:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b460a:	2b00      	cmp	r3, #0
   b460c:	f6bf af77 	bge.w	b44fe <_ZN17Adafruit_NeoPixel4showEv+0x42>
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   b4610:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4614:	2b00      	cmp	r3, #0
   b4616:	f6bf af72 	bge.w	b44fe <_ZN17Adafruit_NeoPixel4showEv+0x42>
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   b461a:	0136      	lsls	r6, r6, #4
   b461c:	1d33      	adds	r3, r6, #4
      pixels_pattern = (uint16_t *) malloc(pattern_size);
   b461e:	4618      	mov	r0, r3
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   b4620:	9300      	str	r3, [sp, #0]
      pixels_pattern = (uint16_t *) malloc(pattern_size);
   b4622:	f000 fb2d 	bl	b4c80 <malloc>
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
   b4626:	2800      	cmp	r0, #0
   b4628:	f43f af78 	beq.w	b451c <_ZN17Adafruit_NeoPixel4showEv+0x60>
    for(uint16_t n=0; n<numBytes; n++) {
   b462c:	88ab      	ldrh	r3, [r5, #4]
   b462e:	2b00      	cmp	r3, #0
   b4630:	f000 80ed 	beq.w	b480e <_ZN17Adafruit_NeoPixel4showEv+0x352>
      uint8_t pix = pixels[n];
   b4634:	68ea      	ldr	r2, [r5, #12]
   b4636:	3b01      	subs	r3, #1
   b4638:	fa12 f783 	uxtah	r7, r2, r3
   b463c:	f102 3eff 	add.w	lr, r2, #4294967295
    uint16_t pos = 0; // bit position
   b4640:	2300      	movs	r3, #0
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4642:	f248 0206 	movw	r2, #32774	; 0x8006
   b4646:	f248 010d 	movw	r1, #32781	; 0x800d
      uint8_t pix = pixels[n];
   b464a:	f81e cf01 	ldrb.w	ip, [lr, #1]!
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b464e:	f01c 0f80 	tst.w	ip, #128	; 0x80
   b4652:	bf0c      	ite	eq
   b4654:	4693      	moveq	fp, r2
   b4656:	468b      	movne	fp, r1
   b4658:	f01c 0f40 	tst.w	ip, #64	; 0x40
   b465c:	bf0c      	ite	eq
   b465e:	4616      	moveq	r6, r2
   b4660:	460e      	movne	r6, r1
   b4662:	f01c 0f20 	tst.w	ip, #32
   b4666:	bf0c      	ite	eq
   b4668:	4690      	moveq	r8, r2
   b466a:	4688      	movne	r8, r1
        pos++;
   b466c:	f103 0901 	add.w	r9, r3, #1
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4670:	f8cd 8008 	str.w	r8, [sp, #8]
   b4674:	9601      	str	r6, [sp, #4]
        pos++;
   b4676:	f103 0802 	add.w	r8, r3, #2
   b467a:	fa1f f989 	uxth.w	r9, r9
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b467e:	9e01      	ldr	r6, [sp, #4]
   b4680:	f820 b013 	strh.w	fp, [r0, r3, lsl #1]
        pos++;
   b4684:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4688:	f820 6019 	strh.w	r6, [r0, r9, lsl #1]
   b468c:	9e02      	ldr	r6, [sp, #8]
   b468e:	f820 6018 	strh.w	r6, [r0, r8, lsl #1]
        pos++;
   b4692:	f103 0803 	add.w	r8, r3, #3
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4696:	f01c 0f10 	tst.w	ip, #16
        pos++;
   b469a:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b469e:	bf0c      	ite	eq
   b46a0:	4693      	moveq	fp, r2
   b46a2:	468b      	movne	fp, r1
   b46a4:	f820 b018 	strh.w	fp, [r0, r8, lsl #1]
        pos++;
   b46a8:	f103 0804 	add.w	r8, r3, #4
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b46ac:	f01c 0f08 	tst.w	ip, #8
        pos++;
   b46b0:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b46b4:	bf0c      	ite	eq
   b46b6:	4693      	moveq	fp, r2
   b46b8:	468b      	movne	fp, r1
   b46ba:	f820 b018 	strh.w	fp, [r0, r8, lsl #1]
        pos++;
   b46be:	f103 0805 	add.w	r8, r3, #5
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b46c2:	f01c 0f04 	tst.w	ip, #4
        pos++;
   b46c6:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b46ca:	bf0c      	ite	eq
   b46cc:	4693      	moveq	fp, r2
   b46ce:	468b      	movne	fp, r1
   b46d0:	f820 b018 	strh.w	fp, [r0, r8, lsl #1]
        pos++;
   b46d4:	f103 0a08 	add.w	sl, r3, #8
   b46d8:	f103 0806 	add.w	r8, r3, #6
   b46dc:	3307      	adds	r3, #7
   b46de:	b29b      	uxth	r3, r3
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b46e0:	f01c 0f02 	tst.w	ip, #2
        pos++;
   b46e4:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b46e8:	bf0c      	ite	eq
   b46ea:	4693      	moveq	fp, r2
   b46ec:	468b      	movne	fp, r1
        pos++;
   b46ee:	f8cd a00c 	str.w	sl, [sp, #12]
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b46f2:	f01c 0f01 	tst.w	ip, #1
   b46f6:	f820 b018 	strh.w	fp, [r0, r8, lsl #1]
   b46fa:	bf15      	itete	ne
   b46fc:	f820 1013 	strhne.w	r1, [r0, r3, lsl #1]
   b4700:	f820 2013 	strheq.w	r2, [r0, r3, lsl #1]
        pos++;
   b4704:	fa1f f38a 	uxthne.w	r3, sl
   b4708:	f8bd 300c 	ldrheq.w	r3, [sp, #12]
    for(uint16_t n=0; n<numBytes; n++) {
   b470c:	4577      	cmp	r7, lr
   b470e:	d19c      	bne.n	b464a <_ZN17Adafruit_NeoPixel4showEv+0x18e>
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b4710:	1c59      	adds	r1, r3, #1
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b4712:	3302      	adds	r3, #2
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b4714:	b289      	uxth	r1, r1
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b4716:	b29b      	uxth	r3, r3
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b4718:	0049      	lsls	r1, r1, #1
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b471a:	005b      	lsls	r3, r3, #1
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b471c:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   b4720:	5247      	strh	r7, [r0, r1]
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   b4722:	9a00      	ldr	r2, [sp, #0]
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b4724:	52c7      	strh	r7, [r0, r3]
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b4726:	4b2e      	ldr	r3, [pc, #184]	; (b47e0 <_ZN17Adafruit_NeoPixel4showEv+0x324>)
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   b4728:	0856      	lsrs	r6, r2, #1
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b472a:	681f      	ldr	r7, [r3, #0]
    pwm->MODE = (PWM_MODE_UPDOWN_Up << PWM_MODE_UPDOWN_Pos);
   b472c:	2200      	movs	r2, #0
      pwm->COUNTERTOP = (CTOPVAL << PWM_COUNTERTOP_COUNTERTOP_Pos);
   b472e:	2314      	movs	r3, #20
    pwm->MODE = (PWM_MODE_UPDOWN_Up << PWM_MODE_UPDOWN_Pos);
   b4730:	f8c4 2504 	str.w	r2, [r4, #1284]	; 0x504
    pwm->PRESCALER = (PWM_PRESCALER_PRESCALER_DIV_1 << PWM_PRESCALER_PRESCALER_Pos);
   b4734:	f8c4 250c 	str.w	r2, [r4, #1292]	; 0x50c
      pwm->COUNTERTOP = (CTOPVAL << PWM_COUNTERTOP_COUNTERTOP_Pos);
   b4738:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    pwm->LOOP = (PWM_LOOP_CNT_Disabled << PWM_LOOP_CNT_Pos);
   b473c:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
    pwm->DECODER = (PWM_DECODER_LOAD_Common << PWM_DECODER_LOAD_Pos) |
   b4740:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510
    pwm->SEQ[0].PTR = (uint32_t)(pixels_pattern) << PWM_SEQ_PTR_PTR_Pos;
   b4744:	f8c4 0520 	str.w	r0, [r4, #1312]	; 0x520
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   b4748:	f8c4 6524 	str.w	r6, [r4, #1316]	; 0x524
    pwm->SEQ[0].REFRESH  = 0;
   b474c:	f8c4 2528 	str.w	r2, [r4, #1320]	; 0x528
    pwm->SEQ[0].ENDDELAY = 0;
   b4750:	f8c4 252c 	str.w	r2, [r4, #1324]	; 0x52c
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b4754:	79eb      	ldrb	r3, [r5, #7]
   b4756:	eb07 1c03 	add.w	ip, r7, r3, lsl #4
   b475a:	011b      	lsls	r3, r3, #4
    pwm->ENABLE = 1;
   b475c:	2101      	movs	r1, #1
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b475e:	5cfe      	ldrb	r6, [r7, r3]
   b4760:	f89c 3001 	ldrb.w	r3, [ip, #1]
   b4764:	f003 031f 	and.w	r3, r3, #31
   b4768:	ea43 1346 	orr.w	r3, r3, r6, lsl #5
   b476c:	f8c4 3560 	str.w	r3, [r4, #1376]	; 0x560
    pwm->ENABLE = 1;
   b4770:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
    pwm->EVENTS_SEQEND[0]  = 0;
   b4774:	f8c4 2110 	str.w	r2, [r4, #272]	; 0x110
    pwm->TASKS_SEQSTART[0] = 1;
   b4778:	60a1      	str	r1, [r4, #8]
    while(!pwm->EVENTS_SEQEND[0])
   b477a:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   b477e:	2b00      	cmp	r3, #0
   b4780:	d0fb      	beq.n	b477a <_ZN17Adafruit_NeoPixel4showEv+0x2be>
    pwm->EVENTS_SEQEND[0] = 0;
   b4782:	2300      	movs	r3, #0
    pwm->PSEL.OUT[0] = 0xFFFFFFFFUL;
   b4784:	f04f 32ff 	mov.w	r2, #4294967295
    pwm->EVENTS_SEQEND[0] = 0;
   b4788:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    pwm->ENABLE = 0;
   b478c:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    pwm->PSEL.OUT[0] = 0xFFFFFFFFUL;
   b4790:	f8c4 2560 	str.w	r2, [r4, #1376]	; 0x560
      free(pixels_pattern);
   b4794:	f000 fa7c 	bl	b4c90 <free>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   b4798:	f000 f8ee 	bl	b4978 <HAL_Timer_Get_Micro_Seconds>
  }
// END of NRF52 implementation


#endif
  endTime = micros(); // Save EOD time for latch on next call
   b479c:	6128      	str	r0, [r5, #16]
}
   b479e:	b005      	add	sp, #20
   b47a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b47a4:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560
    if( (PWM[device]->ENABLE == 0)                            &&
   b47a8:	2b00      	cmp	r3, #0
   b47aa:	f6bf aeb7 	bge.w	b451c <_ZN17Adafruit_NeoPixel4showEv+0x60>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b47ae:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b47b2:	2b00      	cmp	r3, #0
   b47b4:	f6bf aeb2 	bge.w	b451c <_ZN17Adafruit_NeoPixel4showEv+0x60>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b47b8:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b47bc:	2b00      	cmp	r3, #0
   b47be:	f6bf aead 	bge.w	b451c <_ZN17Adafruit_NeoPixel4showEv+0x60>
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   b47c2:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b47c6:	2b00      	cmp	r3, #0
   b47c8:	f6bf aea8 	bge.w	b451c <_ZN17Adafruit_NeoPixel4showEv+0x60>
   b47cc:	e725      	b.n	b461a <_ZN17Adafruit_NeoPixel4showEv+0x15e>
   b47ce:	bf00      	nop
   b47d0:	000b5e60 	.word	0x000b5e60
   b47d4:	4001c000 	.word	0x4001c000
   b47d8:	40021000 	.word	0x40021000
   b47dc:	40022000 	.word	0x40022000
   b47e0:	2003e684 	.word	0x2003e684
   b47e4:	e0001000 	.word	0xe0001000
   b47e8:	e000ed00 	.word	0xe000ed00
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b47ec:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b47f0:	2b00      	cmp	r3, #0
   b47f2:	f6bf ae8d 	bge.w	b4510 <_ZN17Adafruit_NeoPixel4showEv+0x54>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b47f6:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b47fa:	2b00      	cmp	r3, #0
   b47fc:	f6bf ae88 	bge.w	b4510 <_ZN17Adafruit_NeoPixel4showEv+0x54>
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   b4800:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4804:	2b00      	cmp	r3, #0
   b4806:	f6bf ae83 	bge.w	b4510 <_ZN17Adafruit_NeoPixel4showEv+0x54>
   b480a:	e706      	b.n	b461a <_ZN17Adafruit_NeoPixel4showEv+0x15e>
   b480c:	4770      	bx	lr
    for(uint16_t n=0; n<numBytes; n++) {
   b480e:	2304      	movs	r3, #4
   b4810:	2102      	movs	r1, #2
   b4812:	e783      	b.n	b471c <_ZN17Adafruit_NeoPixel4showEv+0x260>

000b4814 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>:

// Set pixel color from separate R,G,B components:
void Adafruit_NeoPixel::setPixelColor(
  uint16_t n, uint8_t r, uint8_t g, uint8_t b) {
   b4814:	b570      	push	{r4, r5, r6, lr}
  if(n < numLEDs) {
   b4816:	8844      	ldrh	r4, [r0, #2]
  uint16_t n, uint8_t r, uint8_t g, uint8_t b) {
   b4818:	f89d 5010 	ldrb.w	r5, [sp, #16]
  if(n < numLEDs) {
   b481c:	428c      	cmp	r4, r1
   b481e:	d922      	bls.n	b4866 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x52>
    if(brightness) { // See notes in setBrightness()
   b4820:	7a04      	ldrb	r4, [r0, #8]
   b4822:	b144      	cbz	r4, b4836 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x22>
      r = (r * brightness) >> 8;
   b4824:	fb12 f204 	smulbb	r2, r2, r4
      g = (g * brightness) >> 8;
   b4828:	fb14 f303 	smulbb	r3, r4, r3
      b = (b * brightness) >> 8;
   b482c:	fb14 f405 	smulbb	r4, r4, r5
      r = (r * brightness) >> 8;
   b4830:	0a12      	lsrs	r2, r2, #8
      g = (g * brightness) >> 8;
   b4832:	0a1b      	lsrs	r3, r3, #8
      b = (b * brightness) >> 8;
   b4834:	0a25      	lsrs	r5, r4, #8
    }
    uint8_t *p = &pixels[n * 3];
   b4836:	68c6      	ldr	r6, [r0, #12]
   b4838:	7980      	ldrb	r0, [r0, #6]
   b483a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   b483e:	3802      	subs	r0, #2
   b4840:	1874      	adds	r4, r6, r1
    switch(type) {
   b4842:	2806      	cmp	r0, #6
   b4844:	d810      	bhi.n	b4868 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x54>
   b4846:	e8df f000 	tbb	[pc, r0]
   b484a:	0f04      	.short	0x0f04
   b484c:	040f0408 	.word	0x040f0408
   b4850:	04          	.byte	0x04
   b4851:	00          	.byte	0x00
      case WS2812B: // WS2812, WS2812B & WS2813 is GRB order.
      case WS2812B_FAST:
      case WS2812B2:
      case WS2812B2_FAST: {
          *p++ = g;
   b4852:	5473      	strb	r3, [r6, r1]
          *p++ = r;
   b4854:	7062      	strb	r2, [r4, #1]
      case WS2811: // WS2811 is RGB order
      case TM1803: // TM1803 is RGB order
      default: {   // default is RGB order
          *p++ = r;
          *p++ = g;
          *p = b;
   b4856:	70a5      	strb	r5, [r4, #2]
        } break;
    }
  }
}
   b4858:	e005      	b.n	b4866 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x52>
          *p++ = r;
   b485a:	2afe      	cmp	r2, #254	; 0xfe
   b485c:	bf28      	it	cs
   b485e:	22fe      	movcs	r2, #254	; 0xfe
   b4860:	5472      	strb	r2, [r6, r1]
          *p++ = b;
   b4862:	7065      	strb	r5, [r4, #1]
          *p = g;
   b4864:	70a3      	strb	r3, [r4, #2]
}
   b4866:	bd70      	pop	{r4, r5, r6, pc}
          *p++ = r;
   b4868:	5472      	strb	r2, [r6, r1]
          *p++ = g;
   b486a:	7063      	strb	r3, [r4, #1]
   b486c:	e7f3      	b.n	b4856 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x42>

000b486e <_ZN17Adafruit_NeoPixel13setPixelColorEthhhh>:

// Set pixel color from separate R,G,B,W components:
void Adafruit_NeoPixel::setPixelColor(
  uint16_t n, uint8_t r, uint8_t g, uint8_t b, uint8_t w) {
   b486e:	b5f0      	push	{r4, r5, r6, r7, lr}
   b4870:	4606      	mov	r6, r0
  if(n < numLEDs) {
   b4872:	8840      	ldrh	r0, [r0, #2]
  uint16_t n, uint8_t r, uint8_t g, uint8_t b, uint8_t w) {
   b4874:	f89d 4014 	ldrb.w	r4, [sp, #20]
   b4878:	f89d c018 	ldrb.w	ip, [sp, #24]
  if(n < numLEDs) {
   b487c:	4288      	cmp	r0, r1
   b487e:	d929      	bls.n	b48d4 <_ZN17Adafruit_NeoPixel13setPixelColorEthhhh+0x66>
    if(brightness) { // See notes in setBrightness()
   b4880:	7a35      	ldrb	r5, [r6, #8]
   b4882:	b165      	cbz	r5, b489e <_ZN17Adafruit_NeoPixel13setPixelColorEthhhh+0x30>
      r = (r * brightness) >> 8;
   b4884:	fb12 f205 	smulbb	r2, r2, r5
      g = (g * brightness) >> 8;
   b4888:	fb15 f303 	smulbb	r3, r5, r3
      b = (b * brightness) >> 8;
   b488c:	fb15 f404 	smulbb	r4, r5, r4
      w = (w * brightness) >> 8;
   b4890:	fb15 f50c 	smulbb	r5, r5, ip
      r = (r * brightness) >> 8;
   b4894:	0a12      	lsrs	r2, r2, #8
      g = (g * brightness) >> 8;
   b4896:	0a1b      	lsrs	r3, r3, #8
      b = (b * brightness) >> 8;
   b4898:	0a24      	lsrs	r4, r4, #8
      w = (w * brightness) >> 8;
   b489a:	ea4f 2c15 	mov.w	ip, r5, lsr #8
    }
    uint8_t *p = &pixels[n * (type==SK6812RGBW?4:3)];
   b489e:	68f7      	ldr	r7, [r6, #12]
   b48a0:	79b6      	ldrb	r6, [r6, #6]
   b48a2:	2e06      	cmp	r6, #6
   b48a4:	bf0c      	ite	eq
   b48a6:	2004      	moveq	r0, #4
   b48a8:	2003      	movne	r0, #3
   b48aa:	4348      	muls	r0, r1
   b48ac:	3e02      	subs	r6, #2
   b48ae:	1839      	adds	r1, r7, r0
    switch(type) {
   b48b0:	2e06      	cmp	r6, #6
   b48b2:	d816      	bhi.n	b48e2 <_ZN17Adafruit_NeoPixel13setPixelColorEthhhh+0x74>
   b48b4:	e8df f006 	tbb	[pc, r6]
   b48b8:	04081504 	.word	0x04081504
   b48bc:	040f      	.short	0x040f
   b48be:	04          	.byte	0x04
   b48bf:	00          	.byte	0x00
      case WS2812B: // WS2812, WS2812B & WS2813 is GRB order.
      case WS2812B_FAST:
      case WS2812B2:
      case WS2812B2_FAST: {
          *p++ = g;
   b48c0:	543b      	strb	r3, [r7, r0]
          *p++ = r;
   b48c2:	704a      	strb	r2, [r1, #1]
      case WS2811: // WS2811 is RGB order
      case TM1803: // TM1803 is RGB order
      default: {   // default is RGB order
          *p++ = r;
          *p++ = g;
          *p = b;
   b48c4:	708c      	strb	r4, [r1, #2]
        } break;
    }
  }
}
   b48c6:	e005      	b.n	b48d4 <_ZN17Adafruit_NeoPixel13setPixelColorEthhhh+0x66>
          *p++ = r;
   b48c8:	2afe      	cmp	r2, #254	; 0xfe
   b48ca:	bf28      	it	cs
   b48cc:	22fe      	movcs	r2, #254	; 0xfe
   b48ce:	543a      	strb	r2, [r7, r0]
          *p++ = b;
   b48d0:	704c      	strb	r4, [r1, #1]
          *p = g;
   b48d2:	708b      	strb	r3, [r1, #2]
}
   b48d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
          *p++ = r;
   b48d6:	543a      	strb	r2, [r7, r0]
          *p++ = g;
   b48d8:	704b      	strb	r3, [r1, #1]
          *p++ = b;
   b48da:	708c      	strb	r4, [r1, #2]
          *p = w;
   b48dc:	f881 c003 	strb.w	ip, [r1, #3]
        } break;
   b48e0:	e7f8      	b.n	b48d4 <_ZN17Adafruit_NeoPixel13setPixelColorEthhhh+0x66>
          *p++ = r;
   b48e2:	543a      	strb	r2, [r7, r0]
          *p++ = g;
   b48e4:	704b      	strb	r3, [r1, #1]
   b48e6:	e7ed      	b.n	b48c4 <_ZN17Adafruit_NeoPixel13setPixelColorEthhhh+0x56>

000b48e8 <_GLOBAL__sub_I_PIN_MAP2>:
  return brightness - 1;
}

void Adafruit_NeoPixel::clear(void) {
  memset(pixels, 0, numBytes);
}
   b48e8:	b508      	push	{r3, lr}
  NRF5x_Pin_Info* PIN_MAP2 = HAL_Pin_Map();
   b48ea:	f000 f815 	bl	b4918 <HAL_Pin_Map>
   b48ee:	4b01      	ldr	r3, [pc, #4]	; (b48f4 <_GLOBAL__sub_I_PIN_MAP2+0xc>)
   b48f0:	6018      	str	r0, [r3, #0]
}
   b48f2:	bd08      	pop	{r3, pc}
   b48f4:	2003e684 	.word	0x2003e684

000b48f8 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b48f8:	b508      	push	{r3, lr}
   b48fa:	4b02      	ldr	r3, [pc, #8]	; (b4904 <netdb_freeaddrinfo+0xc>)
   b48fc:	681b      	ldr	r3, [r3, #0]
   b48fe:	689b      	ldr	r3, [r3, #8]
   b4900:	9301      	str	r3, [sp, #4]
   b4902:	bd08      	pop	{r3, pc}
   b4904:	00030268 	.word	0x00030268

000b4908 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b4908:	b508      	push	{r3, lr}
   b490a:	4b02      	ldr	r3, [pc, #8]	; (b4914 <netdb_getaddrinfo+0xc>)
   b490c:	681b      	ldr	r3, [r3, #0]
   b490e:	68db      	ldr	r3, [r3, #12]
   b4910:	9301      	str	r3, [sp, #4]
   b4912:	bd08      	pop	{r3, pc}
   b4914:	00030268 	.word	0x00030268

000b4918 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   b4918:	b508      	push	{r3, lr}
   b491a:	4b02      	ldr	r3, [pc, #8]	; (b4924 <HAL_Pin_Map+0xc>)
   b491c:	681b      	ldr	r3, [r3, #0]
   b491e:	681b      	ldr	r3, [r3, #0]
   b4920:	9301      	str	r3, [sp, #4]
   b4922:	bd08      	pop	{r3, pc}
   b4924:	0003022c 	.word	0x0003022c

000b4928 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b4928:	b508      	push	{r3, lr}
   b492a:	4b02      	ldr	r3, [pc, #8]	; (b4934 <HAL_Pin_Mode+0xc>)
   b492c:	681b      	ldr	r3, [r3, #0]
   b492e:	689b      	ldr	r3, [r3, #8]
   b4930:	9301      	str	r3, [sp, #4]
   b4932:	bd08      	pop	{r3, pc}
   b4934:	0003022c 	.word	0x0003022c

000b4938 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b4938:	b508      	push	{r3, lr}
   b493a:	4b02      	ldr	r3, [pc, #8]	; (b4944 <HAL_Get_Pin_Mode+0xc>)
   b493c:	681b      	ldr	r3, [r3, #0]
   b493e:	68db      	ldr	r3, [r3, #12]
   b4940:	9301      	str	r3, [sp, #4]
   b4942:	bd08      	pop	{r3, pc}
   b4944:	0003022c 	.word	0x0003022c

000b4948 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b4948:	b508      	push	{r3, lr}
   b494a:	4b02      	ldr	r3, [pc, #8]	; (b4954 <HAL_GPIO_Write+0xc>)
   b494c:	681b      	ldr	r3, [r3, #0]
   b494e:	691b      	ldr	r3, [r3, #16]
   b4950:	9301      	str	r3, [sp, #4]
   b4952:	bd08      	pop	{r3, pc}
   b4954:	0003022c 	.word	0x0003022c

000b4958 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b4958:	b508      	push	{r3, lr}
   b495a:	4b02      	ldr	r3, [pc, #8]	; (b4964 <HAL_RNG_GetRandomNumber+0xc>)
   b495c:	681b      	ldr	r3, [r3, #0]
   b495e:	685b      	ldr	r3, [r3, #4]
   b4960:	9301      	str	r3, [sp, #4]
   b4962:	bd08      	pop	{r3, pc}
   b4964:	00030218 	.word	0x00030218

000b4968 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b4968:	b508      	push	{r3, lr}
   b496a:	4b02      	ldr	r3, [pc, #8]	; (b4974 <HAL_Delay_Microseconds+0xc>)
   b496c:	681b      	ldr	r3, [r3, #0]
   b496e:	68db      	ldr	r3, [r3, #12]
   b4970:	9301      	str	r3, [sp, #4]
   b4972:	bd08      	pop	{r3, pc}
   b4974:	00030218 	.word	0x00030218

000b4978 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   b4978:	b508      	push	{r3, lr}
   b497a:	4b02      	ldr	r3, [pc, #8]	; (b4984 <HAL_Timer_Get_Micro_Seconds+0xc>)
   b497c:	681b      	ldr	r3, [r3, #0]
   b497e:	691b      	ldr	r3, [r3, #16]
   b4980:	9301      	str	r3, [sp, #4]
   b4982:	bd08      	pop	{r3, pc}
   b4984:	00030218 	.word	0x00030218

000b4988 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b4988:	b508      	push	{r3, lr}
   b498a:	4b02      	ldr	r3, [pc, #8]	; (b4994 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b498c:	681b      	ldr	r3, [r3, #0]
   b498e:	695b      	ldr	r3, [r3, #20]
   b4990:	9301      	str	r3, [sp, #4]
   b4992:	bd08      	pop	{r3, pc}
   b4994:	00030218 	.word	0x00030218

000b4998 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b4998:	b508      	push	{r3, lr}
   b499a:	4b02      	ldr	r3, [pc, #8]	; (b49a4 <os_mutex_recursive_create+0xc>)
   b499c:	681b      	ldr	r3, [r3, #0]
   b499e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b49a0:	9301      	str	r3, [sp, #4]
   b49a2:	bd08      	pop	{r3, pc}
   b49a4:	00030248 	.word	0x00030248

000b49a8 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b49a8:	b508      	push	{r3, lr}
   b49aa:	4b02      	ldr	r3, [pc, #8]	; (b49b4 <inet_inet_ntop+0xc>)
   b49ac:	681b      	ldr	r3, [r3, #0]
   b49ae:	695b      	ldr	r3, [r3, #20]
   b49b0:	9301      	str	r3, [sp, #4]
   b49b2:	bd08      	pop	{r3, pc}
   b49b4:	00030264 	.word	0x00030264

000b49b8 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b49b8:	b508      	push	{r3, lr}
   b49ba:	4b02      	ldr	r3, [pc, #8]	; (b49c4 <hal_usart_write+0xc>)
   b49bc:	681b      	ldr	r3, [r3, #0]
   b49be:	68db      	ldr	r3, [r3, #12]
   b49c0:	9301      	str	r3, [sp, #4]
   b49c2:	bd08      	pop	{r3, pc}
   b49c4:	0003023c 	.word	0x0003023c

000b49c8 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b49c8:	b508      	push	{r3, lr}
   b49ca:	4b02      	ldr	r3, [pc, #8]	; (b49d4 <hal_usart_available+0xc>)
   b49cc:	681b      	ldr	r3, [r3, #0]
   b49ce:	691b      	ldr	r3, [r3, #16]
   b49d0:	9301      	str	r3, [sp, #4]
   b49d2:	bd08      	pop	{r3, pc}
   b49d4:	0003023c 	.word	0x0003023c

000b49d8 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b49d8:	b508      	push	{r3, lr}
   b49da:	4b02      	ldr	r3, [pc, #8]	; (b49e4 <hal_usart_read+0xc>)
   b49dc:	681b      	ldr	r3, [r3, #0]
   b49de:	695b      	ldr	r3, [r3, #20]
   b49e0:	9301      	str	r3, [sp, #4]
   b49e2:	bd08      	pop	{r3, pc}
   b49e4:	0003023c 	.word	0x0003023c

000b49e8 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b49e8:	b508      	push	{r3, lr}
   b49ea:	4b02      	ldr	r3, [pc, #8]	; (b49f4 <hal_usart_peek+0xc>)
   b49ec:	681b      	ldr	r3, [r3, #0]
   b49ee:	699b      	ldr	r3, [r3, #24]
   b49f0:	9301      	str	r3, [sp, #4]
   b49f2:	bd08      	pop	{r3, pc}
   b49f4:	0003023c 	.word	0x0003023c

000b49f8 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b49f8:	b508      	push	{r3, lr}
   b49fa:	4b02      	ldr	r3, [pc, #8]	; (b4a04 <hal_usart_flush+0xc>)
   b49fc:	681b      	ldr	r3, [r3, #0]
   b49fe:	69db      	ldr	r3, [r3, #28]
   b4a00:	9301      	str	r3, [sp, #4]
   b4a02:	bd08      	pop	{r3, pc}
   b4a04:	0003023c 	.word	0x0003023c

000b4a08 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b4a08:	b508      	push	{r3, lr}
   b4a0a:	4b02      	ldr	r3, [pc, #8]	; (b4a14 <hal_usart_is_enabled+0xc>)
   b4a0c:	681b      	ldr	r3, [r3, #0]
   b4a0e:	6a1b      	ldr	r3, [r3, #32]
   b4a10:	9301      	str	r3, [sp, #4]
   b4a12:	bd08      	pop	{r3, pc}
   b4a14:	0003023c 	.word	0x0003023c

000b4a18 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b4a18:	b508      	push	{r3, lr}
   b4a1a:	4b02      	ldr	r3, [pc, #8]	; (b4a24 <hal_usart_available_data_for_write+0xc>)
   b4a1c:	681b      	ldr	r3, [r3, #0]
   b4a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4a20:	9301      	str	r3, [sp, #4]
   b4a22:	bd08      	pop	{r3, pc}
   b4a24:	0003023c 	.word	0x0003023c

000b4a28 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b4a28:	b508      	push	{r3, lr}
   b4a2a:	4b02      	ldr	r3, [pc, #8]	; (b4a34 <hal_usart_init_ex+0xc>)
   b4a2c:	681b      	ldr	r3, [r3, #0]
   b4a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4a30:	9301      	str	r3, [sp, #4]
   b4a32:	bd08      	pop	{r3, pc}
   b4a34:	0003023c 	.word	0x0003023c

000b4a38 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b4a38:	b508      	push	{r3, lr}
   b4a3a:	4b02      	ldr	r3, [pc, #8]	; (b4a44 <hal_i2c_write+0xc>)
   b4a3c:	681b      	ldr	r3, [r3, #0]
   b4a3e:	6a1b      	ldr	r3, [r3, #32]
   b4a40:	9301      	str	r3, [sp, #4]
   b4a42:	bd08      	pop	{r3, pc}
   b4a44:	00030228 	.word	0x00030228

000b4a48 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b4a48:	b508      	push	{r3, lr}
   b4a4a:	4b02      	ldr	r3, [pc, #8]	; (b4a54 <hal_i2c_available+0xc>)
   b4a4c:	681b      	ldr	r3, [r3, #0]
   b4a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4a50:	9301      	str	r3, [sp, #4]
   b4a52:	bd08      	pop	{r3, pc}
   b4a54:	00030228 	.word	0x00030228

000b4a58 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b4a58:	b508      	push	{r3, lr}
   b4a5a:	4b02      	ldr	r3, [pc, #8]	; (b4a64 <hal_i2c_read+0xc>)
   b4a5c:	681b      	ldr	r3, [r3, #0]
   b4a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4a60:	9301      	str	r3, [sp, #4]
   b4a62:	bd08      	pop	{r3, pc}
   b4a64:	00030228 	.word	0x00030228

000b4a68 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b4a68:	b508      	push	{r3, lr}
   b4a6a:	4b02      	ldr	r3, [pc, #8]	; (b4a74 <hal_i2c_peek+0xc>)
   b4a6c:	681b      	ldr	r3, [r3, #0]
   b4a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4a70:	9301      	str	r3, [sp, #4]
   b4a72:	bd08      	pop	{r3, pc}
   b4a74:	00030228 	.word	0x00030228

000b4a78 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b4a78:	b508      	push	{r3, lr}
   b4a7a:	4b02      	ldr	r3, [pc, #8]	; (b4a84 <hal_i2c_flush+0xc>)
   b4a7c:	681b      	ldr	r3, [r3, #0]
   b4a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4a80:	9301      	str	r3, [sp, #4]
   b4a82:	bd08      	pop	{r3, pc}
   b4a84:	00030228 	.word	0x00030228

000b4a88 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b4a88:	b508      	push	{r3, lr}
   b4a8a:	4b02      	ldr	r3, [pc, #8]	; (b4a94 <hal_i2c_is_enabled+0xc>)
   b4a8c:	681b      	ldr	r3, [r3, #0]
   b4a8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4a90:	9301      	str	r3, [sp, #4]
   b4a92:	bd08      	pop	{r3, pc}
   b4a94:	00030228 	.word	0x00030228

000b4a98 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b4a98:	b508      	push	{r3, lr}
   b4a9a:	4b02      	ldr	r3, [pc, #8]	; (b4aa4 <hal_i2c_init+0xc>)
   b4a9c:	681b      	ldr	r3, [r3, #0]
   b4a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4aa0:	9301      	str	r3, [sp, #4]
   b4aa2:	bd08      	pop	{r3, pc}
   b4aa4:	00030228 	.word	0x00030228

000b4aa8 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b4aa8:	b508      	push	{r3, lr}
   b4aaa:	4b02      	ldr	r3, [pc, #8]	; (b4ab4 <hal_spi_init+0xc>)
   b4aac:	681b      	ldr	r3, [r3, #0]
   b4aae:	69db      	ldr	r3, [r3, #28]
   b4ab0:	9301      	str	r3, [sp, #4]
   b4ab2:	bd08      	pop	{r3, pc}
   b4ab4:	00030230 	.word	0x00030230

000b4ab8 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b4ab8:	b508      	push	{r3, lr}
   b4aba:	4b02      	ldr	r3, [pc, #8]	; (b4ac4 <hal_spi_is_enabled+0xc>)
   b4abc:	681b      	ldr	r3, [r3, #0]
   b4abe:	6a1b      	ldr	r3, [r3, #32]
   b4ac0:	9301      	str	r3, [sp, #4]
   b4ac2:	bd08      	pop	{r3, pc}
   b4ac4:	00030230 	.word	0x00030230

000b4ac8 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b4ac8:	b508      	push	{r3, lr}
   b4aca:	4b02      	ldr	r3, [pc, #8]	; (b4ad4 <HAL_USB_USART_Init+0xc>)
   b4acc:	681b      	ldr	r3, [r3, #0]
   b4ace:	681b      	ldr	r3, [r3, #0]
   b4ad0:	9301      	str	r3, [sp, #4]
   b4ad2:	bd08      	pop	{r3, pc}
   b4ad4:	0003024c 	.word	0x0003024c

000b4ad8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b4ad8:	b508      	push	{r3, lr}
   b4ada:	4b02      	ldr	r3, [pc, #8]	; (b4ae4 <HAL_USB_USART_Available_Data+0xc>)
   b4adc:	681b      	ldr	r3, [r3, #0]
   b4ade:	691b      	ldr	r3, [r3, #16]
   b4ae0:	9301      	str	r3, [sp, #4]
   b4ae2:	bd08      	pop	{r3, pc}
   b4ae4:	0003024c 	.word	0x0003024c

000b4ae8 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b4ae8:	b508      	push	{r3, lr}
   b4aea:	4b02      	ldr	r3, [pc, #8]	; (b4af4 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b4aec:	681b      	ldr	r3, [r3, #0]
   b4aee:	695b      	ldr	r3, [r3, #20]
   b4af0:	9301      	str	r3, [sp, #4]
   b4af2:	bd08      	pop	{r3, pc}
   b4af4:	0003024c 	.word	0x0003024c

000b4af8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4af8:	b508      	push	{r3, lr}
   b4afa:	4b02      	ldr	r3, [pc, #8]	; (b4b04 <HAL_USB_USART_Receive_Data+0xc>)
   b4afc:	681b      	ldr	r3, [r3, #0]
   b4afe:	699b      	ldr	r3, [r3, #24]
   b4b00:	9301      	str	r3, [sp, #4]
   b4b02:	bd08      	pop	{r3, pc}
   b4b04:	0003024c 	.word	0x0003024c

000b4b08 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4b08:	b508      	push	{r3, lr}
   b4b0a:	4b02      	ldr	r3, [pc, #8]	; (b4b14 <HAL_USB_USART_Send_Data+0xc>)
   b4b0c:	681b      	ldr	r3, [r3, #0]
   b4b0e:	69db      	ldr	r3, [r3, #28]
   b4b10:	9301      	str	r3, [sp, #4]
   b4b12:	bd08      	pop	{r3, pc}
   b4b14:	0003024c 	.word	0x0003024c

000b4b18 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b4b18:	b508      	push	{r3, lr}
   b4b1a:	4b02      	ldr	r3, [pc, #8]	; (b4b24 <HAL_USB_USART_Flush_Data+0xc>)
   b4b1c:	681b      	ldr	r3, [r3, #0]
   b4b1e:	6a1b      	ldr	r3, [r3, #32]
   b4b20:	9301      	str	r3, [sp, #4]
   b4b22:	bd08      	pop	{r3, pc}
   b4b24:	0003024c 	.word	0x0003024c

000b4b28 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b4b28:	b508      	push	{r3, lr}
   b4b2a:	4b02      	ldr	r3, [pc, #8]	; (b4b34 <set_system_mode+0xc>)
   b4b2c:	681b      	ldr	r3, [r3, #0]
   b4b2e:	685b      	ldr	r3, [r3, #4]
   b4b30:	9301      	str	r3, [sp, #4]
   b4b32:	bd08      	pop	{r3, pc}
   b4b34:	00030220 	.word	0x00030220

000b4b38 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b4b38:	b508      	push	{r3, lr}
   b4b3a:	4b02      	ldr	r3, [pc, #8]	; (b4b44 <system_delay_ms+0xc>)
   b4b3c:	681b      	ldr	r3, [r3, #0]
   b4b3e:	695b      	ldr	r3, [r3, #20]
   b4b40:	9301      	str	r3, [sp, #4]
   b4b42:	bd08      	pop	{r3, pc}
   b4b44:	00030220 	.word	0x00030220

000b4b48 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   b4b48:	b508      	push	{r3, lr}
   b4b4a:	4b02      	ldr	r3, [pc, #8]	; (b4b54 <application_thread_current+0xc>)
   b4b4c:	681b      	ldr	r3, [r3, #0]
   b4b4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b4b50:	9301      	str	r3, [sp, #4]
   b4b52:	bd08      	pop	{r3, pc}
   b4b54:	00030220 	.word	0x00030220

000b4b58 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   b4b58:	b508      	push	{r3, lr}
   b4b5a:	4b02      	ldr	r3, [pc, #8]	; (b4b64 <application_thread_invoke+0xc>)
   b4b5c:	681b      	ldr	r3, [r3, #0]
   b4b5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b4b60:	9301      	str	r3, [sp, #4]
   b4b62:	bd08      	pop	{r3, pc}
   b4b64:	00030220 	.word	0x00030220

000b4b68 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b4b68:	b508      	push	{r3, lr}
   b4b6a:	4b03      	ldr	r3, [pc, #12]	; (b4b78 <system_ctrl_set_app_request_handler+0x10>)
   b4b6c:	681b      	ldr	r3, [r3, #0]
   b4b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b4b72:	9301      	str	r3, [sp, #4]
   b4b74:	bd08      	pop	{r3, pc}
   b4b76:	0000      	.short	0x0000
   b4b78:	00030220 	.word	0x00030220

000b4b7c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b4b7c:	b508      	push	{r3, lr}
   b4b7e:	4b03      	ldr	r3, [pc, #12]	; (b4b8c <system_ctrl_set_result+0x10>)
   b4b80:	681b      	ldr	r3, [r3, #0]
   b4b82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b4b86:	9301      	str	r3, [sp, #4]
   b4b88:	bd08      	pop	{r3, pc}
   b4b8a:	0000      	.short	0x0000
   b4b8c:	00030220 	.word	0x00030220

000b4b90 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b4b90:	b508      	push	{r3, lr}
   b4b92:	4b02      	ldr	r3, [pc, #8]	; (b4b9c <network_connect+0xc>)
   b4b94:	681b      	ldr	r3, [r3, #0]
   b4b96:	685b      	ldr	r3, [r3, #4]
   b4b98:	9301      	str	r3, [sp, #4]
   b4b9a:	bd08      	pop	{r3, pc}
   b4b9c:	00030240 	.word	0x00030240

000b4ba0 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b4ba0:	b508      	push	{r3, lr}
   b4ba2:	4b02      	ldr	r3, [pc, #8]	; (b4bac <network_connecting+0xc>)
   b4ba4:	681b      	ldr	r3, [r3, #0]
   b4ba6:	689b      	ldr	r3, [r3, #8]
   b4ba8:	9301      	str	r3, [sp, #4]
   b4baa:	bd08      	pop	{r3, pc}
   b4bac:	00030240 	.word	0x00030240

000b4bb0 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b4bb0:	b508      	push	{r3, lr}
   b4bb2:	4b02      	ldr	r3, [pc, #8]	; (b4bbc <network_disconnect+0xc>)
   b4bb4:	681b      	ldr	r3, [r3, #0]
   b4bb6:	68db      	ldr	r3, [r3, #12]
   b4bb8:	9301      	str	r3, [sp, #4]
   b4bba:	bd08      	pop	{r3, pc}
   b4bbc:	00030240 	.word	0x00030240

000b4bc0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b4bc0:	b508      	push	{r3, lr}
   b4bc2:	4b02      	ldr	r3, [pc, #8]	; (b4bcc <network_ready+0xc>)
   b4bc4:	681b      	ldr	r3, [r3, #0]
   b4bc6:	691b      	ldr	r3, [r3, #16]
   b4bc8:	9301      	str	r3, [sp, #4]
   b4bca:	bd08      	pop	{r3, pc}
   b4bcc:	00030240 	.word	0x00030240

000b4bd0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b4bd0:	b508      	push	{r3, lr}
   b4bd2:	4b02      	ldr	r3, [pc, #8]	; (b4bdc <network_on+0xc>)
   b4bd4:	681b      	ldr	r3, [r3, #0]
   b4bd6:	695b      	ldr	r3, [r3, #20]
   b4bd8:	9301      	str	r3, [sp, #4]
   b4bda:	bd08      	pop	{r3, pc}
   b4bdc:	00030240 	.word	0x00030240

000b4be0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b4be0:	b508      	push	{r3, lr}
   b4be2:	4b02      	ldr	r3, [pc, #8]	; (b4bec <network_off+0xc>)
   b4be4:	681b      	ldr	r3, [r3, #0]
   b4be6:	699b      	ldr	r3, [r3, #24]
   b4be8:	9301      	str	r3, [sp, #4]
   b4bea:	bd08      	pop	{r3, pc}
   b4bec:	00030240 	.word	0x00030240

000b4bf0 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b4bf0:	b508      	push	{r3, lr}
   b4bf2:	4b02      	ldr	r3, [pc, #8]	; (b4bfc <network_listen+0xc>)
   b4bf4:	681b      	ldr	r3, [r3, #0]
   b4bf6:	69db      	ldr	r3, [r3, #28]
   b4bf8:	9301      	str	r3, [sp, #4]
   b4bfa:	bd08      	pop	{r3, pc}
   b4bfc:	00030240 	.word	0x00030240

000b4c00 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b4c00:	b508      	push	{r3, lr}
   b4c02:	4b02      	ldr	r3, [pc, #8]	; (b4c0c <network_listening+0xc>)
   b4c04:	681b      	ldr	r3, [r3, #0]
   b4c06:	6a1b      	ldr	r3, [r3, #32]
   b4c08:	9301      	str	r3, [sp, #4]
   b4c0a:	bd08      	pop	{r3, pc}
   b4c0c:	00030240 	.word	0x00030240

000b4c10 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b4c10:	b508      	push	{r3, lr}
   b4c12:	4b02      	ldr	r3, [pc, #8]	; (b4c1c <network_set_listen_timeout+0xc>)
   b4c14:	681b      	ldr	r3, [r3, #0]
   b4c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4c18:	9301      	str	r3, [sp, #4]
   b4c1a:	bd08      	pop	{r3, pc}
   b4c1c:	00030240 	.word	0x00030240

000b4c20 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b4c20:	b508      	push	{r3, lr}
   b4c22:	4b02      	ldr	r3, [pc, #8]	; (b4c2c <network_get_listen_timeout+0xc>)
   b4c24:	681b      	ldr	r3, [r3, #0]
   b4c26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4c28:	9301      	str	r3, [sp, #4]
   b4c2a:	bd08      	pop	{r3, pc}
   b4c2c:	00030240 	.word	0x00030240

000b4c30 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b4c30:	b508      	push	{r3, lr}
   b4c32:	4b02      	ldr	r3, [pc, #8]	; (b4c3c <network_is_on+0xc>)
   b4c34:	681b      	ldr	r3, [r3, #0]
   b4c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4c38:	9301      	str	r3, [sp, #4]
   b4c3a:	bd08      	pop	{r3, pc}
   b4c3c:	00030240 	.word	0x00030240

000b4c40 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b4c40:	b508      	push	{r3, lr}
   b4c42:	4b02      	ldr	r3, [pc, #8]	; (b4c4c <network_is_off+0xc>)
   b4c44:	681b      	ldr	r3, [r3, #0]
   b4c46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4c48:	9301      	str	r3, [sp, #4]
   b4c4a:	bd08      	pop	{r3, pc}
   b4c4c:	00030240 	.word	0x00030240

000b4c50 <spark_cloud_flag_connected>:
DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b4c50:	b508      	push	{r3, lr}
   b4c52:	4b02      	ldr	r3, [pc, #8]	; (b4c5c <spark_cloud_flag_connected+0xc>)
   b4c54:	681b      	ldr	r3, [r3, #0]
   b4c56:	695b      	ldr	r3, [r3, #20]
   b4c58:	9301      	str	r3, [sp, #4]
   b4c5a:	bd08      	pop	{r3, pc}
   b4c5c:	00030244 	.word	0x00030244

000b4c60 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   b4c60:	b508      	push	{r3, lr}
   b4c62:	4b02      	ldr	r3, [pc, #8]	; (b4c6c <spark_send_event+0xc>)
   b4c64:	681b      	ldr	r3, [r3, #0]
   b4c66:	6a1b      	ldr	r3, [r3, #32]
   b4c68:	9301      	str	r3, [sp, #4]
   b4c6a:	bd08      	pop	{r3, pc}
   b4c6c:	00030244 	.word	0x00030244

000b4c70 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b4c70:	b508      	push	{r3, lr}
   b4c72:	4b02      	ldr	r3, [pc, #8]	; (b4c7c <spark_set_random_seed_from_cloud_handler+0xc>)
   b4c74:	681b      	ldr	r3, [r3, #0]
   b4c76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b4c78:	9301      	str	r3, [sp, #4]
   b4c7a:	bd08      	pop	{r3, pc}
   b4c7c:	00030244 	.word	0x00030244

000b4c80 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b4c80:	b508      	push	{r3, lr}
   b4c82:	4b02      	ldr	r3, [pc, #8]	; (b4c8c <malloc+0xc>)
   b4c84:	681b      	ldr	r3, [r3, #0]
   b4c86:	681b      	ldr	r3, [r3, #0]
   b4c88:	9301      	str	r3, [sp, #4]
   b4c8a:	bd08      	pop	{r3, pc}
   b4c8c:	0003021c 	.word	0x0003021c

000b4c90 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b4c90:	b508      	push	{r3, lr}
   b4c92:	4b02      	ldr	r3, [pc, #8]	; (b4c9c <free+0xc>)
   b4c94:	681b      	ldr	r3, [r3, #0]
   b4c96:	685b      	ldr	r3, [r3, #4]
   b4c98:	9301      	str	r3, [sp, #4]
   b4c9a:	bd08      	pop	{r3, pc}
   b4c9c:	0003021c 	.word	0x0003021c

000b4ca0 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b4ca0:	b508      	push	{r3, lr}
   b4ca2:	4b02      	ldr	r3, [pc, #8]	; (b4cac <abort+0xc>)
   b4ca4:	681b      	ldr	r3, [r3, #0]
   b4ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4ca8:	9301      	str	r3, [sp, #4]
   b4caa:	bd08      	pop	{r3, pc}
   b4cac:	0003021c 	.word	0x0003021c

000b4cb0 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b4cb0:	b508      	push	{r3, lr}
   b4cb2:	4b02      	ldr	r3, [pc, #8]	; (b4cbc <_malloc_r+0xc>)
   b4cb4:	681b      	ldr	r3, [r3, #0]
   b4cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4cb8:	9301      	str	r3, [sp, #4]
   b4cba:	bd08      	pop	{r3, pc}
   b4cbc:	0003021c 	.word	0x0003021c

000b4cc0 <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b4cc0:	b508      	push	{r3, lr}
   b4cc2:	4b02      	ldr	r3, [pc, #8]	; (b4ccc <__assert_func+0xc>)
   b4cc4:	681b      	ldr	r3, [r3, #0]
   b4cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4cc8:	9301      	str	r3, [sp, #4]
   b4cca:	bd08      	pop	{r3, pc}
   b4ccc:	0003021c 	.word	0x0003021c

000b4cd0 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b4cd0:	b508      	push	{r3, lr}
   b4cd2:	4b02      	ldr	r3, [pc, #8]	; (b4cdc <newlib_impure_ptr_callback+0xc>)
   b4cd4:	681b      	ldr	r3, [r3, #0]
   b4cd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4cd8:	9301      	str	r3, [sp, #4]
   b4cda:	bd08      	pop	{r3, pc}
   b4cdc:	0003021c 	.word	0x0003021c

000b4ce0 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b4ce0:	2200      	movs	r2, #0
   b4ce2:	6840      	ldr	r0, [r0, #4]
   b4ce4:	4611      	mov	r1, r2
   b4ce6:	f7ff bf8b 	b.w	b4c00 <network_listening>

000b4cea <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b4cea:	2200      	movs	r2, #0
   b4cec:	6840      	ldr	r0, [r0, #4]
   b4cee:	4611      	mov	r1, r2
   b4cf0:	f7ff bf96 	b.w	b4c20 <network_get_listen_timeout>

000b4cf4 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b4cf4:	6840      	ldr	r0, [r0, #4]
   b4cf6:	2200      	movs	r2, #0
   b4cf8:	f7ff bf8a 	b.w	b4c10 <network_set_listen_timeout>

000b4cfc <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b4cfc:	6840      	ldr	r0, [r0, #4]
   b4cfe:	2200      	movs	r2, #0
   b4d00:	f081 0101 	eor.w	r1, r1, #1
   b4d04:	f7ff bf74 	b.w	b4bf0 <network_listen>

000b4d08 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b4d08:	2300      	movs	r3, #0
   b4d0a:	6840      	ldr	r0, [r0, #4]
   b4d0c:	461a      	mov	r2, r3
   b4d0e:	4619      	mov	r1, r3
   b4d10:	f7ff bf66 	b.w	b4be0 <network_off>

000b4d14 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b4d14:	2300      	movs	r3, #0
   b4d16:	6840      	ldr	r0, [r0, #4]
   b4d18:	461a      	mov	r2, r3
   b4d1a:	4619      	mov	r1, r3
   b4d1c:	f7ff bf58 	b.w	b4bd0 <network_on>

000b4d20 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b4d20:	2200      	movs	r2, #0
   b4d22:	6840      	ldr	r0, [r0, #4]
   b4d24:	4611      	mov	r1, r2
   b4d26:	f7ff bf4b 	b.w	b4bc0 <network_ready>

000b4d2a <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b4d2a:	2200      	movs	r2, #0
   b4d2c:	6840      	ldr	r0, [r0, #4]
   b4d2e:	4611      	mov	r1, r2
   b4d30:	f7ff bf36 	b.w	b4ba0 <network_connecting>

000b4d34 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b4d34:	6840      	ldr	r0, [r0, #4]
   b4d36:	2200      	movs	r2, #0
   b4d38:	2102      	movs	r1, #2
   b4d3a:	f7ff bf39 	b.w	b4bb0 <network_disconnect>

000b4d3e <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b4d3e:	2300      	movs	r3, #0
   b4d40:	6840      	ldr	r0, [r0, #4]
   b4d42:	461a      	mov	r2, r3
   b4d44:	f7ff bf24 	b.w	b4b90 <network_connect>

000b4d48 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b4d48:	4b02      	ldr	r3, [pc, #8]	; (b4d54 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b4d4a:	2203      	movs	r2, #3
   b4d4c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b4d4e:	4a02      	ldr	r2, [pc, #8]	; (b4d58 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b4d50:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b4d52:	4770      	bx	lr
   b4d54:	2003e688 	.word	0x2003e688
   b4d58:	000b5e7c 	.word	0x000b5e7c

000b4d5c <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b4d5c:	b510      	push	{r4, lr}
   b4d5e:	4604      	mov	r4, r0
   b4d60:	4608      	mov	r0, r1
{
    _spi = spi;
   b4d62:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b4d64:	f7ff fea0 	bl	b4aa8 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b4d68:	2300      	movs	r3, #0
   b4d6a:	6063      	str	r3, [r4, #4]
}
   b4d6c:	4620      	mov	r0, r4
   b4d6e:	bd10      	pop	{r4, pc}

000b4d70 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b4d70:	4b05      	ldr	r3, [pc, #20]	; (b4d88 <_GLOBAL__sub_I_System+0x18>)
   b4d72:	2202      	movs	r2, #2
   b4d74:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b4d76:	4b05      	ldr	r3, [pc, #20]	; (b4d8c <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b4d78:	4a05      	ldr	r2, [pc, #20]	; (b4d90 <_GLOBAL__sub_I_System+0x20>)
   b4d7a:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b4d7c:	2000      	movs	r0, #0
   b4d7e:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b4d82:	f7ff bed1 	b.w	b4b28 <set_system_mode>
   b4d86:	bf00      	nop
   b4d88:	2003e69c 	.word	0x2003e69c
   b4d8c:	2003e690 	.word	0x2003e690
   b4d90:	ffff0000 	.word	0xffff0000

000b4d94 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   b4d94:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   b4d96:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b4d98:	4604      	mov	r4, r0
      if (_M_manager)
   b4d9a:	b113      	cbz	r3, b4da2 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b4d9c:	2203      	movs	r2, #3
   b4d9e:	4601      	mov	r1, r0
   b4da0:	4798      	blx	r3
    }
   b4da2:	4620      	mov	r0, r4
   b4da4:	bd10      	pop	{r4, pc}

000b4da6 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   b4da6:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b4da8:	6843      	ldr	r3, [r0, #4]
   b4daa:	3b01      	subs	r3, #1
    {
   b4dac:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b4dae:	6043      	str	r3, [r0, #4]
   b4db0:	b963      	cbnz	r3, b4dcc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   b4db2:	6803      	ldr	r3, [r0, #0]
   b4db4:	689b      	ldr	r3, [r3, #8]
   b4db6:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b4db8:	68a3      	ldr	r3, [r4, #8]
   b4dba:	3b01      	subs	r3, #1
   b4dbc:	60a3      	str	r3, [r4, #8]
   b4dbe:	b92b      	cbnz	r3, b4dcc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b4dc0:	6823      	ldr	r3, [r4, #0]
   b4dc2:	4620      	mov	r0, r4
   b4dc4:	68db      	ldr	r3, [r3, #12]
    }
   b4dc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b4dca:	4718      	bx	r3
    }
   b4dcc:	bd10      	pop	{r4, pc}

000b4dce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   b4dce:	b510      	push	{r4, lr}
   b4dd0:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   b4dd2:	6800      	ldr	r0, [r0, #0]
   b4dd4:	b108      	cbz	r0, b4dda <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
   b4dd6:	f7ff ffe6 	bl	b4da6 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
   b4dda:	4620      	mov	r0, r4
   b4ddc:	bd10      	pop	{r4, pc}

000b4dde <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
   b4dde:	b513      	push	{r0, r1, r4, lr}
   b4de0:	460b      	mov	r3, r1
   b4de2:	4602      	mov	r2, r0
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4de4:	e9d0 0100 	ldrd	r0, r1, [r0]
   b4de8:	466c      	mov	r4, sp
   b4dea:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b4dee:	e893 0003 	ldmia.w	r3, {r0, r1}
   b4df2:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b4df6:	e894 0003 	ldmia.w	r4, {r0, r1}
   b4dfa:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b4dfe:	b002      	add	sp, #8
   b4e00:	bd10      	pop	{r4, pc}
	...

000b4e04 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b4e04:	4802      	ldr	r0, [pc, #8]	; (b4e10 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b4e06:	2300      	movs	r3, #0
   b4e08:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b4e0a:	f7ff bdc5 	b.w	b4998 <os_mutex_recursive_create>
   b4e0e:	bf00      	nop
   b4e10:	2003e6a0 	.word	0x2003e6a0

000b4e14 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b4e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4e16:	4606      	mov	r6, r0
   b4e18:	460d      	mov	r5, r1
  size_t n = 0;
   b4e1a:	188f      	adds	r7, r1, r2
   b4e1c:	2400      	movs	r4, #0
  while (size--) {
   b4e1e:	42bd      	cmp	r5, r7
   b4e20:	d00c      	beq.n	b4e3c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b4e22:	6833      	ldr	r3, [r6, #0]
   b4e24:	f815 1b01 	ldrb.w	r1, [r5], #1
   b4e28:	689b      	ldr	r3, [r3, #8]
   b4e2a:	4630      	mov	r0, r6
   b4e2c:	4798      	blx	r3
     if (chunk>=0)
   b4e2e:	1e03      	subs	r3, r0, #0
   b4e30:	db01      	blt.n	b4e36 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b4e32:	441c      	add	r4, r3
  while (size--) {
   b4e34:	e7f3      	b.n	b4e1e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b4e36:	2c00      	cmp	r4, #0
   b4e38:	bf08      	it	eq
   b4e3a:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b4e3c:	4620      	mov	r0, r4
   b4e3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4e40 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b4e40:	b513      	push	{r0, r1, r4, lr}
   b4e42:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b4e44:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b4e46:	b159      	cbz	r1, b4e60 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b4e48:	9101      	str	r1, [sp, #4]
   b4e4a:	f000 ff84 	bl	b5d56 <strlen>
   b4e4e:	6823      	ldr	r3, [r4, #0]
   b4e50:	9901      	ldr	r1, [sp, #4]
   b4e52:	68db      	ldr	r3, [r3, #12]
   b4e54:	4602      	mov	r2, r0
   b4e56:	4620      	mov	r0, r4
    }
   b4e58:	b002      	add	sp, #8
   b4e5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b4e5e:	4718      	bx	r3
    }
   b4e60:	b002      	add	sp, #8
   b4e62:	bd10      	pop	{r4, pc}

000b4e64 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b4e64:	6803      	ldr	r3, [r0, #0]
   b4e66:	689b      	ldr	r3, [r3, #8]
   b4e68:	4718      	bx	r3

000b4e6a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b4e6a:	b530      	push	{r4, r5, lr}
   b4e6c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b4e6e:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b4e70:	2a01      	cmp	r2, #1
  *str = '\0';
   b4e72:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b4e76:	bf98      	it	ls
   b4e78:	220a      	movls	r2, #10
   b4e7a:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b4e7c:	460d      	mov	r5, r1
   b4e7e:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b4e82:	fb01 5312 	mls	r3, r1, r2, r5
   b4e86:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b4e8a:	2b09      	cmp	r3, #9
   b4e8c:	bf94      	ite	ls
   b4e8e:	3330      	addls	r3, #48	; 0x30
   b4e90:	3337      	addhi	r3, #55	; 0x37
   b4e92:	b2db      	uxtb	r3, r3
  } while(n);
   b4e94:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b4e96:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b4e9a:	d9ef      	bls.n	b4e7c <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b4e9c:	4621      	mov	r1, r4
   b4e9e:	f7ff ffcf 	bl	b4e40 <_ZN5Print5writeEPKc>
}
   b4ea2:	b00b      	add	sp, #44	; 0x2c
   b4ea4:	bd30      	pop	{r4, r5, pc}

000b4ea6 <_ZN5spark9WiFiClass2onEv>:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   b4ea6:	2300      	movs	r3, #0
   b4ea8:	6840      	ldr	r0, [r0, #4]
   b4eaa:	461a      	mov	r2, r3
   b4eac:	4619      	mov	r1, r3
   b4eae:	f7ff be8f 	b.w	b4bd0 <network_on>
	...

000b4eb4 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b4eb4:	4b01      	ldr	r3, [pc, #4]	; (b4ebc <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b4eb6:	4a02      	ldr	r2, [pc, #8]	; (b4ec0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b4eb8:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b4eba:	4770      	bx	lr
   b4ebc:	2003e6a4 	.word	0x2003e6a4
   b4ec0:	000b5eb0 	.word	0x000b5eb0

000b4ec4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b4ec4:	4b02      	ldr	r3, [pc, #8]	; (b4ed0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b4ec6:	681a      	ldr	r2, [r3, #0]
   b4ec8:	4b02      	ldr	r3, [pc, #8]	; (b4ed4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b4eca:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b4ecc:	4770      	bx	lr
   b4ece:	bf00      	nop
   b4ed0:	2003e5f4 	.word	0x2003e5f4
   b4ed4:	2003e6a8 	.word	0x2003e6a8

000b4ed8 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b4ed8:	2100      	movs	r1, #0
   b4eda:	f7ff be2d 	b.w	b4b38 <system_delay_ms>
	...

000b4ee0 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b4ee0:	4b01      	ldr	r3, [pc, #4]	; (b4ee8 <_GLOBAL__sub_I_RGB+0x8>)
   b4ee2:	2200      	movs	r2, #0
   b4ee4:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b4ee6:	4770      	bx	lr
   b4ee8:	2003e6ac 	.word	0x2003e6ac

000b4eec <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b4eec:	4b01      	ldr	r3, [pc, #4]	; (b4ef4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b4eee:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b4ef0:	4770      	bx	lr
   b4ef2:	bf00      	nop
   b4ef4:	2003e5f8 	.word	0x2003e5f8

000b4ef8 <serialEventRun>:
{
   b4ef8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b4efa:	4b0b      	ldr	r3, [pc, #44]	; (b4f28 <serialEventRun+0x30>)
   b4efc:	b143      	cbz	r3, b4f10 <serialEventRun+0x18>
   b4efe:	f000 fbfb 	bl	b56f8 <_Z16_fetch_usbserialv>
   b4f02:	6803      	ldr	r3, [r0, #0]
   b4f04:	691b      	ldr	r3, [r3, #16]
   b4f06:	4798      	blx	r3
   b4f08:	2800      	cmp	r0, #0
   b4f0a:	dd01      	ble.n	b4f10 <serialEventRun+0x18>
        serialEvent();
   b4f0c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b4f10:	4b06      	ldr	r3, [pc, #24]	; (b4f2c <serialEventRun+0x34>)
   b4f12:	b143      	cbz	r3, b4f26 <serialEventRun+0x2e>
   b4f14:	f000 fe4c 	bl	b5bb0 <_Z22__fetch_global_Serial1v>
   b4f18:	6803      	ldr	r3, [r0, #0]
   b4f1a:	691b      	ldr	r3, [r3, #16]
   b4f1c:	4798      	blx	r3
   b4f1e:	2800      	cmp	r0, #0
   b4f20:	dd01      	ble.n	b4f26 <serialEventRun+0x2e>
        serialEvent1();
   b4f22:	f3af 8000 	nop.w
}
   b4f26:	bd08      	pop	{r3, pc}
	...

000b4f30 <_post_loop>:
{
   b4f30:	b508      	push	{r3, lr}
	serialEventRun();
   b4f32:	f7ff ffe1 	bl	b4ef8 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b4f36:	f7ff fd27 	bl	b4988 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b4f3a:	4b01      	ldr	r3, [pc, #4]	; (b4f40 <_post_loop+0x10>)
   b4f3c:	6018      	str	r0, [r3, #0]
}
   b4f3e:	bd08      	pop	{r3, pc}
   b4f40:	2003e740 	.word	0x2003e740

000b4f44 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b4f44:	4805      	ldr	r0, [pc, #20]	; (b4f5c <_Z33system_initialize_user_backup_ramv+0x18>)
   b4f46:	4a06      	ldr	r2, [pc, #24]	; (b4f60 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b4f48:	4906      	ldr	r1, [pc, #24]	; (b4f64 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b4f4a:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b4f4c:	1a12      	subs	r2, r2, r0
   b4f4e:	f000 fea0 	bl	b5c92 <memcpy>
    __backup_sram_signature = signature;
   b4f52:	4b05      	ldr	r3, [pc, #20]	; (b4f68 <_Z33system_initialize_user_backup_ramv+0x24>)
   b4f54:	4a05      	ldr	r2, [pc, #20]	; (b4f6c <_Z33system_initialize_user_backup_ramv+0x28>)
   b4f56:	601a      	str	r2, [r3, #0]
}
   b4f58:	bd08      	pop	{r3, pc}
   b4f5a:	bf00      	nop
   b4f5c:	2003f400 	.word	0x2003f400
   b4f60:	2003f404 	.word	0x2003f404
   b4f64:	000b6100 	.word	0x000b6100
   b4f68:	2003f400 	.word	0x2003f400
   b4f6c:	9a271c1e 	.word	0x9a271c1e

000b4f70 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b4f70:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b4f72:	2300      	movs	r3, #0
   b4f74:	9300      	str	r3, [sp, #0]
   b4f76:	461a      	mov	r2, r3
   b4f78:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b4f7c:	f7ff fdfe 	bl	b4b7c <system_ctrl_set_result>
}
   b4f80:	b003      	add	sp, #12
   b4f82:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b4f88 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b4f88:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b4f8a:	8843      	ldrh	r3, [r0, #2]
   b4f8c:	2b0a      	cmp	r3, #10
   b4f8e:	d008      	beq.n	b4fa2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b4f90:	2b50      	cmp	r3, #80	; 0x50
   b4f92:	d10b      	bne.n	b4fac <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b4f94:	4b09      	ldr	r3, [pc, #36]	; (b4fbc <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b4f96:	681b      	ldr	r3, [r3, #0]
   b4f98:	b14b      	cbz	r3, b4fae <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b4f9a:	b003      	add	sp, #12
   b4f9c:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b4fa0:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b4fa2:	f7ff ffe5 	bl	b4f70 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b4fa6:	b003      	add	sp, #12
   b4fa8:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b4fac:	2300      	movs	r3, #0
   b4fae:	9300      	str	r3, [sp, #0]
   b4fb0:	461a      	mov	r2, r3
   b4fb2:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b4fb6:	f7ff fde1 	bl	b4b7c <system_ctrl_set_result>
}
   b4fba:	e7f4      	b.n	b4fa6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b4fbc:	2003e6c0 	.word	0x2003e6c0

000b4fc0 <module_user_init_hook>:
{
   b4fc0:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b4fc2:	4812      	ldr	r0, [pc, #72]	; (b500c <module_user_init_hook+0x4c>)
   b4fc4:	2100      	movs	r1, #0
   b4fc6:	f7ff fe83 	bl	b4cd0 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b4fca:	4b11      	ldr	r3, [pc, #68]	; (b5010 <module_user_init_hook+0x50>)
   b4fcc:	681a      	ldr	r2, [r3, #0]
   b4fce:	4b11      	ldr	r3, [pc, #68]	; (b5014 <module_user_init_hook+0x54>)
   b4fd0:	429a      	cmp	r2, r3
   b4fd2:	4b11      	ldr	r3, [pc, #68]	; (b5018 <module_user_init_hook+0x58>)
   b4fd4:	bf0c      	ite	eq
   b4fd6:	2201      	moveq	r2, #1
   b4fd8:	2200      	movne	r2, #0
   b4fda:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b4fdc:	d001      	beq.n	b4fe2 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b4fde:	f7ff ffb1 	bl	b4f44 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b4fe2:	f7ff fcb9 	bl	b4958 <HAL_RNG_GetRandomNumber>
   b4fe6:	4604      	mov	r4, r0
    srand(seed);
   b4fe8:	f000 fe6a 	bl	b5cc0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b4fec:	4b0b      	ldr	r3, [pc, #44]	; (b501c <module_user_init_hook+0x5c>)
   b4fee:	b113      	cbz	r3, b4ff6 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b4ff0:	4620      	mov	r0, r4
   b4ff2:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b4ff6:	2100      	movs	r1, #0
   b4ff8:	4808      	ldr	r0, [pc, #32]	; (b501c <module_user_init_hook+0x5c>)
   b4ffa:	f7ff fe39 	bl	b4c70 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b4ffe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b5002:	4807      	ldr	r0, [pc, #28]	; (b5020 <module_user_init_hook+0x60>)
   b5004:	2100      	movs	r1, #0
   b5006:	f7ff bdaf 	b.w	b4b68 <system_ctrl_set_app_request_handler>
   b500a:	bf00      	nop
   b500c:	000b4eed 	.word	0x000b4eed
   b5010:	2003f400 	.word	0x2003f400
   b5014:	9a271c1e 	.word	0x9a271c1e
   b5018:	2003e6bc 	.word	0x2003e6bc
   b501c:	00000000 	.word	0x00000000
   b5020:	000b4f89 	.word	0x000b4f89

000b5024 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b5024:	4770      	bx	lr

000b5026 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   b5026:	2000      	movs	r0, #0
   b5028:	4770      	bx	lr

000b502a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b502a:	b510      	push	{r4, lr}
   b502c:	2110      	movs	r1, #16
   b502e:	4604      	mov	r4, r0
   b5030:	f7ff f833 	bl	b409a <_ZdlPvj>
   b5034:	4620      	mov	r0, r4
   b5036:	bd10      	pop	{r4, pc}

000b5038 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   b5038:	b508      	push	{r3, lr}
      { delete this; }
   b503a:	f7ff fff6 	bl	b502a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   b503e:	bd08      	pop	{r3, pc}

000b5040 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   b5040:	b530      	push	{r4, r5, lr}
        type_(type) {
   b5042:	2200      	movs	r2, #0
   b5044:	f64f 749c 	movw	r4, #65436	; 0xff9c
   b5048:	6002      	str	r2, [r0, #0]
   b504a:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   b504c:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   b504e:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b5050:	680c      	ldr	r4, [r1, #0]
   b5052:	8085      	strh	r5, [r0, #4]
   b5054:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b5056:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   b5058:	bd30      	pop	{r4, r5, pc}

000b505a <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   b505a:	b510      	push	{r4, lr}
   b505c:	4604      	mov	r4, r0
    free((void*)msg_);
   b505e:	6800      	ldr	r0, [r0, #0]
   b5060:	f7ff fe16 	bl	b4c90 <free>
}
   b5064:	4620      	mov	r0, r4
   b5066:	bd10      	pop	{r4, pc}

000b5068 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b5068:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   b506a:	68c4      	ldr	r4, [r0, #12]
   b506c:	b1f4      	cbz	r4, b50ac <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   b506e:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   b5070:	2b02      	cmp	r3, #2
   b5072:	d103      	bne.n	b507c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   b5074:	f104 000c 	add.w	r0, r4, #12
   b5078:	f7ff ffef 	bl	b505a <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   b507c:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   b507e:	b135      	cbz	r5, b508e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   b5080:	4628      	mov	r0, r5
   b5082:	f7ff fe87 	bl	b4d94 <_ZNSt14_Function_baseD1Ev>
   b5086:	2110      	movs	r1, #16
   b5088:	4628      	mov	r0, r5
   b508a:	f7ff f806 	bl	b409a <_ZdlPvj>
   b508e:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   b5090:	b135      	cbz	r5, b50a0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   b5092:	4628      	mov	r0, r5
   b5094:	f7ff fe7e 	bl	b4d94 <_ZNSt14_Function_baseD1Ev>
   b5098:	2110      	movs	r1, #16
   b509a:	4628      	mov	r0, r5
   b509c:	f7fe fffd 	bl	b409a <_ZdlPvj>
   b50a0:	4620      	mov	r0, r4
   b50a2:	2114      	movs	r1, #20
   b50a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b50a8:	f7fe bff7 	b.w	b409a <_ZdlPvj>
   b50ac:	bd38      	pop	{r3, r4, r5, pc}

000b50ae <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
	{
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
   b50ae:	680b      	ldr	r3, [r1, #0]
   b50b0:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b50b2:	684b      	ldr	r3, [r1, #4]
   b50b4:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b50b6:	b113      	cbz	r3, b50be <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   b50b8:	685a      	ldr	r2, [r3, #4]
   b50ba:	3201      	adds	r2, #1
   b50bc:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b50be:	4770      	bx	lr

000b50c0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   b50c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b50c2:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b50c4:	4668      	mov	r0, sp
   b50c6:	460d      	mov	r5, r1
   b50c8:	f7ff fff1 	bl	b50ae <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   b50cc:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b50ce:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b50d0:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   b50d2:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   b50d4:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b50d6:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   b50d8:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   b50da:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   b50dc:	f7ff fe77 	bl	b4dce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   b50e0:	b135      	cbz	r5, b50f0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   b50e2:	1d28      	adds	r0, r5, #4
   b50e4:	f7ff fe73 	bl	b4dce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b50e8:	2108      	movs	r1, #8
   b50ea:	4628      	mov	r0, r5
   b50ec:	f7fe ffd5 	bl	b409a <_ZdlPvj>
        return p;
    }
   b50f0:	4620      	mov	r0, r4
   b50f2:	b003      	add	sp, #12
   b50f4:	bd30      	pop	{r4, r5, pc}

000b50f6 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   b50f6:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b50f8:	b510      	push	{r4, lr}
      if (_M_empty())
   b50fa:	b90a      	cbnz	r2, b5100 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   b50fc:	f000 fdc0 	bl	b5c80 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
    }
   b5100:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b5104:	68c3      	ldr	r3, [r0, #12]
   b5106:	4718      	bx	r3

000b5108 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b5108:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b510a:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b510c:	f100 0110 	add.w	r1, r0, #16
   b5110:	f7ff fff1 	bl	b50f6 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   b5114:	bd08      	pop	{r3, pc}

000b5116 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   b5116:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b5118:	b510      	push	{r4, lr}
      if (_M_empty())
   b511a:	b90a      	cbnz	r2, b5120 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   b511c:	f000 fdb0 	bl	b5c80 <_ZSt25__throw_bad_function_callv>
    }
   b5120:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b5124:	68c3      	ldr	r3, [r0, #12]
   b5126:	4718      	bx	r3

000b5128 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b5128:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b512a:	6800      	ldr	r0, [r0, #0]
   b512c:	f100 0110 	add.w	r1, r0, #16
   b5130:	f7ff fff1 	bl	b5116 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   b5134:	bd08      	pop	{r3, pc}
	...

000b5138 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   b5138:	b538      	push	{r3, r4, r5, lr}
   b513a:	2300      	movs	r3, #0
   b513c:	4604      	mov	r4, r0
   b513e:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b5140:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   b5142:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b5144:	f7fe ffa5 	bl	b4092 <_Znwj>
   b5148:	b128      	cbz	r0, b5156 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   b514a:	2301      	movs	r3, #1
   b514c:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   b5150:	4b02      	ldr	r3, [pc, #8]	; (b515c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   b5152:	6003      	str	r3, [r0, #0]
   b5154:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b5156:	6020      	str	r0, [r4, #0]
	}
   b5158:	4620      	mov	r0, r4
   b515a:	bd38      	pop	{r3, r4, r5, pc}
   b515c:	000b5ed8 	.word	0x000b5ed8

000b5160 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   b5160:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b5162:	2300      	movs	r3, #0
   b5164:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b5166:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b5168:	4604      	mov	r4, r0
   b516a:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b516c:	b12b      	cbz	r3, b517a <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b516e:	2202      	movs	r2, #2
   b5170:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b5172:	68eb      	ldr	r3, [r5, #12]
   b5174:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b5176:	68ab      	ldr	r3, [r5, #8]
   b5178:	60a3      	str	r3, [r4, #8]
    }
   b517a:	4620      	mov	r0, r4
   b517c:	bd38      	pop	{r3, r4, r5, pc}
	...

000b5180 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   b5180:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5182:	b089      	sub	sp, #36	; 0x24
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b5184:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   b5186:	4668      	mov	r0, sp
   b5188:	f7ff ff5a 	bl	b5040 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b518c:	f04f 0302 	mov.w	r3, #2
   b5190:	e8d4 2f4f 	ldrexb	r2, [r4]
   b5194:	2a00      	cmp	r2, #0
   b5196:	d103      	bne.n	b51a0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   b5198:	e8c4 3f41 	strexb	r1, r3, [r4]
   b519c:	2900      	cmp	r1, #0
   b519e:	d1f7      	bne.n	b5190 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   b51a0:	d125      	bne.n	b51ee <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   b51a2:	f104 050c 	add.w	r5, r4, #12
   b51a6:	4669      	mov	r1, sp
   b51a8:	4628      	mov	r0, r5
   b51aa:	f7ff ff49 	bl	b5040 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   b51ae:	f3bf 8f5b 	dmb	ish
   b51b2:	2301      	movs	r3, #1
   b51b4:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b51b6:	2000      	movs	r0, #0
   b51b8:	f104 0308 	add.w	r3, r4, #8
   b51bc:	f3bf 8f5b 	dmb	ish
   b51c0:	e853 6f00 	ldrex	r6, [r3]
   b51c4:	e843 0200 	strex	r2, r0, [r3]
   b51c8:	2a00      	cmp	r2, #0
   b51ca:	d1f9      	bne.n	b51c0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   b51cc:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b51d0:	b16e      	cbz	r6, b51ee <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   b51d2:	f7ff fcb9 	bl	b4b48 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b51d6:	b178      	cbz	r0, b51f8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b51d8:	4629      	mov	r1, r5
   b51da:	4630      	mov	r0, r6
   b51dc:	f7ff ff8b 	bl	b50f6 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   b51e0:	4630      	mov	r0, r6
   b51e2:	f7ff fdd7 	bl	b4d94 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b51e6:	2110      	movs	r1, #16
   b51e8:	4630      	mov	r0, r6
   b51ea:	f7fe ff56 	bl	b409a <_ZdlPvj>
        p_->setError(std::move(error));
   b51ee:	4668      	mov	r0, sp
   b51f0:	f7ff ff33 	bl	b505a <_ZN8particle5ErrorD1Ev>
    }
   b51f4:	b009      	add	sp, #36	; 0x24
   b51f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b51f8:	4631      	mov	r1, r6
   b51fa:	a802      	add	r0, sp, #8
   b51fc:	f7ff ffb0 	bl	b5160 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b5200:	68e0      	ldr	r0, [r4, #12]
   b5202:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b5206:	b108      	cbz	r0, b520c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   b5208:	f000 fd88 	bl	b5d1c <strdup>
        type_(type) {
   b520c:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b520e:	2010      	movs	r0, #16
   b5210:	f8ad 501c 	strh.w	r5, [sp, #28]
   b5214:	f7fe ff3d 	bl	b4092 <_Znwj>
   b5218:	4605      	mov	r5, r0
   b521a:	b1e8      	cbz	r0, b5258 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   b521c:	2700      	movs	r7, #0
   b521e:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5220:	2018      	movs	r0, #24
   b5222:	f7fe ff36 	bl	b4092 <_Znwj>
   b5226:	4604      	mov	r4, r0
   b5228:	b188      	cbz	r0, b524e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   b522a:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   b522c:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b522e:	a802      	add	r0, sp, #8
   b5230:	f7ff fdd5 	bl	b4dde <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5234:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   b5236:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b5238:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b523a:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b523c:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b523e:	a906      	add	r1, sp, #24
   b5240:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b5242:	60e3      	str	r3, [r4, #12]
   b5244:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   b5248:	9205      	str	r2, [sp, #20]
   b524a:	f7ff fef9 	bl	b5040 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   b524e:	4b08      	ldr	r3, [pc, #32]	; (b5270 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   b5250:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b5252:	4b08      	ldr	r3, [pc, #32]	; (b5274 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5254:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b5256:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   b5258:	a806      	add	r0, sp, #24
   b525a:	f7ff fefe 	bl	b505a <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b525e:	a802      	add	r0, sp, #8
   b5260:	f7ff fd98 	bl	b4d94 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b5264:	2200      	movs	r2, #0
   b5266:	4629      	mov	r1, r5
   b5268:	4803      	ldr	r0, [pc, #12]	; (b5278 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   b526a:	f7ff fc75 	bl	b4b58 <application_thread_invoke>
   b526e:	e7b7      	b.n	b51e0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   b5270:	000b5109 	.word	0x000b5109
   b5274:	000b538d 	.word	0x000b538d
   b5278:	000b5881 	.word	0x000b5881

000b527c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   b527c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5280:	b08b      	sub	sp, #44	; 0x2c
   b5282:	4605      	mov	r5, r0
   b5284:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b5288:	460f      	mov	r7, r1
   b528a:	4690      	mov	r8, r2
   b528c:	4699      	mov	r9, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b528e:	f7ff fcdf 	bl	b4c50 <spark_cloud_flag_connected>
   b5292:	ae07      	add	r6, sp, #28
    if (!connected()) {
   b5294:	4683      	mov	fp, r0
   b5296:	bb38      	cbnz	r0, b52e8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   b5298:	f64f 732e 	movw	r3, #65326	; 0xff2e
   b529c:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b529e:	a905      	add	r1, sp, #20
   b52a0:	4630      	mov	r0, r6
   b52a2:	f8ad 3018 	strh.w	r3, [sp, #24]
   b52a6:	f7ff fecb 	bl	b5040 <_ZN8particle5ErrorC1EOS0_>
   b52aa:	2014      	movs	r0, #20
   b52ac:	f7fe fef1 	bl	b4092 <_Znwj>
   b52b0:	4604      	mov	r4, r0
   b52b2:	b148      	cbz	r0, b52c8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   b52b4:	2302      	movs	r3, #2
   b52b6:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b52b8:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b52ba:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b52be:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   b52c0:	4631      	mov	r1, r6
   b52c2:	300c      	adds	r0, #12
   b52c4:	f7ff febc 	bl	b5040 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b52c8:	4628      	mov	r0, r5
	: __shared_count(__p)
   b52ca:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b52cc:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   b52d0:	f7ff ff32 	bl	b5138 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b52d4:	4630      	mov	r0, r6
   b52d6:	f7ff fec0 	bl	b505a <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   b52da:	a805      	add	r0, sp, #20
   b52dc:	f7ff febd 	bl	b505a <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   b52e0:	4628      	mov	r0, r5
   b52e2:	b00b      	add	sp, #44	; 0x2c
   b52e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   b52e8:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   b52ea:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   b52ec:	2014      	movs	r0, #20
   b52ee:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   b52f2:	9307      	str	r3, [sp, #28]
   b52f4:	f7fe fecd 	bl	b4092 <_Znwj>
   b52f8:	4601      	mov	r1, r0
   b52fa:	b118      	cbz	r0, b5304 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b52fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
   b5300:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b5302:	7044      	strb	r4, [r0, #1]
   b5304:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b5306:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   b5308:	f7ff ff16 	bl	b5138 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   b530c:	4b1e      	ldr	r3, [pc, #120]	; (b5388 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   b530e:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   b5310:	2008      	movs	r0, #8
   b5312:	f7fe febe 	bl	b4092 <_Znwj>
   b5316:	4604      	mov	r4, r0
   b5318:	b110      	cbz	r0, b5320 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   b531a:	a903      	add	r1, sp, #12
   b531c:	f7ff fec7 	bl	b50ae <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b5320:	9600      	str	r6, [sp, #0]
   b5322:	fa5f f38a 	uxtb.w	r3, sl
   b5326:	464a      	mov	r2, r9
   b5328:	4641      	mov	r1, r8
   b532a:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   b532c:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b532e:	f7ff fc97 	bl	b4c60 <spark_send_event>
   b5332:	b9b8      	cbnz	r0, b5364 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   b5334:	9b03      	ldr	r3, [sp, #12]
   b5336:	785b      	ldrb	r3, [r3, #1]
   b5338:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   b533c:	b993      	cbnz	r3, b5364 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   b533e:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   b5342:	a905      	add	r1, sp, #20
   b5344:	a803      	add	r0, sp, #12
   b5346:	9205      	str	r2, [sp, #20]
   b5348:	f8ad 3018 	strh.w	r3, [sp, #24]
   b534c:	f7ff ff18 	bl	b5180 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b5350:	a805      	add	r0, sp, #20
   b5352:	f7ff fe82 	bl	b505a <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   b5356:	a805      	add	r0, sp, #20
   b5358:	9909      	ldr	r1, [sp, #36]	; 0x24
   b535a:	f7ff feb1 	bl	b50c0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   b535e:	a806      	add	r0, sp, #24
   b5360:	f7ff fd35 	bl	b4dce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5364:	a903      	add	r1, sp, #12
   b5366:	a805      	add	r0, sp, #20
   b5368:	f7ff fea1 	bl	b50ae <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b536c:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b536e:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b5370:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   b5372:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   b5374:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b5376:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   b5378:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   b537a:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   b537c:	f7ff fd27 	bl	b4dce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5380:	a804      	add	r0, sp, #16
   b5382:	f7ff fd24 	bl	b4dce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   b5386:	e7ab      	b.n	b52e0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   b5388:	000b5409 	.word	0x000b5409

000b538c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   b538c:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b538e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5390:	4605      	mov	r5, r0
	switch (__op)
   b5392:	d103      	bne.n	b539c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b5394:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b5396:	6003      	str	r3, [r0, #0]
      }
   b5398:	2000      	movs	r0, #0
   b539a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   b539c:	2a02      	cmp	r2, #2
   b539e:	d010      	beq.n	b53c2 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   b53a0:	2a03      	cmp	r2, #3
   b53a2:	d1f9      	bne.n	b5398 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b53a4:	6804      	ldr	r4, [r0, #0]
   b53a6:	2c00      	cmp	r4, #0
   b53a8:	d0f6      	beq.n	b5398 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   b53aa:	f104 0010 	add.w	r0, r4, #16
   b53ae:	f7ff fe54 	bl	b505a <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b53b2:	4620      	mov	r0, r4
   b53b4:	f7ff fcee 	bl	b4d94 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b53b8:	2118      	movs	r1, #24
   b53ba:	4620      	mov	r0, r4
   b53bc:	f7fe fe6d 	bl	b409a <_ZdlPvj>
   b53c0:	e7ea      	b.n	b5398 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b53c2:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   b53c4:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b53c6:	f7fe fe64 	bl	b4092 <_Znwj>
   b53ca:	4604      	mov	r4, r0
   b53cc:	b150      	cbz	r0, b53e4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   b53ce:	4631      	mov	r1, r6
   b53d0:	f7ff fec6 	bl	b5160 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b53d4:	6930      	ldr	r0, [r6, #16]
   b53d6:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b53da:	b108      	cbz	r0, b53e0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   b53dc:	f000 fc9e 	bl	b5d1c <strdup>
        type_(type) {
   b53e0:	6120      	str	r0, [r4, #16]
   b53e2:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   b53e4:	602c      	str	r4, [r5, #0]
	}
   b53e6:	e7d7      	b.n	b5398 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000b53e8 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   b53e8:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b53ea:	2300      	movs	r3, #0
   b53ec:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b53ee:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b53f0:	4604      	mov	r4, r0
   b53f2:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b53f4:	b12b      	cbz	r3, b5402 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b53f6:	2202      	movs	r2, #2
   b53f8:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b53fa:	68eb      	ldr	r3, [r5, #12]
   b53fc:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b53fe:	68ab      	ldr	r3, [r5, #8]
   b5400:	60a3      	str	r3, [r4, #8]
    }
   b5402:	4620      	mov	r0, r4
   b5404:	bd38      	pop	{r3, r4, r5, pc}
	...

000b5408 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   b5408:	b5f0      	push	{r4, r5, r6, r7, lr}
   b540a:	b089      	sub	sp, #36	; 0x24
   b540c:	4604      	mov	r4, r0
   b540e:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   b5410:	a801      	add	r0, sp, #4
   b5412:	4611      	mov	r1, r2
   b5414:	f7ff fe54 	bl	b50c0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   b5418:	b1a4      	cbz	r4, b5444 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   b541a:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b541c:	b11d      	cbz	r5, b5426 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   b541e:	4628      	mov	r0, r5
   b5420:	f000 fc7c 	bl	b5d1c <strdup>
   b5424:	4605      	mov	r5, r0
   b5426:	a801      	add	r0, sp, #4
   b5428:	a903      	add	r1, sp, #12
        type_(type) {
   b542a:	9503      	str	r5, [sp, #12]
   b542c:	f8ad 4010 	strh.w	r4, [sp, #16]
   b5430:	f7ff fea6 	bl	b5180 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b5434:	a803      	add	r0, sp, #12
   b5436:	f7ff fe10 	bl	b505a <_ZN8particle5ErrorD1Ev>
   b543a:	a802      	add	r0, sp, #8
   b543c:	f7ff fcc7 	bl	b4dce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b5440:	b009      	add	sp, #36	; 0x24
   b5442:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   b5444:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b5446:	2301      	movs	r3, #1
   b5448:	e8d5 2f4f 	ldrexb	r2, [r5]
   b544c:	2a00      	cmp	r2, #0
   b544e:	d103      	bne.n	b5458 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   b5450:	e8c5 3f41 	strexb	r1, r3, [r5]
   b5454:	2900      	cmp	r1, #0
   b5456:	d1f7      	bne.n	b5448 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   b5458:	d1ef      	bne.n	b543a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   b545a:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   b545c:	f3bf 8f5b 	dmb	ish
   b5460:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b5462:	1d2b      	adds	r3, r5, #4
   b5464:	f3bf 8f5b 	dmb	ish
   b5468:	e853 6f00 	ldrex	r6, [r3]
   b546c:	e843 4200 	strex	r2, r4, [r3]
   b5470:	2a00      	cmp	r2, #0
   b5472:	d1f9      	bne.n	b5468 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   b5474:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b5478:	2e00      	cmp	r6, #0
   b547a:	d0de      	beq.n	b543a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   b547c:	4620      	mov	r0, r4
   b547e:	f7ff fb63 	bl	b4b48 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b5482:	4607      	mov	r7, r0
   b5484:	b160      	cbz	r0, b54a0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b5486:	f105 010c 	add.w	r1, r5, #12
   b548a:	4630      	mov	r0, r6
   b548c:	f7ff fe43 	bl	b5116 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   b5490:	4630      	mov	r0, r6
   b5492:	f7ff fc7f 	bl	b4d94 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b5496:	2110      	movs	r1, #16
   b5498:	4630      	mov	r0, r6
   b549a:	f7fe fdfe 	bl	b409a <_ZdlPvj>
   b549e:	e7cc      	b.n	b543a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b54a0:	4631      	mov	r1, r6
   b54a2:	a803      	add	r0, sp, #12
   b54a4:	f7ff ffa0 	bl	b53e8 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b54a8:	7b2b      	ldrb	r3, [r5, #12]
   b54aa:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b54ae:	2010      	movs	r0, #16
   b54b0:	f7fe fdef 	bl	b4092 <_Znwj>
   b54b4:	4605      	mov	r5, r0
   b54b6:	b1d0      	cbz	r0, b54ee <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   b54b8:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b54ba:	2014      	movs	r0, #20
   b54bc:	f7fe fde9 	bl	b4092 <_Znwj>
   b54c0:	4604      	mov	r4, r0
   b54c2:	b178      	cbz	r0, b54e4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   b54c4:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b54c6:	4601      	mov	r1, r0
   b54c8:	a803      	add	r0, sp, #12
   b54ca:	f7ff fc88 	bl	b4dde <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b54ce:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b54d0:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b54d2:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b54d4:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   b54d6:	9205      	str	r2, [sp, #20]
   b54d8:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b54da:	60e3      	str	r3, [r4, #12]
   b54dc:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   b54e0:	9206      	str	r2, [sp, #24]
   b54e2:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   b54e4:	4b06      	ldr	r3, [pc, #24]	; (b5500 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   b54e6:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b54e8:	4b06      	ldr	r3, [pc, #24]	; (b5504 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b54ea:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b54ec:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   b54ee:	a803      	add	r0, sp, #12
   b54f0:	f7ff fc50 	bl	b4d94 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b54f4:	2200      	movs	r2, #0
   b54f6:	4629      	mov	r1, r5
   b54f8:	4803      	ldr	r0, [pc, #12]	; (b5508 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   b54fa:	f7ff fb2d 	bl	b4b58 <application_thread_invoke>
   b54fe:	e7c7      	b.n	b5490 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   b5500:	000b5129 	.word	0x000b5129
   b5504:	000b550d 	.word	0x000b550d
   b5508:	000b5881 	.word	0x000b5881

000b550c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   b550c:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b550e:	b570      	push	{r4, r5, r6, lr}
   b5510:	4604      	mov	r4, r0
	switch (__op)
   b5512:	d103      	bne.n	b551c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b5514:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b5516:	6003      	str	r3, [r0, #0]
      }
   b5518:	2000      	movs	r0, #0
   b551a:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   b551c:	2a02      	cmp	r2, #2
   b551e:	d00c      	beq.n	b553a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   b5520:	2a03      	cmp	r2, #3
   b5522:	d1f9      	bne.n	b5518 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b5524:	6804      	ldr	r4, [r0, #0]
   b5526:	2c00      	cmp	r4, #0
   b5528:	d0f6      	beq.n	b5518 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b552a:	4620      	mov	r0, r4
   b552c:	f7ff fc32 	bl	b4d94 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b5530:	2114      	movs	r1, #20
   b5532:	4620      	mov	r0, r4
   b5534:	f7fe fdb1 	bl	b409a <_ZdlPvj>
   b5538:	e7ee      	b.n	b5518 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b553a:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   b553c:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b553e:	f7fe fda8 	bl	b4092 <_Znwj>
   b5542:	4605      	mov	r5, r0
   b5544:	b120      	cbz	r0, b5550 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   b5546:	4631      	mov	r1, r6
   b5548:	f7ff ff4e 	bl	b53e8 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   b554c:	7c33      	ldrb	r3, [r6, #16]
   b554e:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   b5550:	6025      	str	r5, [r4, #0]
	}
   b5552:	e7e1      	b.n	b5518 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000b5554 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b5554:	4770      	bx	lr

000b5556 <_ZN9IPAddressD0Ev>:
   b5556:	b510      	push	{r4, lr}
   b5558:	2118      	movs	r1, #24
   b555a:	4604      	mov	r4, r0
   b555c:	f7fe fd9d 	bl	b409a <_ZdlPvj>
   b5560:	4620      	mov	r0, r4
   b5562:	bd10      	pop	{r4, pc}

000b5564 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b5564:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b5566:	7d03      	ldrb	r3, [r0, #20]
   b5568:	2b06      	cmp	r3, #6
{
   b556a:	b08d      	sub	sp, #52	; 0x34
   b556c:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b556e:	f100 0704 	add.w	r7, r0, #4
   b5572:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b5576:	d012      	beq.n	b559e <_ZNK9IPAddress7printToER5Print+0x3a>
   b5578:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b557c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b5580:	220a      	movs	r2, #10
   b5582:	4630      	mov	r0, r6
   b5584:	f7ff fc71 	bl	b4e6a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b5588:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b558a:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b558c:	d019      	beq.n	b55c2 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b558e:	2c00      	cmp	r4, #0
   b5590:	d0f4      	beq.n	b557c <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b5592:	212e      	movs	r1, #46	; 0x2e
   b5594:	4630      	mov	r0, r6
   b5596:	f7ff fc65 	bl	b4e64 <_ZN5Print5printEc>
   b559a:	4404      	add	r4, r0
   b559c:	e7ee      	b.n	b557c <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b559e:	232f      	movs	r3, #47	; 0x2f
   b55a0:	466a      	mov	r2, sp
   b55a2:	4639      	mov	r1, r7
   b55a4:	200a      	movs	r0, #10
		buf[0] = 0;
   b55a6:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b55aa:	f7ff f9fd 	bl	b49a8 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b55ae:	4668      	mov	r0, sp
   b55b0:	f000 fbd1 	bl	b5d56 <strlen>
   b55b4:	6833      	ldr	r3, [r6, #0]
   b55b6:	4602      	mov	r2, r0
   b55b8:	68db      	ldr	r3, [r3, #12]
   b55ba:	4669      	mov	r1, sp
   b55bc:	4630      	mov	r0, r6
   b55be:	4798      	blx	r3
   b55c0:	4604      	mov	r4, r0
    }
    return n;
}
   b55c2:	4620      	mov	r0, r4
   b55c4:	b00d      	add	sp, #52	; 0x34
   b55c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b55c8 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b55c8:	b510      	push	{r4, lr}
   b55ca:	4b05      	ldr	r3, [pc, #20]	; (b55e0 <_ZN9IPAddressC1Ev+0x18>)
   b55cc:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b55ce:	2211      	movs	r2, #17
   b55d0:	f840 3b04 	str.w	r3, [r0], #4
   b55d4:	2100      	movs	r1, #0
   b55d6:	f000 fb6a 	bl	b5cae <memset>
}
   b55da:	4620      	mov	r0, r4
   b55dc:	bd10      	pop	{r4, pc}
   b55de:	bf00      	nop
   b55e0:	000b5ef4 	.word	0x000b5ef4

000b55e4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b55e4:	4603      	mov	r3, r0
   b55e6:	4a07      	ldr	r2, [pc, #28]	; (b5604 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b55e8:	b510      	push	{r4, lr}
   b55ea:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b55ee:	f101 0210 	add.w	r2, r1, #16
   b55f2:	f851 4b04 	ldr.w	r4, [r1], #4
   b55f6:	f843 4b04 	str.w	r4, [r3], #4
   b55fa:	4291      	cmp	r1, r2
   b55fc:	d1f9      	bne.n	b55f2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b55fe:	780a      	ldrb	r2, [r1, #0]
   b5600:	701a      	strb	r2, [r3, #0]
}
   b5602:	bd10      	pop	{r4, pc}
   b5604:	000b5ef4 	.word	0x000b5ef4

000b5608 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b5608:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b560a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b560e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b5612:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b5616:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b561a:	2304      	movs	r3, #4
   b561c:	6041      	str	r1, [r0, #4]
   b561e:	7503      	strb	r3, [r0, #20]
}
   b5620:	bd10      	pop	{r4, pc}
	...

000b5624 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b5624:	b507      	push	{r0, r1, r2, lr}
   b5626:	4b06      	ldr	r3, [pc, #24]	; (b5640 <_ZN9IPAddressC1EPKh+0x1c>)
   b5628:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b562a:	78cb      	ldrb	r3, [r1, #3]
   b562c:	9300      	str	r3, [sp, #0]
   b562e:	788b      	ldrb	r3, [r1, #2]
   b5630:	784a      	ldrb	r2, [r1, #1]
   b5632:	7809      	ldrb	r1, [r1, #0]
   b5634:	f7ff ffe8 	bl	b5608 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b5638:	b003      	add	sp, #12
   b563a:	f85d fb04 	ldr.w	pc, [sp], #4
   b563e:	bf00      	nop
   b5640:	000b5ef4 	.word	0x000b5ef4

000b5644 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b5644:	7441      	strb	r1, [r0, #17]
}
   b5646:	4770      	bx	lr

000b5648 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5648:	4770      	bx	lr

000b564a <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b564a:	4770      	bx	lr

000b564c <_ZN9USBSerial4readEv>:
{
   b564c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b564e:	2100      	movs	r1, #0
   b5650:	7c00      	ldrb	r0, [r0, #16]
   b5652:	f7ff fa51 	bl	b4af8 <HAL_USB_USART_Receive_Data>
}
   b5656:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b565a:	bd08      	pop	{r3, pc}

000b565c <_ZN9USBSerial4peekEv>:
{
   b565c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b565e:	2101      	movs	r1, #1
   b5660:	7c00      	ldrb	r0, [r0, #16]
   b5662:	f7ff fa49 	bl	b4af8 <HAL_USB_USART_Receive_Data>
}
   b5666:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b566a:	bd08      	pop	{r3, pc}

000b566c <_ZN9USBSerial17availableForWriteEv>:
{
   b566c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b566e:	7c00      	ldrb	r0, [r0, #16]
   b5670:	f7ff fa3a 	bl	b4ae8 <HAL_USB_USART_Available_Data_For_Write>
}
   b5674:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5678:	bd08      	pop	{r3, pc}

000b567a <_ZN9USBSerial9availableEv>:
{
   b567a:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b567c:	7c00      	ldrb	r0, [r0, #16]
   b567e:	f7ff fa2b 	bl	b4ad8 <HAL_USB_USART_Available_Data>
}
   b5682:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5686:	bd08      	pop	{r3, pc}

000b5688 <_ZN9USBSerial5writeEh>:
{
   b5688:	b513      	push	{r0, r1, r4, lr}
   b568a:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b568c:	7c00      	ldrb	r0, [r0, #16]
{
   b568e:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b5690:	f7ff fa2a 	bl	b4ae8 <HAL_USB_USART_Available_Data_For_Write>
   b5694:	2800      	cmp	r0, #0
   b5696:	9901      	ldr	r1, [sp, #4]
   b5698:	dc01      	bgt.n	b569e <_ZN9USBSerial5writeEh+0x16>
   b569a:	7c60      	ldrb	r0, [r4, #17]
   b569c:	b120      	cbz	r0, b56a8 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b569e:	7c20      	ldrb	r0, [r4, #16]
   b56a0:	f7ff fa32 	bl	b4b08 <HAL_USB_USART_Send_Data>
   b56a4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b56a8:	b002      	add	sp, #8
   b56aa:	bd10      	pop	{r4, pc}

000b56ac <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b56ac:	7c00      	ldrb	r0, [r0, #16]
   b56ae:	f7ff ba33 	b.w	b4b18 <HAL_USB_USART_Flush_Data>

000b56b2 <_ZN9USBSerialD0Ev>:
   b56b2:	b510      	push	{r4, lr}
   b56b4:	2114      	movs	r1, #20
   b56b6:	4604      	mov	r4, r0
   b56b8:	f7fe fcef 	bl	b409a <_ZdlPvj>
   b56bc:	4620      	mov	r0, r4
   b56be:	bd10      	pop	{r4, pc}

000b56c0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b56c0:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b56c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b56c6:	4604      	mov	r4, r0
   b56c8:	4608      	mov	r0, r1
   b56ca:	2100      	movs	r1, #0
   b56cc:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b56d0:	4b04      	ldr	r3, [pc, #16]	; (b56e4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b56d2:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b56d4:	2301      	movs	r3, #1
  _serial = serial;
   b56d6:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b56d8:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b56da:	4611      	mov	r1, r2
   b56dc:	f7ff f9f4 	bl	b4ac8 <HAL_USB_USART_Init>
}
   b56e0:	4620      	mov	r0, r4
   b56e2:	bd10      	pop	{r4, pc}
   b56e4:	000b5f08 	.word	0x000b5f08

000b56e8 <_Z19acquireSerialBufferv>:
{
   b56e8:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b56ea:	2214      	movs	r2, #20
{
   b56ec:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b56ee:	2100      	movs	r1, #0
   b56f0:	f000 fadd 	bl	b5cae <memset>
}
   b56f4:	4620      	mov	r0, r4
   b56f6:	bd10      	pop	{r4, pc}

000b56f8 <_Z16_fetch_usbserialv>:
{
   b56f8:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b56fa:	4c0f      	ldr	r4, [pc, #60]	; (b5738 <_Z16_fetch_usbserialv+0x40>)
{
   b56fc:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b56fe:	a803      	add	r0, sp, #12
   b5700:	f7ff fff2 	bl	b56e8 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5704:	7821      	ldrb	r1, [r4, #0]
   b5706:	f3bf 8f5b 	dmb	ish
   b570a:	f011 0101 	ands.w	r1, r1, #1
   b570e:	d10f      	bne.n	b5730 <_Z16_fetch_usbserialv+0x38>
   b5710:	4620      	mov	r0, r4
   b5712:	9101      	str	r1, [sp, #4]
   b5714:	f7fe fcc3 	bl	b409e <__cxa_guard_acquire>
   b5718:	9901      	ldr	r1, [sp, #4]
   b571a:	b148      	cbz	r0, b5730 <_Z16_fetch_usbserialv+0x38>
   b571c:	aa03      	add	r2, sp, #12
   b571e:	4807      	ldr	r0, [pc, #28]	; (b573c <_Z16_fetch_usbserialv+0x44>)
   b5720:	f7ff ffce 	bl	b56c0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b5724:	4620      	mov	r0, r4
   b5726:	f7fe fcbf 	bl	b40a8 <__cxa_guard_release>
   b572a:	4805      	ldr	r0, [pc, #20]	; (b5740 <_Z16_fetch_usbserialv+0x48>)
   b572c:	f000 faab 	bl	b5c86 <atexit>
	return _usbserial;
}
   b5730:	4802      	ldr	r0, [pc, #8]	; (b573c <_Z16_fetch_usbserialv+0x44>)
   b5732:	b008      	add	sp, #32
   b5734:	bd10      	pop	{r4, pc}
   b5736:	bf00      	nop
   b5738:	2003e6c4 	.word	0x2003e6c4
   b573c:	2003e6c8 	.word	0x2003e6c8
   b5740:	000b5649 	.word	0x000b5649

000b5744 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   b5744:	2200      	movs	r2, #0
   b5746:	6840      	ldr	r0, [r0, #4]
   b5748:	4611      	mov	r1, r2
   b574a:	f7ff ba39 	b.w	b4bc0 <network_ready>

000b574e <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   b574e:	2200      	movs	r2, #0
   b5750:	6840      	ldr	r0, [r0, #4]
   b5752:	4611      	mov	r1, r2
   b5754:	f7ff ba54 	b.w	b4c00 <network_listening>

000b5758 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b5758:	2200      	movs	r2, #0
   b575a:	6840      	ldr	r0, [r0, #4]
   b575c:	4611      	mov	r1, r2
   b575e:	f7ff ba5f 	b.w	b4c20 <network_get_listen_timeout>

000b5762 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b5762:	6840      	ldr	r0, [r0, #4]
   b5764:	2200      	movs	r2, #0
   b5766:	f7ff ba53 	b.w	b4c10 <network_set_listen_timeout>

000b576a <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b576a:	6840      	ldr	r0, [r0, #4]
   b576c:	2200      	movs	r2, #0
   b576e:	f081 0101 	eor.w	r1, r1, #1
   b5772:	f7ff ba3d 	b.w	b4bf0 <network_listen>

000b5776 <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b5776:	2300      	movs	r3, #0
   b5778:	6840      	ldr	r0, [r0, #4]
   b577a:	461a      	mov	r2, r3
   b577c:	4619      	mov	r1, r3
   b577e:	f7ff ba2f 	b.w	b4be0 <network_off>

000b5782 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b5782:	2300      	movs	r3, #0
   b5784:	6840      	ldr	r0, [r0, #4]
   b5786:	461a      	mov	r2, r3
   b5788:	4619      	mov	r1, r3
   b578a:	f7ff ba21 	b.w	b4bd0 <network_on>

000b578e <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b578e:	2200      	movs	r2, #0
   b5790:	6840      	ldr	r0, [r0, #4]
   b5792:	4611      	mov	r1, r2
   b5794:	f7ff ba04 	b.w	b4ba0 <network_connecting>

000b5798 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b5798:	6840      	ldr	r0, [r0, #4]
   b579a:	2200      	movs	r2, #0
   b579c:	2102      	movs	r1, #2
   b579e:	f7ff ba07 	b.w	b4bb0 <network_disconnect>

000b57a2 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b57a2:	2300      	movs	r3, #0
   b57a4:	6840      	ldr	r0, [r0, #4]
   b57a6:	461a      	mov	r2, r3
   b57a8:	f7ff b9f2 	b.w	b4b90 <network_connect>

000b57ac <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   b57ac:	4b08      	ldr	r3, [pc, #32]	; (b57d0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   b57ae:	b510      	push	{r4, lr}
   b57b0:	2428      	movs	r4, #40	; 0x28
   b57b2:	4622      	mov	r2, r4
   b57b4:	4618      	mov	r0, r3
   b57b6:	2100      	movs	r1, #0
   b57b8:	f000 fa79 	bl	b5cae <memset>
   b57bc:	4b05      	ldr	r3, [pc, #20]	; (b57d4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   b57be:	8004      	strh	r4, [r0, #0]
        cid = -1;
   b57c0:	f04f 32ff 	mov.w	r2, #4294967295
   b57c4:	6042      	str	r2, [r0, #4]
   b57c6:	2204      	movs	r2, #4
   b57c8:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   b57ca:	4a03      	ldr	r2, [pc, #12]	; (b57d8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   b57cc:	601a      	str	r2, [r3, #0]
   b57ce:	bd10      	pop	{r4, pc}
   b57d0:	2003e6e4 	.word	0x2003e6e4
   b57d4:	2003e6dc 	.word	0x2003e6dc
   b57d8:	000b5f38 	.word	0x000b5f38

000b57dc <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b57dc:	4770      	bx	lr

000b57de <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b57de:	7441      	strb	r1, [r0, #17]
}
   b57e0:	4770      	bx	lr

000b57e2 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b57e2:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b57e4:	7c00      	ldrb	r0, [r0, #16]
   b57e6:	f7ff f917 	bl	b4a18 <hal_usart_available_data_for_write>
}
   b57ea:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b57ee:	bd08      	pop	{r3, pc}

000b57f0 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b57f0:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b57f2:	7c00      	ldrb	r0, [r0, #16]
   b57f4:	f7ff f8e8 	bl	b49c8 <hal_usart_available>
}
   b57f8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b57fc:	bd08      	pop	{r3, pc}

000b57fe <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b57fe:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b5800:	7c00      	ldrb	r0, [r0, #16]
   b5802:	f7ff f8f1 	bl	b49e8 <hal_usart_peek>
}
   b5806:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b580a:	bd08      	pop	{r3, pc}

000b580c <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b580c:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b580e:	7c00      	ldrb	r0, [r0, #16]
   b5810:	f7ff f8e2 	bl	b49d8 <hal_usart_read>
}
   b5814:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5818:	bd08      	pop	{r3, pc}

000b581a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b581a:	7c00      	ldrb	r0, [r0, #16]
   b581c:	f7ff b8ec 	b.w	b49f8 <hal_usart_flush>

000b5820 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b5820:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5822:	7c45      	ldrb	r5, [r0, #17]
{
   b5824:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5826:	b12d      	cbz	r5, b5834 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b5828:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b582a:	b003      	add	sp, #12
   b582c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b5830:	f7ff b8c2 	b.w	b49b8 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5834:	7c00      	ldrb	r0, [r0, #16]
   b5836:	9101      	str	r1, [sp, #4]
   b5838:	f7ff f8ee 	bl	b4a18 <hal_usart_available_data_for_write>
   b583c:	2800      	cmp	r0, #0
   b583e:	9901      	ldr	r1, [sp, #4]
   b5840:	dcf2      	bgt.n	b5828 <_ZN11USARTSerial5writeEh+0x8>
}
   b5842:	4628      	mov	r0, r5
   b5844:	b003      	add	sp, #12
   b5846:	bd30      	pop	{r4, r5, pc}

000b5848 <_ZN11USARTSerialD0Ev>:
   b5848:	b510      	push	{r4, lr}
   b584a:	2114      	movs	r1, #20
   b584c:	4604      	mov	r4, r0
   b584e:	f7fe fc24 	bl	b409a <_ZdlPvj>
   b5852:	4620      	mov	r0, r4
   b5854:	bd10      	pop	{r4, pc}
	...

000b5858 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b5858:	b510      	push	{r4, lr}
   b585a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b585e:	4604      	mov	r4, r0
   b5860:	4608      	mov	r0, r1
   b5862:	4611      	mov	r1, r2
   b5864:	2200      	movs	r2, #0
   b5866:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b586a:	4b04      	ldr	r3, [pc, #16]	; (b587c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b586c:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b586e:	2301      	movs	r3, #1
  _serial = serial;
   b5870:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b5872:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b5874:	f7ff f8d8 	bl	b4a28 <hal_usart_init_ex>
}
   b5878:	4620      	mov	r0, r4
   b587a:	bd10      	pop	{r4, pc}
   b587c:	000b5f74 	.word	0x000b5f74

000b5880 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   b5880:	b510      	push	{r4, lr}
      if (_M_empty())
   b5882:	6883      	ldr	r3, [r0, #8]
   b5884:	4604      	mov	r4, r0
   b5886:	b90b      	cbnz	r3, b588c <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   b5888:	f000 f9fa 	bl	b5c80 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b588c:	68c3      	ldr	r3, [r0, #12]
   b588e:	4798      	blx	r3
      if (_M_manager)
   b5890:	68a3      	ldr	r3, [r4, #8]
   b5892:	b11b      	cbz	r3, b589c <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b5894:	2203      	movs	r2, #3
   b5896:	4621      	mov	r1, r4
   b5898:	4620      	mov	r0, r4
   b589a:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   b589c:	4620      	mov	r0, r4
   b589e:	2110      	movs	r1, #16
}
   b58a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   b58a4:	f7fe bbf9 	b.w	b409a <_ZdlPvj>

000b58a8 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b58a8:	4770      	bx	lr

000b58aa <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b58aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b58ac:	4606      	mov	r6, r0
   b58ae:	4615      	mov	r5, r2
   b58b0:	460c      	mov	r4, r1
   b58b2:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b58b4:	42bc      	cmp	r4, r7
   b58b6:	d006      	beq.n	b58c6 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b58b8:	6833      	ldr	r3, [r6, #0]
   b58ba:	f814 1b01 	ldrb.w	r1, [r4], #1
   b58be:	689b      	ldr	r3, [r3, #8]
   b58c0:	4630      	mov	r0, r6
   b58c2:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b58c4:	e7f6      	b.n	b58b4 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b58c6:	4628      	mov	r0, r5
   b58c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b58ca <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b58ca:	7c00      	ldrb	r0, [r0, #16]
   b58cc:	2200      	movs	r2, #0
   b58ce:	f7ff b8b3 	b.w	b4a38 <hal_i2c_write>

000b58d2 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b58d2:	7c00      	ldrb	r0, [r0, #16]
   b58d4:	2100      	movs	r1, #0
   b58d6:	f7ff b8b7 	b.w	b4a48 <hal_i2c_available>

000b58da <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b58da:	7c00      	ldrb	r0, [r0, #16]
   b58dc:	2100      	movs	r1, #0
   b58de:	f7ff b8bb 	b.w	b4a58 <hal_i2c_read>

000b58e2 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b58e2:	7c00      	ldrb	r0, [r0, #16]
   b58e4:	2100      	movs	r1, #0
   b58e6:	f7ff b8bf 	b.w	b4a68 <hal_i2c_peek>

000b58ea <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b58ea:	7c00      	ldrb	r0, [r0, #16]
   b58ec:	2100      	movs	r1, #0
   b58ee:	f7ff b8c3 	b.w	b4a78 <hal_i2c_flush>

000b58f2 <_ZN7TwoWireD0Ev>:
   b58f2:	b510      	push	{r4, lr}
   b58f4:	2114      	movs	r1, #20
   b58f6:	4604      	mov	r4, r0
   b58f8:	f7fe fbcf 	bl	b409a <_ZdlPvj>
   b58fc:	4620      	mov	r0, r4
   b58fe:	bd10      	pop	{r4, pc}

000b5900 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b5900:	b510      	push	{r4, lr}
   b5902:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5906:	4604      	mov	r4, r0
   b5908:	4608      	mov	r0, r1
   b590a:	2100      	movs	r1, #0
   b590c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b5910:	4b03      	ldr	r3, [pc, #12]	; (b5920 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b5912:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b5914:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b5916:	4611      	mov	r1, r2
   b5918:	f7ff f8be 	bl	b4a98 <hal_i2c_init>
}
   b591c:	4620      	mov	r0, r4
   b591e:	bd10      	pop	{r4, pc}
   b5920:	000b5fa4 	.word	0x000b5fa4

000b5924 <_ZN5spark9WiFiClass3offEv>:
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   b5924:	2300      	movs	r3, #0
   b5926:	6840      	ldr	r0, [r0, #4]
   b5928:	461a      	mov	r2, r3
   b592a:	4619      	mov	r1, r3
   b592c:	f7ff b958 	b.w	b4be0 <network_off>

000b5930 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b5930:	4b02      	ldr	r3, [pc, #8]	; (b593c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b5932:	2205      	movs	r2, #5
   b5934:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b5936:	4a02      	ldr	r2, [pc, #8]	; (b5940 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b5938:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b593a:	4770      	bx	lr
   b593c:	2003e70c 	.word	0x2003e70c
   b5940:	000b5fcc 	.word	0x000b5fcc

000b5944 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b5944:	2300      	movs	r3, #0
   b5946:	6840      	ldr	r0, [r0, #4]
   b5948:	461a      	mov	r2, r3
   b594a:	f7ff b921 	b.w	b4b90 <network_connect>

000b594e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b594e:	6840      	ldr	r0, [r0, #4]
   b5950:	2200      	movs	r2, #0
   b5952:	2102      	movs	r1, #2
   b5954:	f7ff b92c 	b.w	b4bb0 <network_disconnect>

000b5958 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b5958:	2200      	movs	r2, #0
   b595a:	6840      	ldr	r0, [r0, #4]
   b595c:	4611      	mov	r1, r2
   b595e:	f7ff b91f 	b.w	b4ba0 <network_connecting>

000b5962 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b5962:	2200      	movs	r2, #0
   b5964:	6840      	ldr	r0, [r0, #4]
   b5966:	4611      	mov	r1, r2
   b5968:	f7ff b92a 	b.w	b4bc0 <network_ready>

000b596c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b596c:	2300      	movs	r3, #0
   b596e:	6840      	ldr	r0, [r0, #4]
   b5970:	461a      	mov	r2, r3
   b5972:	4619      	mov	r1, r3
   b5974:	f7ff b92c 	b.w	b4bd0 <network_on>

000b5978 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b5978:	2300      	movs	r3, #0
   b597a:	6840      	ldr	r0, [r0, #4]
   b597c:	461a      	mov	r2, r3
   b597e:	4619      	mov	r1, r3
   b5980:	f7ff b92e 	b.w	b4be0 <network_off>

000b5984 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b5984:	6840      	ldr	r0, [r0, #4]
   b5986:	2100      	movs	r1, #0
   b5988:	f7ff b952 	b.w	b4c30 <network_is_on>

000b598c <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b598c:	6840      	ldr	r0, [r0, #4]
   b598e:	2100      	movs	r1, #0
   b5990:	f7ff b956 	b.w	b4c40 <network_is_off>

000b5994 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b5994:	6840      	ldr	r0, [r0, #4]
   b5996:	2200      	movs	r2, #0
   b5998:	f081 0101 	eor.w	r1, r1, #1
   b599c:	f7ff b928 	b.w	b4bf0 <network_listen>

000b59a0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b59a0:	6840      	ldr	r0, [r0, #4]
   b59a2:	2200      	movs	r2, #0
   b59a4:	f7ff b934 	b.w	b4c10 <network_set_listen_timeout>

000b59a8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b59a8:	2200      	movs	r2, #0
   b59aa:	6840      	ldr	r0, [r0, #4]
   b59ac:	4611      	mov	r1, r2
   b59ae:	f7ff b937 	b.w	b4c20 <network_get_listen_timeout>

000b59b2 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b59b2:	2200      	movs	r2, #0
   b59b4:	6840      	ldr	r0, [r0, #4]
   b59b6:	4611      	mov	r1, r2
   b59b8:	f7ff b922 	b.w	b4c00 <network_listening>

000b59bc <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b59bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b59c0:	b095      	sub	sp, #84	; 0x54
   b59c2:	4614      	mov	r4, r2
   b59c4:	460d      	mov	r5, r1
   b59c6:	4607      	mov	r7, r0
    IPAddress addr;
   b59c8:	f7ff fdfe 	bl	b55c8 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b59cc:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b59ce:	221c      	movs	r2, #28
   b59d0:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b59d2:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b59d4:	f000 f96b 	bl	b5cae <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b59d8:	2340      	movs	r3, #64	; 0x40
   b59da:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b59dc:	4620      	mov	r0, r4
   b59de:	466b      	mov	r3, sp
   b59e0:	aa0c      	add	r2, sp, #48	; 0x30
   b59e2:	2100      	movs	r1, #0
   b59e4:	f7fe ff90 	bl	b4908 <netdb_getaddrinfo>
    if (!r) {
   b59e8:	4604      	mov	r4, r0
   b59ea:	2800      	cmp	r0, #0
   b59ec:	d14b      	bne.n	b5a86 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b59ee:	4602      	mov	r2, r0
   b59f0:	2101      	movs	r1, #1
   b59f2:	6868      	ldr	r0, [r5, #4]
   b59f4:	f7ff f8e4 	bl	b4bc0 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b59f8:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b59fa:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b59fc:	4622      	mov	r2, r4
   b59fe:	6868      	ldr	r0, [r5, #4]
   b5a00:	f7ff f8de 	bl	b4bc0 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5a04:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5a06:	4681      	mov	r9, r0
        bool ok = false;
   b5a08:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5a0a:	2e00      	cmp	r6, #0
   b5a0c:	d03b      	beq.n	b5a86 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b5a0e:	2900      	cmp	r1, #0
   b5a10:	d139      	bne.n	b5a86 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b5a12:	6873      	ldr	r3, [r6, #4]
   b5a14:	2b02      	cmp	r3, #2
   b5a16:	d003      	beq.n	b5a20 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b5a18:	2b0a      	cmp	r3, #10
   b5a1a:	d011      	beq.n	b5a40 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5a1c:	69f6      	ldr	r6, [r6, #28]
   b5a1e:	e7f4      	b.n	b5a0a <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b5a20:	f1b8 0f00 	cmp.w	r8, #0
   b5a24:	d0fa      	beq.n	b5a1c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b5a26:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b5a28:	a806      	add	r0, sp, #24
   b5a2a:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b5a2c:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b5a2e:	f7ff fdf9 	bl	b5624 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b5a32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5a34:	1d3c      	adds	r4, r7, #4
   b5a36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5a38:	682b      	ldr	r3, [r5, #0]
   b5a3a:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b5a3c:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b5a3e:	e7ed      	b.n	b5a1c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b5a40:	f1b9 0f00 	cmp.w	r9, #0
   b5a44:	d0ea      	beq.n	b5a1c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b5a46:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b5a48:	2210      	movs	r2, #16
   b5a4a:	a801      	add	r0, sp, #4
   b5a4c:	f000 f92f 	bl	b5cae <memset>
                    a.v = 6;
   b5a50:	2306      	movs	r3, #6
   b5a52:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b5a56:	ad01      	add	r5, sp, #4
   b5a58:	f104 0308 	add.w	r3, r4, #8
   b5a5c:	3418      	adds	r4, #24
   b5a5e:	6818      	ldr	r0, [r3, #0]
   b5a60:	6859      	ldr	r1, [r3, #4]
   b5a62:	462a      	mov	r2, r5
   b5a64:	c203      	stmia	r2!, {r0, r1}
   b5a66:	3308      	adds	r3, #8
   b5a68:	42a3      	cmp	r3, r4
   b5a6a:	4615      	mov	r5, r2
   b5a6c:	d1f7      	bne.n	b5a5e <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b5a6e:	a901      	add	r1, sp, #4
   b5a70:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b5a72:	ad07      	add	r5, sp, #28
   b5a74:	f7ff fdb6 	bl	b55e4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b5a78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5a7a:	1d3c      	adds	r4, r7, #4
   b5a7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5a7e:	682b      	ldr	r3, [r5, #0]
   b5a80:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b5a82:	4649      	mov	r1, r9
   b5a84:	e7ca      	b.n	b5a1c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b5a86:	9800      	ldr	r0, [sp, #0]
   b5a88:	f7fe ff36 	bl	b48f8 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b5a8c:	4638      	mov	r0, r7
   b5a8e:	b015      	add	sp, #84	; 0x54
   b5a90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b5a94 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b5a94:	4b02      	ldr	r3, [pc, #8]	; (b5aa0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b5a96:	4a03      	ldr	r2, [pc, #12]	; (b5aa4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b5a98:	601a      	str	r2, [r3, #0]
   b5a9a:	2200      	movs	r2, #0
   b5a9c:	605a      	str	r2, [r3, #4]

} // spark
   b5a9e:	4770      	bx	lr
   b5aa0:	2003e714 	.word	0x2003e714
   b5aa4:	000b6008 	.word	0x000b6008

000b5aa8 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b5aa8:	2837      	cmp	r0, #55	; 0x37
bool pinAvailable(uint16_t pin) {
   b5aaa:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b5aac:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
   b5aae:	d902      	bls.n	b5ab6 <pinAvailable+0xe>
    return false;
   b5ab0:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b5ab2:	b003      	add	sp, #12
   b5ab4:	bd30      	pop	{r4, r5, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b5ab6:	1f03      	subs	r3, r0, #4
   b5ab8:	2b02      	cmp	r3, #2
   b5aba:	d90b      	bls.n	b5ad4 <pinAvailable+0x2c>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b5abc:	2801      	cmp	r0, #1
   b5abe:	d822      	bhi.n	b5b06 <pinAvailable+0x5e>
   b5ac0:	f000 f8b8 	bl	b5c34 <_Z19__fetch_global_Wirev>
   b5ac4:	2100      	movs	r1, #0
   b5ac6:	7c00      	ldrb	r0, [r0, #16]
   b5ac8:	f7fe ffde 	bl	b4a88 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b5acc:	f080 0001 	eor.w	r0, r0, #1
   b5ad0:	b2c0      	uxtb	r0, r0
   b5ad2:	e7ee      	b.n	b5ab2 <pinAvailable+0xa>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b5ad4:	4d11      	ldr	r5, [pc, #68]	; (b5b1c <pinAvailable+0x74>)
   b5ad6:	7829      	ldrb	r1, [r5, #0]
   b5ad8:	f3bf 8f5b 	dmb	ish
   b5adc:	f011 0101 	ands.w	r1, r1, #1
   b5ae0:	d10b      	bne.n	b5afa <pinAvailable+0x52>
   b5ae2:	4628      	mov	r0, r5
   b5ae4:	9101      	str	r1, [sp, #4]
   b5ae6:	f7fe fada 	bl	b409e <__cxa_guard_acquire>
   b5aea:	9901      	ldr	r1, [sp, #4]
   b5aec:	b128      	cbz	r0, b5afa <pinAvailable+0x52>
   b5aee:	480c      	ldr	r0, [pc, #48]	; (b5b20 <pinAvailable+0x78>)
   b5af0:	f7ff f934 	bl	b4d5c <_ZN8SPIClassC1E19hal_spi_interface_t>
   b5af4:	4628      	mov	r0, r5
   b5af6:	f7fe fad7 	bl	b40a8 <__cxa_guard_release>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b5afa:	4b09      	ldr	r3, [pc, #36]	; (b5b20 <pinAvailable+0x78>)
   b5afc:	7818      	ldrb	r0, [r3, #0]
   b5afe:	f7fe ffdb 	bl	b4ab8 <hal_spi_is_enabled>
   b5b02:	2800      	cmp	r0, #0
   b5b04:	d1d4      	bne.n	b5ab0 <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b5b06:	3c08      	subs	r4, #8
   b5b08:	2c01      	cmp	r4, #1
   b5b0a:	d805      	bhi.n	b5b18 <pinAvailable+0x70>
   b5b0c:	f000 f850 	bl	b5bb0 <_Z22__fetch_global_Serial1v>
   b5b10:	7c00      	ldrb	r0, [r0, #16]
   b5b12:	f7fe ff79 	bl	b4a08 <hal_usart_is_enabled>
   b5b16:	e7d9      	b.n	b5acc <pinAvailable+0x24>
  return true; // 'pin' is available
   b5b18:	2001      	movs	r0, #1
   b5b1a:	e7ca      	b.n	b5ab2 <pinAvailable+0xa>
   b5b1c:	2003e71c 	.word	0x2003e71c
   b5b20:	2003e720 	.word	0x2003e720

000b5b24 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b5b24:	2837      	cmp	r0, #55	; 0x37
{
   b5b26:	b538      	push	{r3, r4, r5, lr}
   b5b28:	4604      	mov	r4, r0
   b5b2a:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b5b2c:	d80a      	bhi.n	b5b44 <pinMode+0x20>
   b5b2e:	29ff      	cmp	r1, #255	; 0xff
   b5b30:	d008      	beq.n	b5b44 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b5b32:	f7ff ffb9 	bl	b5aa8 <pinAvailable>
   b5b36:	b128      	cbz	r0, b5b44 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b5b38:	4629      	mov	r1, r5
   b5b3a:	4620      	mov	r0, r4
}
   b5b3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b5b40:	f7fe bef2 	b.w	b4928 <HAL_Pin_Mode>
}
   b5b44:	bd38      	pop	{r3, r4, r5, pc}

000b5b46 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b5b46:	b538      	push	{r3, r4, r5, lr}
   b5b48:	4604      	mov	r4, r0
   b5b4a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b5b4c:	f7fe fef4 	bl	b4938 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b5b50:	28ff      	cmp	r0, #255	; 0xff
   b5b52:	d010      	beq.n	b5b76 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b5b54:	2806      	cmp	r0, #6
   b5b56:	d804      	bhi.n	b5b62 <digitalWrite+0x1c>
   b5b58:	234d      	movs	r3, #77	; 0x4d
   b5b5a:	fa23 f000 	lsr.w	r0, r3, r0
   b5b5e:	07c3      	lsls	r3, r0, #31
   b5b60:	d409      	bmi.n	b5b76 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b5b62:	4620      	mov	r0, r4
   b5b64:	f7ff ffa0 	bl	b5aa8 <pinAvailable>
   b5b68:	b128      	cbz	r0, b5b76 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b5b6a:	4629      	mov	r1, r5
   b5b6c:	4620      	mov	r0, r4
}
   b5b6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b5b72:	f7fe bee9 	b.w	b4948 <HAL_GPIO_Write>
}
   b5b76:	bd38      	pop	{r3, r4, r5, pc}

000b5b78 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b5b78:	4770      	bx	lr
	...

000b5b7c <_Z20acquireSerial1Bufferv>:
{
   b5b7c:	b538      	push	{r3, r4, r5, lr}
   b5b7e:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b5b80:	2514      	movs	r5, #20
   b5b82:	462a      	mov	r2, r5
   b5b84:	2100      	movs	r1, #0
   b5b86:	f000 f892 	bl	b5cae <memset>
   b5b8a:	8025      	strh	r5, [r4, #0]
   b5b8c:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5b8e:	4907      	ldr	r1, [pc, #28]	; (b5bac <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b5b90:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5b92:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b5b94:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5b96:	f000 f871 	bl	b5c7c <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5b9a:	4904      	ldr	r1, [pc, #16]	; (b5bac <_Z20acquireSerial1Bufferv+0x30>)
    };
   b5b9c:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5b9e:	4628      	mov	r0, r5
   b5ba0:	f000 f86c 	bl	b5c7c <_ZnajRKSt9nothrow_t>
    };
   b5ba4:	60e0      	str	r0, [r4, #12]
}
   b5ba6:	4620      	mov	r0, r4
   b5ba8:	bd38      	pop	{r3, r4, r5, pc}
   b5baa:	bf00      	nop
   b5bac:	000b603c 	.word	0x000b603c

000b5bb0 <_Z22__fetch_global_Serial1v>:
{
   b5bb0:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b5bb2:	4d0e      	ldr	r5, [pc, #56]	; (b5bec <_Z22__fetch_global_Serial1v+0x3c>)
   b5bb4:	7829      	ldrb	r1, [r5, #0]
   b5bb6:	f3bf 8f5b 	dmb	ish
   b5bba:	f011 0401 	ands.w	r4, r1, #1
{
   b5bbe:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b5bc0:	d111      	bne.n	b5be6 <_Z22__fetch_global_Serial1v+0x36>
   b5bc2:	4628      	mov	r0, r5
   b5bc4:	f7fe fa6b 	bl	b409e <__cxa_guard_acquire>
   b5bc8:	b168      	cbz	r0, b5be6 <_Z22__fetch_global_Serial1v+0x36>
   b5bca:	a801      	add	r0, sp, #4
   b5bcc:	f7ff ffd6 	bl	b5b7c <_Z20acquireSerial1Bufferv>
   b5bd0:	aa01      	add	r2, sp, #4
   b5bd2:	4621      	mov	r1, r4
   b5bd4:	4806      	ldr	r0, [pc, #24]	; (b5bf0 <_Z22__fetch_global_Serial1v+0x40>)
   b5bd6:	f7ff fe3f 	bl	b5858 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b5bda:	4628      	mov	r0, r5
   b5bdc:	f7fe fa64 	bl	b40a8 <__cxa_guard_release>
   b5be0:	4804      	ldr	r0, [pc, #16]	; (b5bf4 <_Z22__fetch_global_Serial1v+0x44>)
   b5be2:	f000 f850 	bl	b5c86 <atexit>
    return serial1;
}
   b5be6:	4802      	ldr	r0, [pc, #8]	; (b5bf0 <_Z22__fetch_global_Serial1v+0x40>)
   b5be8:	b007      	add	sp, #28
   b5bea:	bd30      	pop	{r4, r5, pc}
   b5bec:	2003e728 	.word	0x2003e728
   b5bf0:	2003e72c 	.word	0x2003e72c
   b5bf4:	000b5b79 	.word	0x000b5b79

000b5bf8 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b5bf8:	4770      	bx	lr
	...

000b5bfc <_ZN12_GLOBAL__N_117defaultWireConfigEv>:
hal_i2c_config_t defaultWireConfig() {
   b5bfc:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b5bfe:	2520      	movs	r5, #32
   b5c00:	2314      	movs	r3, #20
hal_i2c_config_t defaultWireConfig() {
   b5c02:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b5c04:	6003      	str	r3, [r0, #0]
   b5c06:	6085      	str	r5, [r0, #8]
   b5c08:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b5c0a:	4906      	ldr	r1, [pc, #24]	; (b5c24 <_ZN12_GLOBAL__N_117defaultWireConfigEv+0x28>)
   b5c0c:	4628      	mov	r0, r5
   b5c0e:	f000 f835 	bl	b5c7c <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b5c12:	4904      	ldr	r1, [pc, #16]	; (b5c24 <_ZN12_GLOBAL__N_117defaultWireConfigEv+0x28>)
	};
   b5c14:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b5c16:	4628      	mov	r0, r5
   b5c18:	f000 f830 	bl	b5c7c <_ZnajRKSt9nothrow_t>
	};
   b5c1c:	60e0      	str	r0, [r4, #12]
}
   b5c1e:	4620      	mov	r0, r4
   b5c20:	bd38      	pop	{r3, r4, r5, pc}
   b5c22:	bf00      	nop
   b5c24:	000b603c 	.word	0x000b603c

000b5c28 <_Z17acquireWireBufferv>:
{
   b5c28:	b510      	push	{r4, lr}
   b5c2a:	4604      	mov	r4, r0
	return defaultWireConfig();
   b5c2c:	f7ff ffe6 	bl	b5bfc <_ZN12_GLOBAL__N_117defaultWireConfigEv>
}
   b5c30:	4620      	mov	r0, r4
   b5c32:	bd10      	pop	{r4, pc}

000b5c34 <_Z19__fetch_global_Wirev>:
{
   b5c34:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b5c36:	4d0e      	ldr	r5, [pc, #56]	; (b5c70 <_Z19__fetch_global_Wirev+0x3c>)
   b5c38:	7829      	ldrb	r1, [r5, #0]
   b5c3a:	f3bf 8f5b 	dmb	ish
   b5c3e:	f011 0401 	ands.w	r4, r1, #1
{
   b5c42:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b5c44:	d111      	bne.n	b5c6a <_Z19__fetch_global_Wirev+0x36>
   b5c46:	4628      	mov	r0, r5
   b5c48:	f7fe fa29 	bl	b409e <__cxa_guard_acquire>
   b5c4c:	b168      	cbz	r0, b5c6a <_Z19__fetch_global_Wirev+0x36>
   b5c4e:	a801      	add	r0, sp, #4
   b5c50:	f7ff ffea 	bl	b5c28 <_Z17acquireWireBufferv>
   b5c54:	aa01      	add	r2, sp, #4
   b5c56:	4621      	mov	r1, r4
   b5c58:	4806      	ldr	r0, [pc, #24]	; (b5c74 <_Z19__fetch_global_Wirev+0x40>)
   b5c5a:	f7ff fe51 	bl	b5900 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b5c5e:	4628      	mov	r0, r5
   b5c60:	f7fe fa22 	bl	b40a8 <__cxa_guard_release>
   b5c64:	4804      	ldr	r0, [pc, #16]	; (b5c78 <_Z19__fetch_global_Wirev+0x44>)
   b5c66:	f000 f80e 	bl	b5c86 <atexit>
	return wire;
}
   b5c6a:	4802      	ldr	r0, [pc, #8]	; (b5c74 <_Z19__fetch_global_Wirev+0x40>)
   b5c6c:	b007      	add	sp, #28
   b5c6e:	bd30      	pop	{r4, r5, pc}
   b5c70:	2003e744 	.word	0x2003e744
   b5c74:	2003e748 	.word	0x2003e748
   b5c78:	000b5bf9 	.word	0x000b5bf9

000b5c7c <_ZnajRKSt9nothrow_t>:
   b5c7c:	f7fe ba0b 	b.w	b4096 <_Znaj>

000b5c80 <_ZSt25__throw_bad_function_callv>:
   b5c80:	b508      	push	{r3, lr}
   b5c82:	f7ff f80d 	bl	b4ca0 <abort>

000b5c86 <atexit>:
   b5c86:	2300      	movs	r3, #0
   b5c88:	4601      	mov	r1, r0
   b5c8a:	461a      	mov	r2, r3
   b5c8c:	4618      	mov	r0, r3
   b5c8e:	f000 b86b 	b.w	b5d68 <__register_exitproc>

000b5c92 <memcpy>:
   b5c92:	440a      	add	r2, r1
   b5c94:	4291      	cmp	r1, r2
   b5c96:	f100 33ff 	add.w	r3, r0, #4294967295
   b5c9a:	d100      	bne.n	b5c9e <memcpy+0xc>
   b5c9c:	4770      	bx	lr
   b5c9e:	b510      	push	{r4, lr}
   b5ca0:	f811 4b01 	ldrb.w	r4, [r1], #1
   b5ca4:	f803 4f01 	strb.w	r4, [r3, #1]!
   b5ca8:	4291      	cmp	r1, r2
   b5caa:	d1f9      	bne.n	b5ca0 <memcpy+0xe>
   b5cac:	bd10      	pop	{r4, pc}

000b5cae <memset>:
   b5cae:	4402      	add	r2, r0
   b5cb0:	4603      	mov	r3, r0
   b5cb2:	4293      	cmp	r3, r2
   b5cb4:	d100      	bne.n	b5cb8 <memset+0xa>
   b5cb6:	4770      	bx	lr
   b5cb8:	f803 1b01 	strb.w	r1, [r3], #1
   b5cbc:	e7f9      	b.n	b5cb2 <memset+0x4>
	...

000b5cc0 <srand>:
   b5cc0:	b538      	push	{r3, r4, r5, lr}
   b5cc2:	4b10      	ldr	r3, [pc, #64]	; (b5d04 <srand+0x44>)
   b5cc4:	681d      	ldr	r5, [r3, #0]
   b5cc6:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b5cc8:	4604      	mov	r4, r0
   b5cca:	b9b3      	cbnz	r3, b5cfa <srand+0x3a>
   b5ccc:	2018      	movs	r0, #24
   b5cce:	f7fe ffd7 	bl	b4c80 <malloc>
   b5cd2:	4602      	mov	r2, r0
   b5cd4:	63a8      	str	r0, [r5, #56]	; 0x38
   b5cd6:	b920      	cbnz	r0, b5ce2 <srand+0x22>
   b5cd8:	4b0b      	ldr	r3, [pc, #44]	; (b5d08 <srand+0x48>)
   b5cda:	480c      	ldr	r0, [pc, #48]	; (b5d0c <srand+0x4c>)
   b5cdc:	2142      	movs	r1, #66	; 0x42
   b5cde:	f7fe ffef 	bl	b4cc0 <__assert_func>
   b5ce2:	490b      	ldr	r1, [pc, #44]	; (b5d10 <srand+0x50>)
   b5ce4:	4b0b      	ldr	r3, [pc, #44]	; (b5d14 <srand+0x54>)
   b5ce6:	e9c0 1300 	strd	r1, r3, [r0]
   b5cea:	4b0b      	ldr	r3, [pc, #44]	; (b5d18 <srand+0x58>)
   b5cec:	6083      	str	r3, [r0, #8]
   b5cee:	230b      	movs	r3, #11
   b5cf0:	8183      	strh	r3, [r0, #12]
   b5cf2:	2100      	movs	r1, #0
   b5cf4:	2001      	movs	r0, #1
   b5cf6:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b5cfa:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b5cfc:	2200      	movs	r2, #0
   b5cfe:	611c      	str	r4, [r3, #16]
   b5d00:	615a      	str	r2, [r3, #20]
   b5d02:	bd38      	pop	{r3, r4, r5, pc}
   b5d04:	2003e5f8 	.word	0x2003e5f8
   b5d08:	000b603d 	.word	0x000b603d
   b5d0c:	000b6054 	.word	0x000b6054
   b5d10:	abcd330e 	.word	0xabcd330e
   b5d14:	e66d1234 	.word	0xe66d1234
   b5d18:	0005deec 	.word	0x0005deec

000b5d1c <strdup>:
   b5d1c:	4b02      	ldr	r3, [pc, #8]	; (b5d28 <strdup+0xc>)
   b5d1e:	4601      	mov	r1, r0
   b5d20:	6818      	ldr	r0, [r3, #0]
   b5d22:	f000 b803 	b.w	b5d2c <_strdup_r>
   b5d26:	bf00      	nop
   b5d28:	2003e5f8 	.word	0x2003e5f8

000b5d2c <_strdup_r>:
   b5d2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b5d2e:	4604      	mov	r4, r0
   b5d30:	4608      	mov	r0, r1
   b5d32:	460d      	mov	r5, r1
   b5d34:	f000 f80f 	bl	b5d56 <strlen>
   b5d38:	1c42      	adds	r2, r0, #1
   b5d3a:	4611      	mov	r1, r2
   b5d3c:	4620      	mov	r0, r4
   b5d3e:	9201      	str	r2, [sp, #4]
   b5d40:	f7fe ffb6 	bl	b4cb0 <_malloc_r>
   b5d44:	4604      	mov	r4, r0
   b5d46:	b118      	cbz	r0, b5d50 <_strdup_r+0x24>
   b5d48:	9a01      	ldr	r2, [sp, #4]
   b5d4a:	4629      	mov	r1, r5
   b5d4c:	f7ff ffa1 	bl	b5c92 <memcpy>
   b5d50:	4620      	mov	r0, r4
   b5d52:	b003      	add	sp, #12
   b5d54:	bd30      	pop	{r4, r5, pc}

000b5d56 <strlen>:
   b5d56:	4603      	mov	r3, r0
   b5d58:	f813 2b01 	ldrb.w	r2, [r3], #1
   b5d5c:	2a00      	cmp	r2, #0
   b5d5e:	d1fb      	bne.n	b5d58 <strlen+0x2>
   b5d60:	1a18      	subs	r0, r3, r0
   b5d62:	3801      	subs	r0, #1
   b5d64:	4770      	bx	lr
	...

000b5d68 <__register_exitproc>:
   b5d68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b5d6c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b5e28 <__register_exitproc+0xc0>
   b5d70:	4606      	mov	r6, r0
   b5d72:	f8d8 0000 	ldr.w	r0, [r8]
   b5d76:	461f      	mov	r7, r3
   b5d78:	460d      	mov	r5, r1
   b5d7a:	4691      	mov	r9, r2
   b5d7c:	f000 f856 	bl	b5e2c <__retarget_lock_acquire_recursive>
   b5d80:	4b25      	ldr	r3, [pc, #148]	; (b5e18 <__register_exitproc+0xb0>)
   b5d82:	681c      	ldr	r4, [r3, #0]
   b5d84:	b934      	cbnz	r4, b5d94 <__register_exitproc+0x2c>
   b5d86:	4c25      	ldr	r4, [pc, #148]	; (b5e1c <__register_exitproc+0xb4>)
   b5d88:	601c      	str	r4, [r3, #0]
   b5d8a:	4b25      	ldr	r3, [pc, #148]	; (b5e20 <__register_exitproc+0xb8>)
   b5d8c:	b113      	cbz	r3, b5d94 <__register_exitproc+0x2c>
   b5d8e:	681b      	ldr	r3, [r3, #0]
   b5d90:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b5d94:	6863      	ldr	r3, [r4, #4]
   b5d96:	2b1f      	cmp	r3, #31
   b5d98:	dd07      	ble.n	b5daa <__register_exitproc+0x42>
   b5d9a:	f8d8 0000 	ldr.w	r0, [r8]
   b5d9e:	f000 f847 	bl	b5e30 <__retarget_lock_release_recursive>
   b5da2:	f04f 30ff 	mov.w	r0, #4294967295
   b5da6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b5daa:	b34e      	cbz	r6, b5e00 <__register_exitproc+0x98>
   b5dac:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b5db0:	b988      	cbnz	r0, b5dd6 <__register_exitproc+0x6e>
   b5db2:	4b1c      	ldr	r3, [pc, #112]	; (b5e24 <__register_exitproc+0xbc>)
   b5db4:	b923      	cbnz	r3, b5dc0 <__register_exitproc+0x58>
   b5db6:	f8d8 0000 	ldr.w	r0, [r8]
   b5dba:	f000 f838 	bl	b5e2e <__retarget_lock_release>
   b5dbe:	e7f0      	b.n	b5da2 <__register_exitproc+0x3a>
   b5dc0:	f44f 7084 	mov.w	r0, #264	; 0x108
   b5dc4:	f7fe ff5c 	bl	b4c80 <malloc>
   b5dc8:	2800      	cmp	r0, #0
   b5dca:	d0f4      	beq.n	b5db6 <__register_exitproc+0x4e>
   b5dcc:	2300      	movs	r3, #0
   b5dce:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b5dd2:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b5dd6:	6863      	ldr	r3, [r4, #4]
   b5dd8:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b5ddc:	2201      	movs	r2, #1
   b5dde:	409a      	lsls	r2, r3
   b5de0:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b5de4:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b5de8:	4313      	orrs	r3, r2
   b5dea:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b5dee:	2e02      	cmp	r6, #2
   b5df0:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b5df4:	bf02      	ittt	eq
   b5df6:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b5dfa:	4313      	orreq	r3, r2
   b5dfc:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b5e00:	6863      	ldr	r3, [r4, #4]
   b5e02:	f8d8 0000 	ldr.w	r0, [r8]
   b5e06:	1c5a      	adds	r2, r3, #1
   b5e08:	3302      	adds	r3, #2
   b5e0a:	6062      	str	r2, [r4, #4]
   b5e0c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b5e10:	f000 f80e 	bl	b5e30 <__retarget_lock_release_recursive>
   b5e14:	2000      	movs	r0, #0
   b5e16:	e7c6      	b.n	b5da6 <__register_exitproc+0x3e>
   b5e18:	2003e7e8 	.word	0x2003e7e8
   b5e1c:	2003e75c 	.word	0x2003e75c
   b5e20:	00000000 	.word	0x00000000
   b5e24:	000b4c81 	.word	0x000b4c81
   b5e28:	2003e65c 	.word	0x2003e65c

000b5e2c <__retarget_lock_acquire_recursive>:
   b5e2c:	4770      	bx	lr

000b5e2e <__retarget_lock_release>:
   b5e2e:	4770      	bx	lr

000b5e30 <__retarget_lock_release_recursive>:
   b5e30:	4770      	bx	lr

000b5e32 <link_code_end>:
	...

000b5e34 <dynalib_user>:
   b5e34:	401d 000b 4059 000b 4081 000b 4085 000b     .@..Y@...@...@..
   b5e44:	0000 0000 6544 6976 6563 6920 696e 6974     ....Device initi
   b5e54:	6c61 7a69 6465 5000 4f54 0031               alized.PTO1.

000b5e60 <CSWTCH.60>:
   b5e60:	012c 0000 0018 0000 01f4 0000 012c 0000     ,...........,...
   b5e70:	0050 0000                                   P...

000b5e74 <_ZTVN5spark13EthernetClassE>:
	...
   b5e7c:	4d3f 000b 4d35 000b 4d2b 000b 4d21 000b     ?M..5M..+M..!M..
   b5e8c:	4d15 000b 4d09 000b 5985 000b 598d 000b     .M...M...Y...Y..
   b5e9c:	4cfd 000b 4cf5 000b 4ceb 000b 4ce1 000b     .L...L...L...L..
   b5eac:	59bd 000b 7061 0070 5925 252d 2d6d 6425     .Y..app.%Y-%m-%d
   b5ebc:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   b5ecc:	6d69 0065                                   ime.

000b5ed0 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b5ed8:	5025 000b 502b 000b 5069 000b 5039 000b     %P..+P..iP..9P..
   b5ee8:	5027 000b                                   'P..

000b5eec <_ZTV9IPAddress>:
	...
   b5ef4:	5565 000b 5555 000b 5557 000b               eU..UU..WU..

000b5f00 <_ZTV9USBSerial>:
	...
   b5f08:	564b 000b 56b3 000b 5689 000b 4e15 000b     KV...V...V...N..
   b5f18:	567b 000b 564d 000b 565d 000b 56ad 000b     {V..MV..]V...V..
   b5f28:	566d 000b 5645 000b                         mV..EV..

000b5f30 <_ZTVN5spark13CellularClassE>:
	...
   b5f38:	57a3 000b 5799 000b 578f 000b 5745 000b     .W...W...W..EW..
   b5f48:	5783 000b 5777 000b 5985 000b 598d 000b     .W..wW...Y...Y..
   b5f58:	576b 000b 5763 000b 5759 000b 574f 000b     kW..cW..YW..OW..
   b5f68:	59bd 000b                                   .Y..

000b5f6c <_ZTV11USARTSerial>:
	...
   b5f74:	57dd 000b 5849 000b 5821 000b 4e15 000b     .W..IX..!X...N..
   b5f84:	57f1 000b 580d 000b 57ff 000b 581b 000b     .W...X...W...X..
   b5f94:	57df 000b 57e3 000b                         .W...W..

000b5f9c <_ZTV7TwoWire>:
	...
   b5fa4:	58a9 000b 58f3 000b 58cb 000b 58ab 000b     .X...X...X...X..
   b5fb4:	58d3 000b 58db 000b 58e3 000b 58eb 000b     .X...X...X...X..

000b5fc4 <_ZTVN5spark9WiFiClassE>:
	...
   b5fcc:	5945 000b 594f 000b 5959 000b 5963 000b     EY..OY..YY..cY..
   b5fdc:	4ea7 000b 5925 000b 5985 000b 598d 000b     .N..%Y...Y...Y..
   b5fec:	5995 000b 59a1 000b 59a9 000b 59b3 000b     .Y...Y...Y...Y..
   b5ffc:	59bd 000b                                   .Y..

000b6000 <_ZTVN5spark12NetworkClassE>:
	...
   b6008:	5945 000b 594f 000b 5959 000b 5963 000b     EY..OY..YY..cY..
   b6018:	596d 000b 5979 000b 5985 000b 598d 000b     mY..yY...Y...Y..
   b6028:	5995 000b 59a1 000b 59a9 000b 59b3 000b     .Y...Y...Y...Y..
   b6038:	59bd 000b                                   .Y..

000b603c <_ZSt7nothrow>:
   b603c:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   b604c:	6363 6565 6564 0064 6d2f 746e 772f 726f     cceeded./mnt/wor
   b605c:	736b 6170 6563 772f 726f 736b 6170 6563     kspace/workspace
   b606c:	472f 4343 312d 2d30 6970 6570 696c 656e     /GCC-10-pipeline
   b607c:	6a2f 6e65 696b 736e 472d 4343 312d 2d30     /jenkins-GCC-10-
   b608c:	6970 6570 696c 656e 342d 5f38 3032 3032     pipeline-48_2020
   b609c:	3131 3432 315f 3036 3136 3038 3436 2f31     1124_1606180641/
   b60ac:	7273 2f63 656e 6c77 6269 6e2f 7765 696c     src/newlib/newli
   b60bc:	2f62 696c 6362 732f 6474 696c 2f62 6172     b/libc/stdlib/ra
   b60cc:	646e 632e                                    nd.c.

000b60d1 <link_const_variable_data_end>:
   b60d1:	00          	.byte	0x00
	...

000b60d4 <link_constructors_location>:
   b60d4:	000b43d9 	.word	0x000b43d9
   b60d8:	000b48e9 	.word	0x000b48e9
   b60dc:	000b4d49 	.word	0x000b4d49
   b60e0:	000b4d71 	.word	0x000b4d71
   b60e4:	000b4e05 	.word	0x000b4e05
   b60e8:	000b4eb5 	.word	0x000b4eb5
   b60ec:	000b4ec5 	.word	0x000b4ec5
   b60f0:	000b4ee1 	.word	0x000b4ee1
   b60f4:	000b57ad 	.word	0x000b57ad
   b60f8:	000b5931 	.word	0x000b5931
   b60fc:	000b5a95 	.word	0x000b5a95
