
c:/Users/taylor.macdonald/LEDBatteryReader/target/2.3.0/photon/LEDBatteryReader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000024b4  080a001c  080a001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a24d0  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000006c  20000000  080a24d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000194  2000006c  2000006c  0003006c  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a2540  080a2540  00022540  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a2568  080a2568  00022568  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   00100727  00000000  00000000  0002256c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00012bcb  00000000  00000000  00122c93  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00014793  00000000  00000000  0013585e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001e58  00000000  00000000  00149ff1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000044e0  00000000  00000000  0014be49  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00028ca8  00000000  00000000  00150329  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002a011  00000000  00000000  00178fd1  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000af034  00000000  00000000  001a2fe2  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00004a7c  00000000  00000000  00252018  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <link_dynalib_end+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <link_dynalib_end+0x2c>)
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <link_dynalib_end+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f002 f8e3 	bl	80a21f8 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <link_dynalib_end+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <link_dynalib_end+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f002 f8eb 	bl	80a2214 <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <link_dynalib_end+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000000 	.word	0x20000000
 80a0048:	080a24d4 	.word	0x080a24d4
 80a004c:	2000006c 	.word	0x2000006c
 80a0050:	2000006c 	.word	0x2000006c
 80a0054:	200001fd 	.word	0x200001fd
 80a0058:	200001fd 	.word	0x200001fd

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f001 fd2b 	bl	80a1ab8 <module_user_init_hook>

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0062:	2500      	movs	r5, #0
 80a0064:	4e05      	ldr	r6, [pc, #20]	; (80a007c <module_user_init+0x20>)
 80a0066:	4c06      	ldr	r4, [pc, #24]	; (80a0080 <module_user_init+0x24>)
 80a0068:	1ba4      	subs	r4, r4, r6
 80a006a:	08a4      	lsrs	r4, r4, #2
 80a006c:	42a5      	cmp	r5, r4
 80a006e:	d100      	bne.n	80a0072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 80a0072:	f856 3b04 	ldr.w	r3, [r6], #4
 80a0076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f7      	b.n	80a006c <module_user_init+0x10>
 80a007c:	080a24ac 	.word	0x080a24ac
 80a0080:	080a24d0 	.word	0x080a24d0

080a0084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0084:	f000 b816 	b.w	80a00b4 <setup>

080a0088 <module_user_loop>:
}

void module_user_loop() {
 80a0088:	b508      	push	{r3, lr}
    loop();
 80a008a:	f000 f865 	bl	80a0158 <loop>
    _post_loop();
}
 80a008e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 80a0092:	f001 bcc9 	b.w	80a1a28 <_post_loop>

080a0096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 80a0096:	f001 bbbf 	b.w	80a1818 <malloc>

080a009a <_Znaj>:
 80a009a:	f001 bbbd 	b.w	80a1818 <malloc>

080a009e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
 80a009e:	f001 bbc3 	b.w	80a1828 <free>

080a00a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a2:	7800      	ldrb	r0, [r0, #0]
 80a00a4:	fab0 f080 	clz	r0, r0
 80a00a8:	0940      	lsrs	r0, r0, #5
 80a00aa:	4770      	bx	lr

080a00ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00ac:	2301      	movs	r3, #1
 80a00ae:	7003      	strb	r3, [r0, #0]
 80a00b0:	4770      	bx	lr
	...

080a00b4 <setup>:
#define LIGHT_DELAY 50
#define FADE .5

Adafruit_NeoPixel strip(PIXEL_COUNT, PIXEL_PIN, PIXEL_TYPE);

void setup() {
 80a00b4:	b510      	push	{r4, lr}
  RGB.control(true);
 80a00b6:	2001      	movs	r0, #1
 80a00b8:	f001 fc49 	bl	80a194e <_ZN8RGBClass7controlEb>
  RGB.brightness(50);
 80a00bc:	2101      	movs	r1, #1
 80a00be:	2032      	movs	r0, #50	; 0x32
 80a00c0:	f001 fc68 	bl	80a1994 <_ZN8RGBClass10brightnessEhb>
  RGB.color(255,255,255);
 80a00c4:	22ff      	movs	r2, #255	; 0xff
  //pinMode(A3,OUTPUT);
  
  strip.begin();
 80a00c6:	4c06      	ldr	r4, [pc, #24]	; (80a00e0 <setup+0x2c>)
  RGB.color(255,255,255);
 80a00c8:	4610      	mov	r0, r2
 80a00ca:	4611      	mov	r1, r2
 80a00cc:	f001 fc4f 	bl	80a196e <_ZN8RGBClass5colorEiii>
  strip.begin();
 80a00d0:	4620      	mov	r0, r4
 80a00d2:	f000 f887 	bl	80a01e4 <_ZN17Adafruit_NeoPixel5beginEv>
  strip.show(); // Initialize all pixels to 'off'
 80a00d6:	4620      	mov	r0, r4
}
 80a00d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  strip.show(); // Initialize all pixels to 'off'
 80a00dc:	f000 b8b8 	b.w	80a0250 <_ZN17Adafruit_NeoPixel4showEv>
 80a00e0:	20000078 	.word	0x20000078

080a00e4 <_Z20setBatteryPercentageh>:
    delay(LIGHT_DELAY);
  }
  delay(5000);
}

void setBatteryPercentage(uint8_t percentage){
 80a00e4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint16_t j;
  for (j=0; j<PIXEL_COUNT; j++){
    if (j<=PIXEL_COUNT * percentage/100){
 80a00e8:	2518      	movs	r5, #24
 80a00ea:	2364      	movs	r3, #100	; 0x64
 80a00ec:	2400      	movs	r4, #0
 80a00ee:	4345      	muls	r5, r0
void setBatteryPercentage(uint8_t percentage){
 80a00f0:	4606      	mov	r6, r0
    if (j<=PIXEL_COUNT * percentage/100){
 80a00f2:	fbb5 f5f3 	udiv	r5, r5, r3
 80a00f6:	4627      	mov	r7, r4
      else{ //set green
        strip.setPixelColor(j,0,255*FADE,0,0);
      }
    }
    else{
      strip.setPixelColor(j,0,0,0);
 80a00f8:	f8df 8058 	ldr.w	r8, [pc, #88]	; 80a0154 <_Z20setBatteryPercentageh+0x70>
    if (j<=PIXEL_COUNT * percentage/100){
 80a00fc:	42a5      	cmp	r5, r4
 80a00fe:	b2a1      	uxth	r1, r4
 80a0100:	db21      	blt.n	80a0146 <_Z20setBatteryPercentageh+0x62>
      if (percentage <= 33){ // Low battery: set red
 80a0102:	2e21      	cmp	r6, #33	; 0x21
 80a0104:	d80e      	bhi.n	80a0124 <_Z20setBatteryPercentageh+0x40>
        strip.setPixelColor(j,255*FADE,0,0);
 80a0106:	2300      	movs	r3, #0
 80a0108:	227f      	movs	r2, #127	; 0x7f
 80a010a:	4640      	mov	r0, r8
 80a010c:	9700      	str	r7, [sp, #0]
 80a010e:	f001 f94f 	bl	80a13b0 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
  for (j=0; j<PIXEL_COUNT; j++){
 80a0112:	3401      	adds	r4, #1
 80a0114:	2c18      	cmp	r4, #24
 80a0116:	d1f1      	bne.n	80a00fc <_Z20setBatteryPercentageh+0x18>
    }
  }
  strip.show();
 80a0118:	480e      	ldr	r0, [pc, #56]	; (80a0154 <_Z20setBatteryPercentageh+0x70>)
 80a011a:	b002      	add	sp, #8
 80a011c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  strip.show();
 80a0120:	f000 b896 	b.w	80a0250 <_ZN17Adafruit_NeoPixel4showEv>
      else if (percentage <= 66){ // set orange
 80a0124:	2e42      	cmp	r6, #66	; 0x42
 80a0126:	d806      	bhi.n	80a0136 <_Z20setBatteryPercentageh+0x52>
        strip.setPixelColor(j,255*FADE,127*FADE,0);
 80a0128:	233f      	movs	r3, #63	; 0x3f
 80a012a:	227f      	movs	r2, #127	; 0x7f
 80a012c:	4640      	mov	r0, r8
 80a012e:	9700      	str	r7, [sp, #0]
 80a0130:	f001 f93e 	bl	80a13b0 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
 80a0134:	e7ed      	b.n	80a0112 <_Z20setBatteryPercentageh+0x2e>
        strip.setPixelColor(j,0,255*FADE,0,0);
 80a0136:	237f      	movs	r3, #127	; 0x7f
 80a0138:	2200      	movs	r2, #0
 80a013a:	4640      	mov	r0, r8
 80a013c:	e9cd 7700 	strd	r7, r7, [sp]
 80a0140:	f001 f961 	bl	80a1406 <_ZN17Adafruit_NeoPixel13setPixelColorEthhhh>
 80a0144:	e7e5      	b.n	80a0112 <_Z20setBatteryPercentageh+0x2e>
      strip.setPixelColor(j,0,0,0);
 80a0146:	2300      	movs	r3, #0
 80a0148:	4640      	mov	r0, r8
 80a014a:	461a      	mov	r2, r3
 80a014c:	9700      	str	r7, [sp, #0]
 80a014e:	f001 f92f 	bl	80a13b0 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
 80a0152:	e7de      	b.n	80a0112 <_Z20setBatteryPercentageh+0x2e>
 80a0154:	20000078 	.word	0x20000078

080a0158 <loop>:
void loop() {
 80a0158:	b510      	push	{r4, lr}
 80a015a:	2400      	movs	r4, #0
    setBatteryPercentage(i);
 80a015c:	b2e0      	uxtb	r0, r4
 80a015e:	f7ff ffc1 	bl	80a00e4 <_Z20setBatteryPercentageh>
    delay(LIGHT_DELAY);
 80a0162:	3401      	adds	r4, #1
 80a0164:	2032      	movs	r0, #50	; 0x32
 80a0166:	f001 fbef 	bl	80a1948 <delay>
  for (i=0;i<100;i++){
 80a016a:	2c64      	cmp	r4, #100	; 0x64
 80a016c:	d1f6      	bne.n	80a015c <loop+0x4>
  delay(5000);
 80a016e:	f241 3088 	movw	r0, #5000	; 0x1388
}
 80a0172:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  delay(5000);
 80a0176:	f001 bbe7 	b.w	80a1948 <delay>
	...

080a017c <_GLOBAL__sub_I_SystemMode>:

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 80a017c:	2200      	movs	r2, #0
 80a017e:	b510      	push	{r4, lr}
 80a0180:	4b08      	ldr	r3, [pc, #32]	; (80a01a4 <_GLOBAL__sub_I_SystemMode+0x28>)

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a0182:	2001      	movs	r0, #1
              error_(SYSTEM_ERROR_NONE) {
 80a0184:	601a      	str	r2, [r3, #0]
 80a0186:	809a      	strh	r2, [r3, #4]
    SleepResult() {}
 80a0188:	719a      	strb	r2, [r3, #6]
 80a018a:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
 80a018e:	609a      	str	r2, [r3, #8]
        set_system_mode(mode);
 80a0190:	f001 fab6 	bl	80a1700 <set_system_mode>
 80a0194:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
Adafruit_NeoPixel strip(PIXEL_COUNT, PIXEL_PIN, PIXEL_TYPE);
 80a0198:	2302      	movs	r3, #2
 80a019a:	220d      	movs	r2, #13
 80a019c:	2118      	movs	r1, #24
 80a019e:	4802      	ldr	r0, [pc, #8]	; (80a01a8 <_GLOBAL__sub_I_SystemMode+0x2c>)
 80a01a0:	f000 b845 	b.w	80a022e <_ZN17Adafruit_NeoPixelC1Ethh>
 80a01a4:	2000006c 	.word	0x2000006c
 80a01a8:	20000078 	.word	0x20000078

080a01ac <_ZN17Adafruit_NeoPixel12updateLengthEt>:
Adafruit_NeoPixel::~Adafruit_NeoPixel() {
  if (pixels) free(pixels);
  if (begun) pinMode(pin, INPUT);
}

void Adafruit_NeoPixel::updateLength(uint16_t n) {
 80a01ac:	b538      	push	{r3, r4, r5, lr}
 80a01ae:	4604      	mov	r4, r0
  if (pixels) free(pixels); // Free existing data (if any)
 80a01b0:	68c0      	ldr	r0, [r0, #12]
void Adafruit_NeoPixel::updateLength(uint16_t n) {
 80a01b2:	460d      	mov	r5, r1
  if (pixels) free(pixels); // Free existing data (if any)
 80a01b4:	b108      	cbz	r0, 80a01ba <_ZN17Adafruit_NeoPixel12updateLengthEt+0xe>
 80a01b6:	f001 fb37 	bl	80a1828 <free>

  // Allocate new data -- note: ALL PIXELS ARE CLEARED
  numBytes = n * ((type == SK6812RGBW) ? 4 : 3);
 80a01ba:	79a3      	ldrb	r3, [r4, #6]
 80a01bc:	2b06      	cmp	r3, #6
 80a01be:	bf0c      	ite	eq
 80a01c0:	2004      	moveq	r0, #4
 80a01c2:	2003      	movne	r0, #3
 80a01c4:	4368      	muls	r0, r5
 80a01c6:	b280      	uxth	r0, r0
 80a01c8:	80a0      	strh	r0, [r4, #4]
  if ((pixels = (uint8_t *)malloc(numBytes))) {
 80a01ca:	f001 fb25 	bl	80a1818 <malloc>
 80a01ce:	60e0      	str	r0, [r4, #12]
 80a01d0:	b128      	cbz	r0, 80a01de <_ZN17Adafruit_NeoPixel12updateLengthEt+0x32>
    memset(pixels, 0, numBytes);
 80a01d2:	2100      	movs	r1, #0
 80a01d4:	88a2      	ldrh	r2, [r4, #4]
 80a01d6:	f002 f81d 	bl	80a2214 <memset>
    numLEDs = n;
 80a01da:	8065      	strh	r5, [r4, #2]
  } else {
    numLEDs = numBytes = 0;
  }
}
 80a01dc:	bd38      	pop	{r3, r4, r5, pc}
    numLEDs = numBytes = 0;
 80a01de:	80a0      	strh	r0, [r4, #4]
 80a01e0:	8060      	strh	r0, [r4, #2]
}
 80a01e2:	e7fb      	b.n	80a01dc <_ZN17Adafruit_NeoPixel12updateLengthEt+0x30>

080a01e4 <_ZN17Adafruit_NeoPixel5beginEv>:

void Adafruit_NeoPixel::begin(void) {
 80a01e4:	b510      	push	{r4, lr}
 80a01e6:	4604      	mov	r4, r0
  pinMode(pin, OUTPUT);
 80a01e8:	2101      	movs	r1, #1
 80a01ea:	79c0      	ldrb	r0, [r0, #7]
 80a01ec:	f001 ff84 	bl	80a20f8 <pinMode>
  digitalWrite(pin, LOW);
 80a01f0:	2100      	movs	r1, #0
 80a01f2:	79e0      	ldrb	r0, [r4, #7]
 80a01f4:	f001 ff91 	bl	80a211a <digitalWrite>
  begun = true;
 80a01f8:	2301      	movs	r3, #1
 80a01fa:	7023      	strb	r3, [r4, #0]
}
 80a01fc:	bd10      	pop	{r4, pc}

080a01fe <_ZN17Adafruit_NeoPixel6setPinEh>:

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
 80a01fe:	b538      	push	{r3, r4, r5, lr}
    if (begun) {
 80a0200:	7803      	ldrb	r3, [r0, #0]
void Adafruit_NeoPixel::setPin(uint8_t p) {
 80a0202:	4605      	mov	r5, r0
 80a0204:	460c      	mov	r4, r1
    if (begun) {
 80a0206:	b11b      	cbz	r3, 80a0210 <_ZN17Adafruit_NeoPixel6setPinEh+0x12>
        pinMode(pin, INPUT);
 80a0208:	2100      	movs	r1, #0
 80a020a:	79c0      	ldrb	r0, [r0, #7]
 80a020c:	f001 ff74 	bl	80a20f8 <pinMode>
    }
    pin = p;
    if (begun) {
 80a0210:	782b      	ldrb	r3, [r5, #0]
    pin = p;
 80a0212:	71ec      	strb	r4, [r5, #7]
    if (begun) {
 80a0214:	b153      	cbz	r3, 80a022c <_ZN17Adafruit_NeoPixel6setPinEh+0x2e>
        pinMode(p, OUTPUT);
 80a0216:	b2a4      	uxth	r4, r4
 80a0218:	4620      	mov	r0, r4
 80a021a:	2101      	movs	r1, #1
 80a021c:	f001 ff6c 	bl	80a20f8 <pinMode>
        digitalWrite(p, LOW);
 80a0220:	4620      	mov	r0, r4
    }
}
 80a0222:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        digitalWrite(p, LOW);
 80a0226:	2100      	movs	r1, #0
 80a0228:	f001 bf77 	b.w	80a211a <digitalWrite>
}
 80a022c:	bd38      	pop	{r3, r4, r5, pc}

080a022e <_ZN17Adafruit_NeoPixelC1Ethh>:
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
 80a022e:	b570      	push	{r4, r5, r6, lr}
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
 80a0230:	2500      	movs	r5, #0
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
 80a0232:	4604      	mov	r4, r0
 80a0234:	4616      	mov	r6, r2
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
 80a0236:	7183      	strb	r3, [r0, #6]
 80a0238:	e9c0 5503 	strd	r5, r5, [r0, #12]
 80a023c:	7005      	strb	r5, [r0, #0]
 80a023e:	7205      	strb	r5, [r0, #8]
  updateLength(n);
 80a0240:	f7ff ffb4 	bl	80a01ac <_ZN17Adafruit_NeoPixel12updateLengthEt>
  setPin(p);
 80a0244:	4620      	mov	r0, r4
 80a0246:	4631      	mov	r1, r6
 80a0248:	f7ff ffd9 	bl	80a01fe <_ZN17Adafruit_NeoPixel6setPinEh>
}
 80a024c:	4620      	mov	r0, r4
 80a024e:	bd70      	pop	{r4, r5, r6, pc}

080a0250 <_ZN17Adafruit_NeoPixel4showEv>:

void Adafruit_NeoPixel::show(void) {
  if(!pixels) return;
 80a0250:	68c3      	ldr	r3, [r0, #12]
 80a0252:	2b00      	cmp	r3, #0
 80a0254:	f000 8441 	beq.w	80a0ada <_ZN17Adafruit_NeoPixel4showEv+0x88a>
void Adafruit_NeoPixel::show(void) {
 80a0258:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a025a:	7983      	ldrb	r3, [r0, #6]
 80a025c:	4604      	mov	r4, r0
  // the function will simply hold off (if needed) on issuing the
  // subsequent round of data until the latch time has elapsed.  This
  // allows the mainline code to start generating the next frame of data
  // rather than stalling for the latch.
  uint32_t wait_time; // wait time in microseconds.
  switch(type) {
 80a025e:	3b02      	subs	r3, #2
 80a0260:	b2db      	uxtb	r3, r3
 80a0262:	2b04      	cmp	r3, #4
 80a0264:	bf8c      	ite	hi
 80a0266:	2532      	movhi	r5, #50	; 0x32
 80a0268:	4a28      	ldrls	r2, [pc, #160]	; (80a030c <_ZN17Adafruit_NeoPixel4showEv+0xbc>)
void Adafruit_NeoPixel::show(void) {
 80a026a:	b087      	sub	sp, #28
 80a026c:	bf98      	it	ls
 80a026e:	f852 5023 	ldrls.w	r5, [r2, r3, lsl #2]
#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
 80a0272:	f001 f933 	bl	80a14dc <HAL_Timer_Get_Micro_Seconds>
    case WS2812B2_FAST:
    default: {   // default = 50us reset pulse
        wait_time = 50L;
      } break;
  }
  while((micros() - endTime) < wait_time);
 80a0276:	6923      	ldr	r3, [r4, #16]
 80a0278:	1ac0      	subs	r0, r0, r3
 80a027a:	42a8      	cmp	r0, r5
 80a027c:	d3f9      	bcc.n	80a0272 <_ZN17Adafruit_NeoPixel4showEv+0x22>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
 80a027e:	b672      	cpsid	i
  __disable_irq(); // Need 100% focus on instruction timing

  volatile uint32_t
    c,    // 24-bit/32-bit pixel color
    mask; // 1-bit mask
  volatile uint16_t i = numBytes; // Output loop counter
 80a0280:	88a3      	ldrh	r3, [r4, #4]
    g,              // Current green byte value
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
 80a0282:	79a5      	ldrb	r5, [r4, #6]
  volatile uint16_t i = numBytes; // Output loop counter
 80a0284:	f8ad 300a 	strh.w	r3, [sp, #10]
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0288:	f8bd 300a 	ldrh.w	r3, [sp, #10]
  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
 80a028c:	2d02      	cmp	r5, #2
   *ptr = pixels,   // Pointer to next byte
 80a028e:	68e1      	ldr	r1, [r4, #12]
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0290:	b29b      	uxth	r3, r3
  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
 80a0292:	f000 826e 	beq.w	80a0772 <_ZN17Adafruit_NeoPixel4showEv+0x522>
 80a0296:	2d07      	cmp	r5, #7
 80a0298:	f000 826b 	beq.w	80a0772 <_ZN17Adafruit_NeoPixel4showEv+0x522>
        }
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == SK6812RGBW) { // similar to WS2812, 800 KHz bitstream but with RGB+W components
 80a029c:	2d06      	cmp	r5, #6
 80a029e:	f000 841d 	beq.w	80a0adc <_ZN17Adafruit_NeoPixel4showEv+0x88c>
        }
        mask >>= 1;
      } while ( ++j < 32 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == WS2812B2 || type == WS2812B2_FAST) { // WS2812B with DWT timer
 80a02a2:	2d05      	cmp	r5, #5
 80a02a4:	f000 83a1 	beq.w	80a09ea <_ZN17Adafruit_NeoPixel4showEv+0x79a>
 80a02a8:	2d08      	cmp	r5, #8
 80a02aa:	f000 839e 	beq.w	80a09ea <_ZN17Adafruit_NeoPixel4showEv+0x79a>
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
#endif
  }
  else if(type == WS2811) { // WS2811, 400 KHz bitstream
 80a02ae:	2d00      	cmp	r5, #0
 80a02b0:	f040 854f 	bne.w	80a0d52 <_ZN17Adafruit_NeoPixel4showEv+0xb02>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a02b4:	2b00      	cmp	r3, #0
 80a02b6:	f000 8392 	beq.w	80a09de <_ZN17Adafruit_NeoPixel4showEv+0x78e>
      mask = 0x800000; // reset the mask
 80a02ba:	f44f 0600 	mov.w	r6, #8388608	; 0x800000
 80a02be:	4a14      	ldr	r2, [pc, #80]	; (80a0310 <_ZN17Adafruit_NeoPixel4showEv+0xc0>)
 80a02c0:	9604      	str	r6, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a02c2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
 80a02c6:	3103      	adds	r1, #3
      i = i-3;      // decrement bytes remaining
 80a02c8:	3b03      	subs	r3, #3
 80a02ca:	b29b      	uxth	r3, r3
 80a02cc:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a02d0:	f811 3c03 	ldrb.w	r3, [r1, #-3]
 80a02d4:	b2db      	uxtb	r3, r3
 80a02d6:	f88d 3007 	strb.w	r3, [sp, #7]
      g = *ptr++;   // Next green byte value
 80a02da:	f811 3c02 	ldrb.w	r3, [r1, #-2]
 80a02de:	b2db      	uxtb	r3, r3
 80a02e0:	f88d 3006 	strb.w	r3, [sp, #6]
      b = *ptr++;   // Next blue byte value
 80a02e4:	f811 3c01 	ldrb.w	r3, [r1, #-1]
 80a02e8:	b2db      	uxtb	r3, r3
 80a02ea:	f88d 3008 	strb.w	r3, [sp, #8]
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a02ee:	f89d 7007 	ldrb.w	r7, [sp, #7]
 80a02f2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a02f6:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80a02fa:	021b      	lsls	r3, r3, #8
 80a02fc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80a0300:	4303      	orrs	r3, r0
 80a0302:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a0304:	f88d 5005 	strb.w	r5, [sp, #5]
 80a0308:	e11b      	b.n	80a0542 <_ZN17Adafruit_NeoPixel4showEv+0x2f2>
 80a030a:	bf00      	nop
 80a030c:	080a2360 	.word	0x080a2360
 80a0310:	2000008c 	.word	0x2000008c
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0314:	4600      	mov	r0, r0
 80a0316:	bf00      	nop
 80a0318:	bf00      	nop
 80a031a:	bf00      	nop
 80a031c:	bf00      	nop
 80a031e:	bf00      	nop
 80a0320:	bf00      	nop
 80a0322:	bf00      	nop
 80a0324:	bf00      	nop
 80a0326:	bf00      	nop
 80a0328:	bf00      	nop
 80a032a:	bf00      	nop
 80a032c:	bf00      	nop
 80a032e:	bf00      	nop
 80a0330:	bf00      	nop
 80a0332:	bf00      	nop
 80a0334:	bf00      	nop
 80a0336:	bf00      	nop
 80a0338:	bf00      	nop
 80a033a:	bf00      	nop
 80a033c:	bf00      	nop
 80a033e:	bf00      	nop
 80a0340:	bf00      	nop
 80a0342:	bf00      	nop
 80a0344:	bf00      	nop
 80a0346:	bf00      	nop
 80a0348:	bf00      	nop
 80a034a:	bf00      	nop
 80a034c:	bf00      	nop
 80a034e:	bf00      	nop
 80a0350:	bf00      	nop
 80a0352:	bf00      	nop
 80a0354:	bf00      	nop
 80a0356:	bf00      	nop
 80a0358:	bf00      	nop
 80a035a:	bf00      	nop
 80a035c:	bf00      	nop
 80a035e:	bf00      	nop
 80a0360:	bf00      	nop
 80a0362:	bf00      	nop
 80a0364:	bf00      	nop
 80a0366:	bf00      	nop
 80a0368:	bf00      	nop
 80a036a:	bf00      	nop
 80a036c:	bf00      	nop
 80a036e:	bf00      	nop
 80a0370:	bf00      	nop
 80a0372:	bf00      	nop
 80a0374:	bf00      	nop
 80a0376:	bf00      	nop
 80a0378:	bf00      	nop
 80a037a:	bf00      	nop
 80a037c:	bf00      	nop
 80a037e:	bf00      	nop
 80a0380:	bf00      	nop
 80a0382:	bf00      	nop
 80a0384:	bf00      	nop
 80a0386:	bf00      	nop
 80a0388:	bf00      	nop
 80a038a:	bf00      	nop
 80a038c:	bf00      	nop
 80a038e:	bf00      	nop
 80a0390:	bf00      	nop
 80a0392:	bf00      	nop
 80a0394:	bf00      	nop
 80a0396:	bf00      	nop
 80a0398:	bf00      	nop
 80a039a:	bf00      	nop
 80a039c:	bf00      	nop
 80a039e:	bf00      	nop
 80a03a0:	bf00      	nop
 80a03a2:	bf00      	nop
 80a03a4:	bf00      	nop
 80a03a6:	bf00      	nop
 80a03a8:	bf00      	nop
 80a03aa:	bf00      	nop
 80a03ac:	bf00      	nop
 80a03ae:	bf00      	nop
 80a03b0:	bf00      	nop
 80a03b2:	bf00      	nop
 80a03b4:	bf00      	nop
 80a03b6:	bf00      	nop
 80a03b8:	bf00      	nop
 80a03ba:	bf00      	nop
 80a03bc:	bf00      	nop
 80a03be:	bf00      	nop
 80a03c0:	bf00      	nop
 80a03c2:	bf00      	nop
 80a03c4:	bf00      	nop
 80a03c6:	bf00      	nop
 80a03c8:	bf00      	nop
 80a03ca:	bf00      	nop
 80a03cc:	bf00      	nop
 80a03ce:	bf00      	nop
 80a03d0:	bf00      	nop
 80a03d2:	bf00      	nop
 80a03d4:	bf00      	nop
 80a03d6:	bf00      	nop
 80a03d8:	bf00      	nop
 80a03da:	bf00      	nop
 80a03dc:	bf00      	nop
 80a03de:	bf00      	nop
 80a03e0:	bf00      	nop
 80a03e2:	bf00      	nop
 80a03e4:	bf00      	nop
 80a03e6:	bf00      	nop
 80a03e8:	bf00      	nop
 80a03ea:	bf00      	nop
 80a03ec:	bf00      	nop
 80a03ee:	bf00      	nop
 80a03f0:	bf00      	nop
 80a03f2:	bf00      	nop
 80a03f4:	bf00      	nop
 80a03f6:	bf00      	nop
 80a03f8:	bf00      	nop
 80a03fa:	bf00      	nop
 80a03fc:	bf00      	nop
 80a03fe:	bf00      	nop
 80a0400:	bf00      	nop
 80a0402:	bf00      	nop
 80a0404:	bf00      	nop
 80a0406:	bf00      	nop
 80a0408:	bf00      	nop
 80a040a:	bf00      	nop
 80a040c:	bf00      	nop
 80a040e:	bf00      	nop
 80a0410:	bf00      	nop
 80a0412:	bf00      	nop
 80a0414:	bf00      	nop
 80a0416:	bf00      	nop
 80a0418:	bf00      	nop
 80a041a:	bf00      	nop
          // WS2811 spec             1.30us LOW
          // Adafruit on Arduino    (meas. 1.25us)
          // This lib on Spark Core (meas. 1.24us)
          // This lib on Photon     (meas. 1.24us)
          pinSet(pin, LOW); // LOW
 80a041c:	79e3      	ldrb	r3, [r4, #7]
 80a041e:	6810      	ldr	r0, [r2, #0]
 80a0420:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0424:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0428:	88bf      	ldrh	r7, [r7, #4]
 80a042a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a042e:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0430:	4600      	mov	r0, r0
 80a0432:	bf00      	nop
 80a0434:	bf00      	nop
 80a0436:	bf00      	nop
 80a0438:	bf00      	nop
 80a043a:	bf00      	nop
 80a043c:	bf00      	nop
 80a043e:	bf00      	nop
 80a0440:	bf00      	nop
 80a0442:	bf00      	nop
 80a0444:	bf00      	nop
 80a0446:	bf00      	nop
 80a0448:	bf00      	nop
 80a044a:	bf00      	nop
 80a044c:	bf00      	nop
 80a044e:	bf00      	nop
 80a0450:	bf00      	nop
 80a0452:	bf00      	nop
 80a0454:	bf00      	nop
 80a0456:	bf00      	nop
 80a0458:	bf00      	nop
 80a045a:	bf00      	nop
 80a045c:	bf00      	nop
 80a045e:	bf00      	nop
 80a0460:	bf00      	nop
 80a0462:	bf00      	nop
 80a0464:	bf00      	nop
 80a0466:	bf00      	nop
 80a0468:	bf00      	nop
 80a046a:	bf00      	nop
 80a046c:	bf00      	nop
 80a046e:	bf00      	nop
 80a0470:	bf00      	nop
 80a0472:	bf00      	nop
 80a0474:	bf00      	nop
 80a0476:	bf00      	nop
 80a0478:	bf00      	nop
 80a047a:	bf00      	nop
 80a047c:	bf00      	nop
 80a047e:	bf00      	nop
 80a0480:	bf00      	nop
 80a0482:	bf00      	nop
 80a0484:	bf00      	nop
 80a0486:	bf00      	nop
 80a0488:	bf00      	nop
 80a048a:	bf00      	nop
 80a048c:	bf00      	nop
 80a048e:	bf00      	nop
 80a0490:	bf00      	nop
 80a0492:	bf00      	nop
 80a0494:	bf00      	nop
 80a0496:	bf00      	nop
 80a0498:	bf00      	nop
 80a049a:	bf00      	nop
 80a049c:	bf00      	nop
 80a049e:	bf00      	nop
 80a04a0:	bf00      	nop
 80a04a2:	bf00      	nop
 80a04a4:	bf00      	nop
 80a04a6:	bf00      	nop
 80a04a8:	bf00      	nop
 80a04aa:	bf00      	nop
 80a04ac:	bf00      	nop
 80a04ae:	bf00      	nop
 80a04b0:	bf00      	nop
 80a04b2:	bf00      	nop
 80a04b4:	bf00      	nop
 80a04b6:	bf00      	nop
 80a04b8:	bf00      	nop
 80a04ba:	bf00      	nop
 80a04bc:	bf00      	nop
 80a04be:	bf00      	nop
 80a04c0:	bf00      	nop
 80a04c2:	bf00      	nop
 80a04c4:	bf00      	nop
 80a04c6:	bf00      	nop
 80a04c8:	bf00      	nop
 80a04ca:	bf00      	nop
 80a04cc:	bf00      	nop
 80a04ce:	bf00      	nop
 80a04d0:	bf00      	nop
 80a04d2:	bf00      	nop
 80a04d4:	bf00      	nop
 80a04d6:	bf00      	nop
 80a04d8:	bf00      	nop
 80a04da:	bf00      	nop
 80a04dc:	bf00      	nop
 80a04de:	bf00      	nop
 80a04e0:	bf00      	nop
 80a04e2:	bf00      	nop
 80a04e4:	bf00      	nop
 80a04e6:	bf00      	nop
 80a04e8:	bf00      	nop
 80a04ea:	bf00      	nop
 80a04ec:	bf00      	nop
 80a04ee:	bf00      	nop
 80a04f0:	bf00      	nop
 80a04f2:	bf00      	nop
 80a04f4:	bf00      	nop
 80a04f6:	bf00      	nop
 80a04f8:	bf00      	nop
 80a04fa:	bf00      	nop
 80a04fc:	bf00      	nop
 80a04fe:	bf00      	nop
 80a0500:	bf00      	nop
 80a0502:	bf00      	nop
 80a0504:	bf00      	nop
 80a0506:	bf00      	nop
 80a0508:	bf00      	nop
 80a050a:	bf00      	nop
 80a050c:	bf00      	nop
 80a050e:	bf00      	nop
 80a0510:	bf00      	nop
 80a0512:	bf00      	nop
 80a0514:	bf00      	nop
 80a0516:	bf00      	nop
 80a0518:	bf00      	nop
 80a051a:	bf00      	nop
 80a051c:	bf00      	nop
 80a051e:	bf00      	nop
 80a0520:	bf00      	nop
 80a0522:	bf00      	nop
 80a0524:	bf00      	nop
 80a0526:	bf00      	nop
 80a0528:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a052a:	9b04      	ldr	r3, [sp, #16]
 80a052c:	085b      	lsrs	r3, r3, #1
 80a052e:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a0530:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a0534:	3301      	adds	r3, #1
 80a0536:	b2db      	uxtb	r3, r3
 80a0538:	2b17      	cmp	r3, #23
 80a053a:	f88d 3005 	strb.w	r3, [sp, #5]
 80a053e:	f200 8727 	bhi.w	80a1390 <_ZN17Adafruit_NeoPixel4showEv+0x1140>
        pinSet(pin, HIGH); // HIGH
 80a0542:	79e3      	ldrb	r3, [r4, #7]
 80a0544:	6810      	ldr	r0, [r2, #0]
 80a0546:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a054a:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a054e:	88bf      	ldrh	r7, [r7, #4]
 80a0550:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0554:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a0556:	9803      	ldr	r0, [sp, #12]
 80a0558:	9b04      	ldr	r3, [sp, #16]
 80a055a:	4218      	tst	r0, r3
 80a055c:	f47f aeda 	bne.w	80a0314 <_ZN17Adafruit_NeoPixel4showEv+0xc4>
            ::: "r0", "cc", "memory");
 80a0560:	4600      	mov	r0, r0
 80a0562:	bf00      	nop
 80a0564:	bf00      	nop
 80a0566:	bf00      	nop
 80a0568:	bf00      	nop
 80a056a:	bf00      	nop
 80a056c:	bf00      	nop
 80a056e:	bf00      	nop
 80a0570:	bf00      	nop
 80a0572:	bf00      	nop
 80a0574:	bf00      	nop
 80a0576:	bf00      	nop
 80a0578:	bf00      	nop
 80a057a:	bf00      	nop
 80a057c:	bf00      	nop
 80a057e:	bf00      	nop
 80a0580:	bf00      	nop
 80a0582:	bf00      	nop
 80a0584:	bf00      	nop
 80a0586:	bf00      	nop
 80a0588:	bf00      	nop
 80a058a:	bf00      	nop
 80a058c:	bf00      	nop
 80a058e:	bf00      	nop
 80a0590:	bf00      	nop
 80a0592:	bf00      	nop
 80a0594:	bf00      	nop
 80a0596:	bf00      	nop
 80a0598:	bf00      	nop
 80a059a:	bf00      	nop
 80a059c:	bf00      	nop
 80a059e:	bf00      	nop
 80a05a0:	bf00      	nop
 80a05a2:	bf00      	nop
 80a05a4:	bf00      	nop
 80a05a6:	bf00      	nop
 80a05a8:	bf00      	nop
 80a05aa:	bf00      	nop
 80a05ac:	bf00      	nop
 80a05ae:	bf00      	nop
 80a05b0:	bf00      	nop
          pinSet(pin, LOW); // LOW
 80a05b2:	79e3      	ldrb	r3, [r4, #7]
 80a05b4:	6810      	ldr	r0, [r2, #0]
 80a05b6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a05ba:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a05be:	88bf      	ldrh	r7, [r7, #4]
 80a05c0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a05c4:	835f      	strh	r7, [r3, #26]
            ::: "r0", "cc", "memory");
 80a05c6:	4600      	mov	r0, r0
 80a05c8:	bf00      	nop
 80a05ca:	bf00      	nop
 80a05cc:	bf00      	nop
 80a05ce:	bf00      	nop
 80a05d0:	bf00      	nop
 80a05d2:	bf00      	nop
 80a05d4:	bf00      	nop
 80a05d6:	bf00      	nop
 80a05d8:	bf00      	nop
 80a05da:	bf00      	nop
 80a05dc:	bf00      	nop
 80a05de:	bf00      	nop
 80a05e0:	bf00      	nop
 80a05e2:	bf00      	nop
 80a05e4:	bf00      	nop
 80a05e6:	bf00      	nop
 80a05e8:	bf00      	nop
 80a05ea:	bf00      	nop
 80a05ec:	bf00      	nop
 80a05ee:	bf00      	nop
 80a05f0:	bf00      	nop
 80a05f2:	bf00      	nop
 80a05f4:	bf00      	nop
 80a05f6:	bf00      	nop
 80a05f8:	bf00      	nop
 80a05fa:	bf00      	nop
 80a05fc:	bf00      	nop
 80a05fe:	bf00      	nop
 80a0600:	bf00      	nop
 80a0602:	bf00      	nop
 80a0604:	bf00      	nop
 80a0606:	bf00      	nop
 80a0608:	bf00      	nop
 80a060a:	bf00      	nop
 80a060c:	bf00      	nop
 80a060e:	bf00      	nop
 80a0610:	bf00      	nop
 80a0612:	bf00      	nop
 80a0614:	bf00      	nop
 80a0616:	bf00      	nop
 80a0618:	bf00      	nop
 80a061a:	bf00      	nop
 80a061c:	bf00      	nop
 80a061e:	bf00      	nop
 80a0620:	bf00      	nop
 80a0622:	bf00      	nop
 80a0624:	bf00      	nop
 80a0626:	bf00      	nop
 80a0628:	bf00      	nop
 80a062a:	bf00      	nop
 80a062c:	bf00      	nop
 80a062e:	bf00      	nop
 80a0630:	bf00      	nop
 80a0632:	bf00      	nop
 80a0634:	bf00      	nop
 80a0636:	bf00      	nop
 80a0638:	bf00      	nop
 80a063a:	bf00      	nop
 80a063c:	bf00      	nop
 80a063e:	bf00      	nop
 80a0640:	bf00      	nop
 80a0642:	bf00      	nop
 80a0644:	bf00      	nop
 80a0646:	bf00      	nop
 80a0648:	bf00      	nop
 80a064a:	bf00      	nop
 80a064c:	bf00      	nop
 80a064e:	bf00      	nop
 80a0650:	bf00      	nop
 80a0652:	bf00      	nop
 80a0654:	bf00      	nop
 80a0656:	bf00      	nop
 80a0658:	bf00      	nop
 80a065a:	bf00      	nop
 80a065c:	bf00      	nop
 80a065e:	bf00      	nop
 80a0660:	bf00      	nop
 80a0662:	bf00      	nop
 80a0664:	bf00      	nop
 80a0666:	bf00      	nop
 80a0668:	bf00      	nop
 80a066a:	bf00      	nop
 80a066c:	bf00      	nop
 80a066e:	bf00      	nop
 80a0670:	bf00      	nop
 80a0672:	bf00      	nop
 80a0674:	bf00      	nop
 80a0676:	bf00      	nop
 80a0678:	bf00      	nop
 80a067a:	bf00      	nop
 80a067c:	bf00      	nop
 80a067e:	bf00      	nop
 80a0680:	bf00      	nop
 80a0682:	bf00      	nop
 80a0684:	bf00      	nop
 80a0686:	bf00      	nop
 80a0688:	bf00      	nop
 80a068a:	bf00      	nop
 80a068c:	bf00      	nop
 80a068e:	bf00      	nop
 80a0690:	bf00      	nop
 80a0692:	bf00      	nop
 80a0694:	bf00      	nop
 80a0696:	bf00      	nop
 80a0698:	bf00      	nop
 80a069a:	bf00      	nop
 80a069c:	bf00      	nop
 80a069e:	bf00      	nop
 80a06a0:	bf00      	nop
 80a06a2:	bf00      	nop
 80a06a4:	bf00      	nop
 80a06a6:	bf00      	nop
 80a06a8:	bf00      	nop
 80a06aa:	bf00      	nop
 80a06ac:	bf00      	nop
 80a06ae:	bf00      	nop
 80a06b0:	bf00      	nop
 80a06b2:	bf00      	nop
 80a06b4:	bf00      	nop
 80a06b6:	bf00      	nop
 80a06b8:	bf00      	nop
 80a06ba:	bf00      	nop
 80a06bc:	bf00      	nop
 80a06be:	bf00      	nop
 80a06c0:	bf00      	nop
 80a06c2:	bf00      	nop
 80a06c4:	bf00      	nop
 80a06c6:	bf00      	nop
 80a06c8:	bf00      	nop
 80a06ca:	bf00      	nop
 80a06cc:	bf00      	nop
 80a06ce:	bf00      	nop
 80a06d0:	bf00      	nop
 80a06d2:	bf00      	nop
 80a06d4:	bf00      	nop
 80a06d6:	bf00      	nop
 80a06d8:	bf00      	nop
 80a06da:	bf00      	nop
 80a06dc:	bf00      	nop
 80a06de:	bf00      	nop
 80a06e0:	bf00      	nop
 80a06e2:	bf00      	nop
 80a06e4:	bf00      	nop
 80a06e6:	bf00      	nop
 80a06e8:	bf00      	nop
 80a06ea:	bf00      	nop
 80a06ec:	bf00      	nop
 80a06ee:	bf00      	nop
 80a06f0:	bf00      	nop
 80a06f2:	bf00      	nop
 80a06f4:	bf00      	nop
 80a06f6:	bf00      	nop
 80a06f8:	bf00      	nop
 80a06fa:	bf00      	nop
 80a06fc:	bf00      	nop
 80a06fe:	bf00      	nop
 80a0700:	bf00      	nop
 80a0702:	bf00      	nop
 80a0704:	bf00      	nop
 80a0706:	bf00      	nop
 80a0708:	bf00      	nop
 80a070a:	bf00      	nop
 80a070c:	bf00      	nop
 80a070e:	bf00      	nop
 80a0710:	bf00      	nop
 80a0712:	bf00      	nop
 80a0714:	bf00      	nop
 80a0716:	bf00      	nop
 80a0718:	bf00      	nop
 80a071a:	bf00      	nop
 80a071c:	bf00      	nop
 80a071e:	bf00      	nop
 80a0720:	bf00      	nop
 80a0722:	bf00      	nop
 80a0724:	bf00      	nop
 80a0726:	bf00      	nop
 80a0728:	bf00      	nop
 80a072a:	bf00      	nop
 80a072c:	bf00      	nop
 80a072e:	bf00      	nop
 80a0730:	bf00      	nop
 80a0732:	bf00      	nop
 80a0734:	bf00      	nop
 80a0736:	bf00      	nop
 80a0738:	bf00      	nop
 80a073a:	bf00      	nop
 80a073c:	bf00      	nop
 80a073e:	bf00      	nop
 80a0740:	bf00      	nop
 80a0742:	bf00      	nop
 80a0744:	bf00      	nop
 80a0746:	bf00      	nop
 80a0748:	bf00      	nop
 80a074a:	bf00      	nop
 80a074c:	bf00      	nop
 80a074e:	bf00      	nop
 80a0750:	bf00      	nop
 80a0752:	bf00      	nop
 80a0754:	bf00      	nop
 80a0756:	bf00      	nop
 80a0758:	bf00      	nop
 80a075a:	bf00      	nop
 80a075c:	bf00      	nop
 80a075e:	bf00      	nop
 80a0760:	bf00      	nop
 80a0762:	bf00      	nop
 80a0764:	bf00      	nop
 80a0766:	bf00      	nop
 80a0768:	bf00      	nop
 80a076a:	bf00      	nop
 80a076c:	bf00      	nop
 80a076e:	bf00      	nop
 80a0770:	e6db      	b.n	80a052a <_ZN17Adafruit_NeoPixel4showEv+0x2da>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0772:	2b00      	cmp	r3, #0
 80a0774:	f000 8133 	beq.w	80a09de <_ZN17Adafruit_NeoPixel4showEv+0x78e>
      mask = 0x800000; // reset the mask
 80a0778:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      j = 0;        // reset the 24-bit counter
 80a077c:	2600      	movs	r6, #0
 80a077e:	4a13      	ldr	r2, [pc, #76]	; (80a07cc <_ZN17Adafruit_NeoPixel4showEv+0x57c>)
      mask = 0x800000; // reset the mask
 80a0780:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a0782:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      b = *ptr++;   // Next blue byte value
 80a0786:	3103      	adds	r1, #3
      i = i-3;      // decrement bytes remaining
 80a0788:	3b03      	subs	r3, #3
 80a078a:	b29b      	uxth	r3, r3
 80a078c:	f8ad 300a 	strh.w	r3, [sp, #10]
      g = *ptr++;   // Next green byte value
 80a0790:	f811 3c03 	ldrb.w	r3, [r1, #-3]
 80a0794:	b2db      	uxtb	r3, r3
 80a0796:	f88d 3006 	strb.w	r3, [sp, #6]
      r = *ptr++;   // Next red byte value
 80a079a:	f811 3c02 	ldrb.w	r3, [r1, #-2]
 80a079e:	b2db      	uxtb	r3, r3
 80a07a0:	f88d 3007 	strb.w	r3, [sp, #7]
      b = *ptr++;   // Next blue byte value
 80a07a4:	f811 3c01 	ldrb.w	r3, [r1, #-1]
 80a07a8:	b2db      	uxtb	r3, r3
 80a07aa:	f88d 3008 	strb.w	r3, [sp, #8]
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a07ae:	f89d 7006 	ldrb.w	r7, [sp, #6]
 80a07b2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80a07b6:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80a07ba:	021b      	lsls	r3, r3, #8
 80a07bc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80a07c0:	4303      	orrs	r3, r0
 80a07c2:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a07c4:	f88d 6005 	strb.w	r6, [sp, #5]
 80a07c8:	e080      	b.n	80a08cc <_ZN17Adafruit_NeoPixel4showEv+0x67c>
 80a07ca:	bf00      	nop
 80a07cc:	2000008c 	.word	0x2000008c
            ::: "r0", "cc", "memory");
 80a07d0:	4600      	mov	r0, r0
 80a07d2:	bf00      	nop
 80a07d4:	bf00      	nop
 80a07d6:	bf00      	nop
 80a07d8:	bf00      	nop
 80a07da:	bf00      	nop
 80a07dc:	bf00      	nop
 80a07de:	bf00      	nop
 80a07e0:	bf00      	nop
 80a07e2:	bf00      	nop
 80a07e4:	bf00      	nop
 80a07e6:	bf00      	nop
 80a07e8:	bf00      	nop
 80a07ea:	bf00      	nop
 80a07ec:	bf00      	nop
 80a07ee:	bf00      	nop
 80a07f0:	bf00      	nop
 80a07f2:	bf00      	nop
 80a07f4:	bf00      	nop
 80a07f6:	bf00      	nop
 80a07f8:	bf00      	nop
 80a07fa:	bf00      	nop
 80a07fc:	bf00      	nop
 80a07fe:	bf00      	nop
 80a0800:	bf00      	nop
 80a0802:	bf00      	nop
 80a0804:	bf00      	nop
 80a0806:	bf00      	nop
 80a0808:	bf00      	nop
 80a080a:	bf00      	nop
 80a080c:	bf00      	nop
 80a080e:	bf00      	nop
 80a0810:	bf00      	nop
 80a0812:	bf00      	nop
 80a0814:	bf00      	nop
 80a0816:	bf00      	nop
 80a0818:	bf00      	nop
 80a081a:	bf00      	nop
 80a081c:	bf00      	nop
 80a081e:	bf00      	nop
 80a0820:	bf00      	nop
 80a0822:	bf00      	nop
 80a0824:	bf00      	nop
 80a0826:	bf00      	nop
 80a0828:	bf00      	nop
 80a082a:	bf00      	nop
 80a082c:	bf00      	nop
 80a082e:	bf00      	nop
 80a0830:	bf00      	nop
 80a0832:	bf00      	nop
 80a0834:	bf00      	nop
 80a0836:	bf00      	nop
 80a0838:	bf00      	nop
 80a083a:	bf00      	nop
 80a083c:	bf00      	nop
 80a083e:	bf00      	nop
 80a0840:	bf00      	nop
 80a0842:	bf00      	nop
 80a0844:	bf00      	nop
 80a0846:	bf00      	nop
 80a0848:	bf00      	nop
 80a084a:	bf00      	nop
 80a084c:	bf00      	nop
 80a084e:	bf00      	nop
 80a0850:	bf00      	nop
 80a0852:	bf00      	nop
 80a0854:	bf00      	nop
 80a0856:	bf00      	nop
 80a0858:	bf00      	nop
 80a085a:	bf00      	nop
 80a085c:	bf00      	nop
 80a085e:	bf00      	nop
 80a0860:	bf00      	nop
 80a0862:	bf00      	nop
 80a0864:	bf00      	nop
 80a0866:	bf00      	nop
 80a0868:	bf00      	nop
          pinSet(pin, LOW); // LOW
 80a086a:	79e3      	ldrb	r3, [r4, #7]
 80a086c:	6810      	ldr	r0, [r2, #0]
 80a086e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0872:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0876:	88bf      	ldrh	r7, [r7, #4]
 80a0878:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a087c:	835f      	strh	r7, [r3, #26]
            ::: "r0", "cc", "memory");
 80a087e:	4600      	mov	r0, r0
 80a0880:	bf00      	nop
 80a0882:	bf00      	nop
 80a0884:	bf00      	nop
 80a0886:	bf00      	nop
 80a0888:	bf00      	nop
 80a088a:	bf00      	nop
 80a088c:	bf00      	nop
 80a088e:	bf00      	nop
 80a0890:	bf00      	nop
 80a0892:	bf00      	nop
 80a0894:	bf00      	nop
 80a0896:	bf00      	nop
 80a0898:	bf00      	nop
 80a089a:	bf00      	nop
 80a089c:	bf00      	nop
 80a089e:	bf00      	nop
 80a08a0:	bf00      	nop
 80a08a2:	bf00      	nop
 80a08a4:	bf00      	nop
 80a08a6:	bf00      	nop
 80a08a8:	bf00      	nop
 80a08aa:	bf00      	nop
 80a08ac:	bf00      	nop
 80a08ae:	bf00      	nop
 80a08b0:	bf00      	nop
 80a08b2:	bf00      	nop
        mask >>= 1;
 80a08b4:	9b04      	ldr	r3, [sp, #16]
 80a08b6:	085b      	lsrs	r3, r3, #1
 80a08b8:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a08ba:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a08be:	3301      	adds	r3, #1
 80a08c0:	b2db      	uxtb	r3, r3
 80a08c2:	2b17      	cmp	r3, #23
 80a08c4:	f88d 3005 	strb.w	r3, [sp, #5]
 80a08c8:	f200 8083 	bhi.w	80a09d2 <_ZN17Adafruit_NeoPixel4showEv+0x782>
        pinSet(pin, HIGH); // HIGH
 80a08cc:	79e3      	ldrb	r3, [r4, #7]
 80a08ce:	6810      	ldr	r0, [r2, #0]
 80a08d0:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a08d4:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a08d8:	88bf      	ldrh	r7, [r7, #4]
 80a08da:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a08de:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a08e0:	9803      	ldr	r0, [sp, #12]
 80a08e2:	9b04      	ldr	r3, [sp, #16]
 80a08e4:	4218      	tst	r0, r3
 80a08e6:	f47f af73 	bne.w	80a07d0 <_ZN17Adafruit_NeoPixel4showEv+0x580>
            ::: "r0", "cc", "memory");
 80a08ea:	4600      	mov	r0, r0
 80a08ec:	bf00      	nop
 80a08ee:	bf00      	nop
 80a08f0:	bf00      	nop
 80a08f2:	bf00      	nop
 80a08f4:	bf00      	nop
 80a08f6:	bf00      	nop
 80a08f8:	bf00      	nop
 80a08fa:	bf00      	nop
 80a08fc:	bf00      	nop
 80a08fe:	bf00      	nop
 80a0900:	bf00      	nop
 80a0902:	bf00      	nop
 80a0904:	bf00      	nop
 80a0906:	bf00      	nop
 80a0908:	bf00      	nop
 80a090a:	bf00      	nop
 80a090c:	bf00      	nop
 80a090e:	bf00      	nop
 80a0910:	bf00      	nop
          pinSet(pin, LOW); // LOW
 80a0912:	79e3      	ldrb	r3, [r4, #7]
 80a0914:	6810      	ldr	r0, [r2, #0]
 80a0916:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a091a:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a091e:	88bf      	ldrh	r7, [r7, #4]
 80a0920:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0924:	835f      	strh	r7, [r3, #26]
            ::: "r0", "cc", "memory");
 80a0926:	4600      	mov	r0, r0
 80a0928:	bf00      	nop
 80a092a:	bf00      	nop
 80a092c:	bf00      	nop
 80a092e:	bf00      	nop
 80a0930:	bf00      	nop
 80a0932:	bf00      	nop
 80a0934:	bf00      	nop
 80a0936:	bf00      	nop
 80a0938:	bf00      	nop
 80a093a:	bf00      	nop
 80a093c:	bf00      	nop
 80a093e:	bf00      	nop
 80a0940:	bf00      	nop
 80a0942:	bf00      	nop
 80a0944:	bf00      	nop
 80a0946:	bf00      	nop
 80a0948:	bf00      	nop
 80a094a:	bf00      	nop
 80a094c:	bf00      	nop
 80a094e:	bf00      	nop
 80a0950:	bf00      	nop
 80a0952:	bf00      	nop
 80a0954:	bf00      	nop
 80a0956:	bf00      	nop
 80a0958:	bf00      	nop
 80a095a:	bf00      	nop
 80a095c:	bf00      	nop
 80a095e:	bf00      	nop
 80a0960:	bf00      	nop
 80a0962:	bf00      	nop
 80a0964:	bf00      	nop
 80a0966:	bf00      	nop
 80a0968:	bf00      	nop
 80a096a:	bf00      	nop
 80a096c:	bf00      	nop
 80a096e:	bf00      	nop
 80a0970:	bf00      	nop
 80a0972:	bf00      	nop
 80a0974:	bf00      	nop
 80a0976:	bf00      	nop
 80a0978:	bf00      	nop
 80a097a:	bf00      	nop
 80a097c:	bf00      	nop
 80a097e:	bf00      	nop
 80a0980:	bf00      	nop
 80a0982:	bf00      	nop
 80a0984:	bf00      	nop
 80a0986:	bf00      	nop
 80a0988:	bf00      	nop
 80a098a:	bf00      	nop
 80a098c:	bf00      	nop
 80a098e:	bf00      	nop
 80a0990:	bf00      	nop
 80a0992:	bf00      	nop
 80a0994:	bf00      	nop
 80a0996:	bf00      	nop
 80a0998:	bf00      	nop
 80a099a:	bf00      	nop
 80a099c:	bf00      	nop
 80a099e:	bf00      	nop
 80a09a0:	bf00      	nop
 80a09a2:	bf00      	nop
 80a09a4:	bf00      	nop
 80a09a6:	bf00      	nop
 80a09a8:	bf00      	nop
 80a09aa:	bf00      	nop
 80a09ac:	bf00      	nop
 80a09ae:	bf00      	nop
 80a09b0:	bf00      	nop
 80a09b2:	bf00      	nop
 80a09b4:	bf00      	nop
 80a09b6:	bf00      	nop
 80a09b8:	bf00      	nop
 80a09ba:	bf00      	nop
 80a09bc:	bf00      	nop
 80a09be:	bf00      	nop
 80a09c0:	bf00      	nop
 80a09c2:	bf00      	nop
 80a09c4:	bf00      	nop
 80a09c6:	bf00      	nop
 80a09c8:	bf00      	nop
 80a09ca:	bf00      	nop
 80a09cc:	bf00      	nop
 80a09ce:	bf00      	nop
 80a09d0:	e770      	b.n	80a08b4 <_ZN17Adafruit_NeoPixel4showEv+0x664>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a09d2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a09d6:	b29b      	uxth	r3, r3
 80a09d8:	2b00      	cmp	r3, #0
 80a09da:	f47f aed1 	bne.w	80a0780 <_ZN17Adafruit_NeoPixel4showEv+0x530>
  __ASM volatile ("cpsie i");
 80a09de:	b662      	cpsie	i
 80a09e0:	f000 fd7c 	bl	80a14dc <HAL_Timer_Get_Micro_Seconds>
  }
// END of NRF52 implementation


#endif
  endTime = micros(); // Save EOD time for latch on next call
 80a09e4:	6120      	str	r0, [r4, #16]
}
 80a09e6:	b007      	add	sp, #28
 80a09e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a09ea:	2b00      	cmp	r3, #0
 80a09ec:	d0f7      	beq.n	80a09de <_ZN17Adafruit_NeoPixel4showEv+0x78e>
      mask = 0x800000; // reset the mask
 80a09ee:	f44f 0e00 	mov.w	lr, #8388608	; 0x800000
      j = 0;        // reset the 24-bit counter
 80a09f2:	2600      	movs	r6, #0
        pinSet(pin, HIGH); // HIGH
 80a09f4:	4b54      	ldr	r3, [pc, #336]	; (80a0b48 <_ZN17Adafruit_NeoPixel4showEv+0x8f8>)
 80a09f6:	6818      	ldr	r0, [r3, #0]
        cyc = DWT->CYCCNT;
 80a09f8:	4b54      	ldr	r3, [pc, #336]	; (80a0b4c <_ZN17Adafruit_NeoPixel4showEv+0x8fc>)
      mask = 0x800000; // reset the mask
 80a09fa:	f8cd e010 	str.w	lr, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a09fe:	f8bd 200a 	ldrh.w	r2, [sp, #10]
      b = *ptr++;   // Next blue byte value
 80a0a02:	3103      	adds	r1, #3
      i = i-3;      // decrement bytes remaining
 80a0a04:	3a03      	subs	r2, #3
 80a0a06:	b292      	uxth	r2, r2
 80a0a08:	f8ad 200a 	strh.w	r2, [sp, #10]
      g = *ptr++;   // Next green byte value
 80a0a0c:	f811 2c03 	ldrb.w	r2, [r1, #-3]
 80a0a10:	b2d2      	uxtb	r2, r2
 80a0a12:	f88d 2006 	strb.w	r2, [sp, #6]
      r = *ptr++;   // Next red byte value
 80a0a16:	f811 2c02 	ldrb.w	r2, [r1, #-2]
 80a0a1a:	b2d2      	uxtb	r2, r2
 80a0a1c:	f88d 2007 	strb.w	r2, [sp, #7]
      b = *ptr++;   // Next blue byte value
 80a0a20:	f811 2c01 	ldrb.w	r2, [r1, #-1]
 80a0a24:	b2d2      	uxtb	r2, r2
 80a0a26:	f88d 2008 	strb.w	r2, [sp, #8]
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a0a2a:	f89d c006 	ldrb.w	ip, [sp, #6]
 80a0a2e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80a0a32:	f89d 7008 	ldrb.w	r7, [sp, #8]
 80a0a36:	0212      	lsls	r2, r2, #8
 80a0a38:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 80a0a3c:	433a      	orrs	r2, r7
 80a0a3e:	9203      	str	r2, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a0a40:	f88d 6005 	strb.w	r6, [sp, #5]
        pinSet(pin, HIGH); // HIGH
 80a0a44:	79e2      	ldrb	r2, [r4, #7]
        cyc = DWT->CYCCNT;
 80a0a46:	685d      	ldr	r5, [r3, #4]
        pinSet(pin, HIGH); // HIGH
 80a0a48:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a0a4c:	eb00 0782 	add.w	r7, r0, r2, lsl #2
 80a0a50:	88bf      	ldrh	r7, [r7, #4]
 80a0a52:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
        cyc = DWT->CYCCNT;
 80a0a56:	9505      	str	r5, [sp, #20]
        pinSet(pin, HIGH); // HIGH
 80a0a58:	8317      	strh	r7, [r2, #24]
        if (c & mask) { // if masked bit is high
 80a0a5a:	9f03      	ldr	r7, [sp, #12]
 80a0a5c:	9a04      	ldr	r2, [sp, #16]
 80a0a5e:	4217      	tst	r7, r2
 80a0a60:	d025      	beq.n	80a0aae <_ZN17Adafruit_NeoPixel4showEv+0x85e>
          while(DWT->CYCCNT - cyc < CYCLES_800_T1H);
 80a0a62:	685a      	ldr	r2, [r3, #4]
 80a0a64:	9f05      	ldr	r7, [sp, #20]
 80a0a66:	1bd2      	subs	r2, r2, r7
 80a0a68:	2a4f      	cmp	r2, #79	; 0x4f
 80a0a6a:	d9fa      	bls.n	80a0a62 <_ZN17Adafruit_NeoPixel4showEv+0x812>
          pinSet(pin, LOW);
 80a0a6c:	79e2      	ldrb	r2, [r4, #7]
 80a0a6e:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a0a72:	eb00 0782 	add.w	r7, r0, r2, lsl #2
 80a0a76:	88bf      	ldrh	r7, [r7, #4]
 80a0a78:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 80a0a7c:	8357      	strh	r7, [r2, #26]
          cyc = DWT->CYCCNT;
 80a0a7e:	685a      	ldr	r2, [r3, #4]
 80a0a80:	9205      	str	r2, [sp, #20]
          while(DWT->CYCCNT - cyc < CYCLES_800_T1L);
 80a0a82:	685a      	ldr	r2, [r3, #4]
 80a0a84:	9f05      	ldr	r7, [sp, #20]
 80a0a86:	1bd2      	subs	r2, r2, r7
 80a0a88:	2a07      	cmp	r2, #7
 80a0a8a:	d9fa      	bls.n	80a0a82 <_ZN17Adafruit_NeoPixel4showEv+0x832>
        mask >>= 1;
 80a0a8c:	9a04      	ldr	r2, [sp, #16]
 80a0a8e:	0852      	lsrs	r2, r2, #1
 80a0a90:	9204      	str	r2, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a0a92:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80a0a96:	3201      	adds	r2, #1
 80a0a98:	b2d2      	uxtb	r2, r2
 80a0a9a:	2a17      	cmp	r2, #23
 80a0a9c:	f88d 2005 	strb.w	r2, [sp, #5]
 80a0aa0:	d9d0      	bls.n	80a0a44 <_ZN17Adafruit_NeoPixel4showEv+0x7f4>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0aa2:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80a0aa6:	b292      	uxth	r2, r2
 80a0aa8:	2a00      	cmp	r2, #0
 80a0aaa:	d1a6      	bne.n	80a09fa <_ZN17Adafruit_NeoPixel4showEv+0x7aa>
 80a0aac:	e797      	b.n	80a09de <_ZN17Adafruit_NeoPixel4showEv+0x78e>
          while(DWT->CYCCNT - cyc < CYCLES_800_T0H);
 80a0aae:	685a      	ldr	r2, [r3, #4]
 80a0ab0:	9f05      	ldr	r7, [sp, #20]
 80a0ab2:	1bd2      	subs	r2, r2, r7
 80a0ab4:	2a18      	cmp	r2, #24
 80a0ab6:	d9fa      	bls.n	80a0aae <_ZN17Adafruit_NeoPixel4showEv+0x85e>
          pinSet(pin, LOW);
 80a0ab8:	79e2      	ldrb	r2, [r4, #7]
 80a0aba:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a0abe:	eb00 0782 	add.w	r7, r0, r2, lsl #2
 80a0ac2:	88bf      	ldrh	r7, [r7, #4]
 80a0ac4:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 80a0ac8:	8357      	strh	r7, [r2, #26]
          cyc = DWT->CYCCNT;
 80a0aca:	685a      	ldr	r2, [r3, #4]
 80a0acc:	9205      	str	r2, [sp, #20]
          while(DWT->CYCCNT - cyc < CYCLES_800_T0L);
 80a0ace:	685a      	ldr	r2, [r3, #4]
 80a0ad0:	9f05      	ldr	r7, [sp, #20]
 80a0ad2:	1bd2      	subs	r2, r2, r7
 80a0ad4:	2a45      	cmp	r2, #69	; 0x45
 80a0ad6:	d9fa      	bls.n	80a0ace <_ZN17Adafruit_NeoPixel4showEv+0x87e>
 80a0ad8:	e7d8      	b.n	80a0a8c <_ZN17Adafruit_NeoPixel4showEv+0x83c>
 80a0ada:	4770      	bx	lr
    while(i) { // While bytes left... (4 bytes = 1 pixel)
 80a0adc:	2b00      	cmp	r3, #0
 80a0ade:	f43f af7e 	beq.w	80a09de <_ZN17Adafruit_NeoPixel4showEv+0x78e>
      mask = 0x80000000; // reset the mask
 80a0ae2:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
      j = 0;        // reset the 32-bit counter
 80a0ae6:	2600      	movs	r6, #0
 80a0ae8:	4a17      	ldr	r2, [pc, #92]	; (80a0b48 <_ZN17Adafruit_NeoPixel4showEv+0x8f8>)
      mask = 0x80000000; // reset the mask
 80a0aea:	9504      	str	r5, [sp, #16]
      i = i-4;      // decrement bytes remaining
 80a0aec:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      w = *ptr++;   // Next white byte value
 80a0af0:	3104      	adds	r1, #4
      i = i-4;      // decrement bytes remaining
 80a0af2:	3b04      	subs	r3, #4
 80a0af4:	b29b      	uxth	r3, r3
 80a0af6:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a0afa:	f811 3c04 	ldrb.w	r3, [r1, #-4]
 80a0afe:	b2db      	uxtb	r3, r3
 80a0b00:	f88d 3007 	strb.w	r3, [sp, #7]
      g = *ptr++;   // Next green byte value
 80a0b04:	f811 3c03 	ldrb.w	r3, [r1, #-3]
 80a0b08:	b2db      	uxtb	r3, r3
 80a0b0a:	f88d 3006 	strb.w	r3, [sp, #6]
      b = *ptr++;   // Next blue byte value
 80a0b0e:	f811 3c02 	ldrb.w	r3, [r1, #-2]
 80a0b12:	b2db      	uxtb	r3, r3
 80a0b14:	f88d 3008 	strb.w	r3, [sp, #8]
      w = *ptr++;   // Next white byte value
 80a0b18:	f811 3c01 	ldrb.w	r3, [r1, #-1]
 80a0b1c:	b2db      	uxtb	r3, r3
 80a0b1e:	f88d 3009 	strb.w	r3, [sp, #9]
      c = ((uint32_t)r << 24) | ((uint32_t)g << 16) | ((uint32_t)b <<  8) | w; // Pack the next 4 bytes to keep timing tight
 80a0b22:	f89d c007 	ldrb.w	ip, [sp, #7]
 80a0b26:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a0b2a:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80a0b2e:	041b      	lsls	r3, r3, #16
 80a0b30:	f89d 7009 	ldrb.w	r7, [sp, #9]
 80a0b34:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
 80a0b38:	433b      	orrs	r3, r7
 80a0b3a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80a0b3e:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 32-bit counter
 80a0b40:	f88d 6005 	strb.w	r6, [sp, #5]
 80a0b44:	e07f      	b.n	80a0c46 <_ZN17Adafruit_NeoPixel4showEv+0x9f6>
 80a0b46:	bf00      	nop
 80a0b48:	2000008c 	.word	0x2000008c
 80a0b4c:	e0001000 	.word	0xe0001000
            ::: "r0", "cc", "memory");
 80a0b50:	4600      	mov	r0, r0
 80a0b52:	bf00      	nop
 80a0b54:	bf00      	nop
 80a0b56:	bf00      	nop
 80a0b58:	bf00      	nop
 80a0b5a:	bf00      	nop
 80a0b5c:	bf00      	nop
 80a0b5e:	bf00      	nop
 80a0b60:	bf00      	nop
 80a0b62:	bf00      	nop
 80a0b64:	bf00      	nop
 80a0b66:	bf00      	nop
 80a0b68:	bf00      	nop
 80a0b6a:	bf00      	nop
 80a0b6c:	bf00      	nop
 80a0b6e:	bf00      	nop
 80a0b70:	bf00      	nop
 80a0b72:	bf00      	nop
 80a0b74:	bf00      	nop
 80a0b76:	bf00      	nop
 80a0b78:	bf00      	nop
 80a0b7a:	bf00      	nop
 80a0b7c:	bf00      	nop
 80a0b7e:	bf00      	nop
 80a0b80:	bf00      	nop
 80a0b82:	bf00      	nop
 80a0b84:	bf00      	nop
 80a0b86:	bf00      	nop
 80a0b88:	bf00      	nop
 80a0b8a:	bf00      	nop
 80a0b8c:	bf00      	nop
 80a0b8e:	bf00      	nop
 80a0b90:	bf00      	nop
 80a0b92:	bf00      	nop
 80a0b94:	bf00      	nop
 80a0b96:	bf00      	nop
 80a0b98:	bf00      	nop
 80a0b9a:	bf00      	nop
 80a0b9c:	bf00      	nop
 80a0b9e:	bf00      	nop
 80a0ba0:	bf00      	nop
 80a0ba2:	bf00      	nop
 80a0ba4:	bf00      	nop
 80a0ba6:	bf00      	nop
 80a0ba8:	bf00      	nop
 80a0baa:	bf00      	nop
 80a0bac:	bf00      	nop
 80a0bae:	bf00      	nop
 80a0bb0:	bf00      	nop
 80a0bb2:	bf00      	nop
 80a0bb4:	bf00      	nop
 80a0bb6:	bf00      	nop
 80a0bb8:	bf00      	nop
 80a0bba:	bf00      	nop
 80a0bbc:	bf00      	nop
          pinSet(pin, LOW); // LOW
 80a0bbe:	79e3      	ldrb	r3, [r4, #7]
 80a0bc0:	6810      	ldr	r0, [r2, #0]
 80a0bc2:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0bc6:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0bca:	88bf      	ldrh	r7, [r7, #4]
 80a0bcc:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0bd0:	835f      	strh	r7, [r3, #26]
            ::: "r0", "cc", "memory");
 80a0bd2:	4600      	mov	r0, r0
 80a0bd4:	bf00      	nop
 80a0bd6:	bf00      	nop
 80a0bd8:	bf00      	nop
 80a0bda:	bf00      	nop
 80a0bdc:	bf00      	nop
 80a0bde:	bf00      	nop
 80a0be0:	bf00      	nop
 80a0be2:	bf00      	nop
 80a0be4:	bf00      	nop
 80a0be6:	bf00      	nop
 80a0be8:	bf00      	nop
 80a0bea:	bf00      	nop
 80a0bec:	bf00      	nop
 80a0bee:	bf00      	nop
 80a0bf0:	bf00      	nop
 80a0bf2:	bf00      	nop
 80a0bf4:	bf00      	nop
 80a0bf6:	bf00      	nop
 80a0bf8:	bf00      	nop
 80a0bfa:	bf00      	nop
 80a0bfc:	bf00      	nop
 80a0bfe:	bf00      	nop
 80a0c00:	bf00      	nop
 80a0c02:	bf00      	nop
 80a0c04:	bf00      	nop
 80a0c06:	bf00      	nop
 80a0c08:	bf00      	nop
 80a0c0a:	bf00      	nop
 80a0c0c:	bf00      	nop
 80a0c0e:	bf00      	nop
 80a0c10:	bf00      	nop
 80a0c12:	bf00      	nop
 80a0c14:	bf00      	nop
 80a0c16:	bf00      	nop
 80a0c18:	bf00      	nop
 80a0c1a:	bf00      	nop
 80a0c1c:	bf00      	nop
 80a0c1e:	bf00      	nop
 80a0c20:	bf00      	nop
 80a0c22:	bf00      	nop
 80a0c24:	bf00      	nop
 80a0c26:	bf00      	nop
 80a0c28:	bf00      	nop
 80a0c2a:	bf00      	nop
 80a0c2c:	bf00      	nop
 80a0c2e:	bf00      	nop
        mask >>= 1;
 80a0c30:	9b04      	ldr	r3, [sp, #16]
 80a0c32:	085b      	lsrs	r3, r3, #1
 80a0c34:	9304      	str	r3, [sp, #16]
      } while ( ++j < 32 ); // ... pixel done
 80a0c36:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a0c3a:	3301      	adds	r3, #1
 80a0c3c:	b2db      	uxtb	r3, r3
 80a0c3e:	2b1f      	cmp	r3, #31
 80a0c40:	f88d 3005 	strb.w	r3, [sp, #5]
 80a0c44:	d87e      	bhi.n	80a0d44 <_ZN17Adafruit_NeoPixel4showEv+0xaf4>
        pinSet(pin, HIGH); // HIGH
 80a0c46:	79e3      	ldrb	r3, [r4, #7]
 80a0c48:	6810      	ldr	r0, [r2, #0]
 80a0c4a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0c4e:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0c52:	88bf      	ldrh	r7, [r7, #4]
 80a0c54:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0c58:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a0c5a:	9803      	ldr	r0, [sp, #12]
 80a0c5c:	9b04      	ldr	r3, [sp, #16]
 80a0c5e:	4218      	tst	r0, r3
 80a0c60:	f47f af76 	bne.w	80a0b50 <_ZN17Adafruit_NeoPixel4showEv+0x900>
            ::: "r0", "cc", "memory");
 80a0c64:	4600      	mov	r0, r0
 80a0c66:	bf00      	nop
 80a0c68:	bf00      	nop
 80a0c6a:	bf00      	nop
 80a0c6c:	bf00      	nop
 80a0c6e:	bf00      	nop
 80a0c70:	bf00      	nop
 80a0c72:	bf00      	nop
 80a0c74:	bf00      	nop
 80a0c76:	bf00      	nop
 80a0c78:	bf00      	nop
 80a0c7a:	bf00      	nop
 80a0c7c:	bf00      	nop
 80a0c7e:	bf00      	nop
 80a0c80:	bf00      	nop
 80a0c82:	bf00      	nop
 80a0c84:	bf00      	nop
 80a0c86:	bf00      	nop
 80a0c88:	bf00      	nop
 80a0c8a:	bf00      	nop
          pinSet(pin, LOW); // LOW
 80a0c8c:	79e3      	ldrb	r3, [r4, #7]
 80a0c8e:	6810      	ldr	r0, [r2, #0]
 80a0c90:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0c94:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0c98:	88bf      	ldrh	r7, [r7, #4]
 80a0c9a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0c9e:	835f      	strh	r7, [r3, #26]
            ::: "r0", "cc", "memory");
 80a0ca0:	4600      	mov	r0, r0
 80a0ca2:	bf00      	nop
 80a0ca4:	bf00      	nop
 80a0ca6:	bf00      	nop
 80a0ca8:	bf00      	nop
 80a0caa:	bf00      	nop
 80a0cac:	bf00      	nop
 80a0cae:	bf00      	nop
 80a0cb0:	bf00      	nop
 80a0cb2:	bf00      	nop
 80a0cb4:	bf00      	nop
 80a0cb6:	bf00      	nop
 80a0cb8:	bf00      	nop
 80a0cba:	bf00      	nop
 80a0cbc:	bf00      	nop
 80a0cbe:	bf00      	nop
 80a0cc0:	bf00      	nop
 80a0cc2:	bf00      	nop
 80a0cc4:	bf00      	nop
 80a0cc6:	bf00      	nop
 80a0cc8:	bf00      	nop
 80a0cca:	bf00      	nop
 80a0ccc:	bf00      	nop
 80a0cce:	bf00      	nop
 80a0cd0:	bf00      	nop
 80a0cd2:	bf00      	nop
 80a0cd4:	bf00      	nop
 80a0cd6:	bf00      	nop
 80a0cd8:	bf00      	nop
 80a0cda:	bf00      	nop
 80a0cdc:	bf00      	nop
 80a0cde:	bf00      	nop
 80a0ce0:	bf00      	nop
 80a0ce2:	bf00      	nop
 80a0ce4:	bf00      	nop
 80a0ce6:	bf00      	nop
 80a0ce8:	bf00      	nop
 80a0cea:	bf00      	nop
 80a0cec:	bf00      	nop
 80a0cee:	bf00      	nop
 80a0cf0:	bf00      	nop
 80a0cf2:	bf00      	nop
 80a0cf4:	bf00      	nop
 80a0cf6:	bf00      	nop
 80a0cf8:	bf00      	nop
 80a0cfa:	bf00      	nop
 80a0cfc:	bf00      	nop
 80a0cfe:	bf00      	nop
 80a0d00:	bf00      	nop
 80a0d02:	bf00      	nop
 80a0d04:	bf00      	nop
 80a0d06:	bf00      	nop
 80a0d08:	bf00      	nop
 80a0d0a:	bf00      	nop
 80a0d0c:	bf00      	nop
 80a0d0e:	bf00      	nop
 80a0d10:	bf00      	nop
 80a0d12:	bf00      	nop
 80a0d14:	bf00      	nop
 80a0d16:	bf00      	nop
 80a0d18:	bf00      	nop
 80a0d1a:	bf00      	nop
 80a0d1c:	bf00      	nop
 80a0d1e:	bf00      	nop
 80a0d20:	bf00      	nop
 80a0d22:	bf00      	nop
 80a0d24:	bf00      	nop
 80a0d26:	bf00      	nop
 80a0d28:	bf00      	nop
 80a0d2a:	bf00      	nop
 80a0d2c:	bf00      	nop
 80a0d2e:	bf00      	nop
 80a0d30:	bf00      	nop
 80a0d32:	bf00      	nop
 80a0d34:	bf00      	nop
 80a0d36:	bf00      	nop
 80a0d38:	bf00      	nop
 80a0d3a:	bf00      	nop
 80a0d3c:	bf00      	nop
 80a0d3e:	bf00      	nop
 80a0d40:	bf00      	nop
 80a0d42:	e775      	b.n	80a0c30 <_ZN17Adafruit_NeoPixel4showEv+0x9e0>
    while(i) { // While bytes left... (4 bytes = 1 pixel)
 80a0d44:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a0d48:	b29b      	uxth	r3, r3
 80a0d4a:	2b00      	cmp	r3, #0
 80a0d4c:	f47f aecd 	bne.w	80a0aea <_ZN17Adafruit_NeoPixel4showEv+0x89a>
 80a0d50:	e645      	b.n	80a09de <_ZN17Adafruit_NeoPixel4showEv+0x78e>
  else if(type == TM1803) { // TM1803 (Radio Shack Tri-Color Strip), 400 KHz bitstream
 80a0d52:	2d03      	cmp	r5, #3
 80a0d54:	f000 812b 	beq.w	80a0fae <_ZN17Adafruit_NeoPixel4showEv+0xd5e>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0d58:	2b00      	cmp	r3, #0
 80a0d5a:	f43f ae40 	beq.w	80a09de <_ZN17Adafruit_NeoPixel4showEv+0x78e>
      mask = 0x800000; // reset the mask
 80a0d5e:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      j = 0;        // reset the 24-bit counter
 80a0d62:	2600      	movs	r6, #0
 80a0d64:	4a17      	ldr	r2, [pc, #92]	; (80a0dc4 <_ZN17Adafruit_NeoPixel4showEv+0xb74>)
      mask = 0x800000; // reset the mask
 80a0d66:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a0d68:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      pinSet(pin, LOW); // LOW
 80a0d6c:	79e0      	ldrb	r0, [r4, #7]
      i = i-3;      // decrement bytes remaining
 80a0d6e:	3b03      	subs	r3, #3
 80a0d70:	b29b      	uxth	r3, r3
 80a0d72:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a0d76:	780b      	ldrb	r3, [r1, #0]
      pinSet(pin, LOW); // LOW
 80a0d78:	6817      	ldr	r7, [r2, #0]
      r = *ptr++;   // Next red byte value
 80a0d7a:	b2db      	uxtb	r3, r3
 80a0d7c:	f88d 3007 	strb.w	r3, [sp, #7]
      b = *ptr++;   // Next blue byte value
 80a0d80:	784b      	ldrb	r3, [r1, #1]
      pinSet(pin, LOW); // LOW
 80a0d82:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
      b = *ptr++;   // Next blue byte value
 80a0d86:	b2db      	uxtb	r3, r3
 80a0d88:	f88d 3008 	strb.w	r3, [sp, #8]
      g = *ptr++;   // Next green byte value
 80a0d8c:	788b      	ldrb	r3, [r1, #2]
      pinSet(pin, LOW); // LOW
 80a0d8e:	eb07 0c80 	add.w	ip, r7, r0, lsl #2
      g = *ptr++;   // Next green byte value
 80a0d92:	b2db      	uxtb	r3, r3
 80a0d94:	f88d 3006 	strb.w	r3, [sp, #6]
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a0d98:	f89d e007 	ldrb.w	lr, [sp, #7]
 80a0d9c:	f89d 3008 	ldrb.w	r3, [sp, #8]
      pinSet(pin, LOW); // LOW
 80a0da0:	f8bc c004 	ldrh.w	ip, [ip, #4]
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a0da4:	021b      	lsls	r3, r3, #8
 80a0da6:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 80a0daa:	f89d e006 	ldrb.w	lr, [sp, #6]
      pinSet(pin, LOW); // LOW
 80a0dae:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a0db2:	ea43 030e 	orr.w	r3, r3, lr
 80a0db6:	9303      	str	r3, [sp, #12]
      g = *ptr++;   // Next green byte value
 80a0db8:	3103      	adds	r1, #3
      j = 0;        // reset the 24-bit counter
 80a0dba:	f88d 6005 	strb.w	r6, [sp, #5]
      pinSet(pin, LOW); // LOW
 80a0dbe:	f8a0 c01a 	strh.w	ip, [r0, #26]
 80a0dc2:	e07c      	b.n	80a0ebe <_ZN17Adafruit_NeoPixel4showEv+0xc6e>
 80a0dc4:	2000008c 	.word	0x2000008c
          mask >>= 1; // Do this task during the long delay of this bit
 80a0dc8:	9b04      	ldr	r3, [sp, #16]
 80a0dca:	085b      	lsrs	r3, r3, #1
 80a0dcc:	9304      	str	r3, [sp, #16]
            ::: "r0", "cc", "memory");
 80a0dce:	4600      	mov	r0, r0
 80a0dd0:	bf00      	nop
 80a0dd2:	bf00      	nop
 80a0dd4:	bf00      	nop
 80a0dd6:	bf00      	nop
 80a0dd8:	bf00      	nop
 80a0dda:	bf00      	nop
 80a0ddc:	bf00      	nop
 80a0dde:	bf00      	nop
 80a0de0:	bf00      	nop
 80a0de2:	bf00      	nop
 80a0de4:	bf00      	nop
 80a0de6:	bf00      	nop
 80a0de8:	bf00      	nop
 80a0dea:	bf00      	nop
 80a0dec:	bf00      	nop
 80a0dee:	bf00      	nop
 80a0df0:	bf00      	nop
 80a0df2:	bf00      	nop
 80a0df4:	bf00      	nop
 80a0df6:	bf00      	nop
 80a0df8:	bf00      	nop
 80a0dfa:	bf00      	nop
 80a0dfc:	bf00      	nop
 80a0dfe:	bf00      	nop
 80a0e00:	bf00      	nop
 80a0e02:	bf00      	nop
 80a0e04:	bf00      	nop
 80a0e06:	bf00      	nop
 80a0e08:	bf00      	nop
 80a0e0a:	bf00      	nop
 80a0e0c:	bf00      	nop
 80a0e0e:	bf00      	nop
 80a0e10:	bf00      	nop
 80a0e12:	bf00      	nop
 80a0e14:	bf00      	nop
 80a0e16:	bf00      	nop
 80a0e18:	bf00      	nop
 80a0e1a:	bf00      	nop
 80a0e1c:	bf00      	nop
 80a0e1e:	bf00      	nop
 80a0e20:	bf00      	nop
 80a0e22:	bf00      	nop
 80a0e24:	bf00      	nop
 80a0e26:	bf00      	nop
 80a0e28:	bf00      	nop
 80a0e2a:	bf00      	nop
 80a0e2c:	bf00      	nop
 80a0e2e:	bf00      	nop
 80a0e30:	bf00      	nop
 80a0e32:	bf00      	nop
 80a0e34:	bf00      	nop
 80a0e36:	bf00      	nop
 80a0e38:	bf00      	nop
 80a0e3a:	bf00      	nop
 80a0e3c:	bf00      	nop
 80a0e3e:	bf00      	nop
 80a0e40:	bf00      	nop
 80a0e42:	bf00      	nop
 80a0e44:	bf00      	nop
 80a0e46:	bf00      	nop
 80a0e48:	bf00      	nop
 80a0e4a:	bf00      	nop
 80a0e4c:	bf00      	nop
 80a0e4e:	bf00      	nop
 80a0e50:	bf00      	nop
 80a0e52:	bf00      	nop
          pinSet(pin, HIGH); // HIGH
 80a0e54:	79e0      	ldrb	r0, [r4, #7]
 80a0e56:	6817      	ldr	r7, [r2, #0]
          j++;
 80a0e58:	f89d 3005 	ldrb.w	r3, [sp, #5]
          pinSet(pin, HIGH); // HIGH
 80a0e5c:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 80a0e60:	eb07 0c80 	add.w	ip, r7, r0, lsl #2
 80a0e64:	f8bc c004 	ldrh.w	ip, [ip, #4]
 80a0e68:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
          j++;
 80a0e6c:	3301      	adds	r3, #1
 80a0e6e:	b2db      	uxtb	r3, r3
 80a0e70:	f88d 3005 	strb.w	r3, [sp, #5]
          pinSet(pin, HIGH); // HIGH
 80a0e74:	f8a0 c018 	strh.w	ip, [r0, #24]
            ::: "r0", "cc", "memory");
 80a0e78:	4600      	mov	r0, r0
 80a0e7a:	bf00      	nop
 80a0e7c:	bf00      	nop
 80a0e7e:	bf00      	nop
 80a0e80:	bf00      	nop
 80a0e82:	bf00      	nop
 80a0e84:	bf00      	nop
 80a0e86:	bf00      	nop
 80a0e88:	bf00      	nop
 80a0e8a:	bf00      	nop
 80a0e8c:	bf00      	nop
 80a0e8e:	bf00      	nop
 80a0e90:	bf00      	nop
 80a0e92:	bf00      	nop
 80a0e94:	bf00      	nop
 80a0e96:	bf00      	nop
 80a0e98:	bf00      	nop
 80a0e9a:	bf00      	nop
 80a0e9c:	bf00      	nop
 80a0e9e:	bf00      	nop
 80a0ea0:	bf00      	nop
          if(j==24) break;
 80a0ea2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a0ea6:	2b18      	cmp	r3, #24
 80a0ea8:	d07a      	beq.n	80a0fa0 <_ZN17Adafruit_NeoPixel4showEv+0xd50>
          pinSet(pin, LOW); // LOW
 80a0eaa:	79e3      	ldrb	r3, [r4, #7]
 80a0eac:	6810      	ldr	r0, [r2, #0]
 80a0eae:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0eb2:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0eb6:	88bf      	ldrh	r7, [r7, #4]
 80a0eb8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0ebc:	835f      	strh	r7, [r3, #26]
        if (c & mask) { // if masked bit is high
 80a0ebe:	9803      	ldr	r0, [sp, #12]
 80a0ec0:	9b04      	ldr	r3, [sp, #16]
 80a0ec2:	4218      	tst	r0, r3
 80a0ec4:	d180      	bne.n	80a0dc8 <_ZN17Adafruit_NeoPixel4showEv+0xb78>
            ::: "r0", "cc", "memory");
 80a0ec6:	4600      	mov	r0, r0
 80a0ec8:	bf00      	nop
 80a0eca:	bf00      	nop
 80a0ecc:	bf00      	nop
 80a0ece:	bf00      	nop
 80a0ed0:	bf00      	nop
 80a0ed2:	bf00      	nop
 80a0ed4:	bf00      	nop
 80a0ed6:	bf00      	nop
 80a0ed8:	bf00      	nop
 80a0eda:	bf00      	nop
 80a0edc:	bf00      	nop
 80a0ede:	bf00      	nop
 80a0ee0:	bf00      	nop
 80a0ee2:	bf00      	nop
 80a0ee4:	bf00      	nop
 80a0ee6:	bf00      	nop
          pinSet(pin, HIGH); // HIGH
 80a0ee8:	79e3      	ldrb	r3, [r4, #7]
 80a0eea:	6810      	ldr	r0, [r2, #0]
 80a0eec:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0ef0:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0ef4:	88bf      	ldrh	r7, [r7, #4]
 80a0ef6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0efa:	831f      	strh	r7, [r3, #24]
          j++;
 80a0efc:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a0f00:	3301      	adds	r3, #1
 80a0f02:	b2db      	uxtb	r3, r3
 80a0f04:	f88d 3005 	strb.w	r3, [sp, #5]
          mask >>= 1; // Do this task during the long delay of this bit
 80a0f08:	9b04      	ldr	r3, [sp, #16]
 80a0f0a:	085b      	lsrs	r3, r3, #1
 80a0f0c:	9304      	str	r3, [sp, #16]
            ::: "r0", "cc", "memory");
 80a0f0e:	4600      	mov	r0, r0
 80a0f10:	bf00      	nop
 80a0f12:	bf00      	nop
 80a0f14:	bf00      	nop
 80a0f16:	bf00      	nop
 80a0f18:	bf00      	nop
 80a0f1a:	bf00      	nop
 80a0f1c:	bf00      	nop
 80a0f1e:	bf00      	nop
 80a0f20:	bf00      	nop
 80a0f22:	bf00      	nop
 80a0f24:	bf00      	nop
 80a0f26:	bf00      	nop
 80a0f28:	bf00      	nop
 80a0f2a:	bf00      	nop
 80a0f2c:	bf00      	nop
 80a0f2e:	bf00      	nop
 80a0f30:	bf00      	nop
 80a0f32:	bf00      	nop
 80a0f34:	bf00      	nop
 80a0f36:	bf00      	nop
 80a0f38:	bf00      	nop
 80a0f3a:	bf00      	nop
 80a0f3c:	bf00      	nop
 80a0f3e:	bf00      	nop
 80a0f40:	bf00      	nop
 80a0f42:	bf00      	nop
 80a0f44:	bf00      	nop
 80a0f46:	bf00      	nop
 80a0f48:	bf00      	nop
 80a0f4a:	bf00      	nop
 80a0f4c:	bf00      	nop
 80a0f4e:	bf00      	nop
 80a0f50:	bf00      	nop
 80a0f52:	bf00      	nop
 80a0f54:	bf00      	nop
 80a0f56:	bf00      	nop
 80a0f58:	bf00      	nop
 80a0f5a:	bf00      	nop
 80a0f5c:	bf00      	nop
 80a0f5e:	bf00      	nop
 80a0f60:	bf00      	nop
 80a0f62:	bf00      	nop
 80a0f64:	bf00      	nop
 80a0f66:	bf00      	nop
 80a0f68:	bf00      	nop
 80a0f6a:	bf00      	nop
 80a0f6c:	bf00      	nop
 80a0f6e:	bf00      	nop
 80a0f70:	bf00      	nop
 80a0f72:	bf00      	nop
 80a0f74:	bf00      	nop
 80a0f76:	bf00      	nop
 80a0f78:	bf00      	nop
 80a0f7a:	bf00      	nop
 80a0f7c:	bf00      	nop
 80a0f7e:	bf00      	nop
 80a0f80:	bf00      	nop
 80a0f82:	bf00      	nop
 80a0f84:	bf00      	nop
 80a0f86:	bf00      	nop
 80a0f88:	bf00      	nop
 80a0f8a:	bf00      	nop
 80a0f8c:	bf00      	nop
 80a0f8e:	bf00      	nop
 80a0f90:	bf00      	nop
 80a0f92:	bf00      	nop
 80a0f94:	bf00      	nop
 80a0f96:	bf00      	nop
          if(j==24) break;
 80a0f98:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a0f9c:	2b18      	cmp	r3, #24
 80a0f9e:	d184      	bne.n	80a0eaa <_ZN17Adafruit_NeoPixel4showEv+0xc5a>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0fa0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a0fa4:	b29b      	uxth	r3, r3
 80a0fa6:	2b00      	cmp	r3, #0
 80a0fa8:	f47f aedd 	bne.w	80a0d66 <_ZN17Adafruit_NeoPixel4showEv+0xb16>
 80a0fac:	e517      	b.n	80a09de <_ZN17Adafruit_NeoPixel4showEv+0x78e>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0fae:	2b00      	cmp	r3, #0
 80a0fb0:	f43f ad15 	beq.w	80a09de <_ZN17Adafruit_NeoPixel4showEv+0x78e>
      mask = 0x800000; // reset the mask
 80a0fb4:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      j = 0;        // reset the 24-bit counter
 80a0fb8:	2600      	movs	r6, #0
 80a0fba:	4a13      	ldr	r2, [pc, #76]	; (80a1008 <_ZN17Adafruit_NeoPixel4showEv+0xdb8>)
      mask = 0x800000; // reset the mask
 80a0fbc:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a0fbe:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      b = *ptr++;   // Next green byte value
 80a0fc2:	3103      	adds	r1, #3
      i = i-3;      // decrement bytes remaining
 80a0fc4:	3b03      	subs	r3, #3
 80a0fc6:	b29b      	uxth	r3, r3
 80a0fc8:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a0fcc:	f811 3c03 	ldrb.w	r3, [r1, #-3]
 80a0fd0:	b2db      	uxtb	r3, r3
 80a0fd2:	f88d 3007 	strb.w	r3, [sp, #7]
      g = *ptr++;   // Next blue byte value
 80a0fd6:	f811 3c02 	ldrb.w	r3, [r1, #-2]
 80a0fda:	b2db      	uxtb	r3, r3
 80a0fdc:	f88d 3006 	strb.w	r3, [sp, #6]
      b = *ptr++;   // Next green byte value
 80a0fe0:	f811 3c01 	ldrb.w	r3, [r1, #-1]
 80a0fe4:	b2db      	uxtb	r3, r3
 80a0fe6:	f88d 3008 	strb.w	r3, [sp, #8]
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a0fea:	f89d 7007 	ldrb.w	r7, [sp, #7]
 80a0fee:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a0ff2:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80a0ff6:	021b      	lsls	r3, r3, #8
 80a0ff8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80a0ffc:	4303      	orrs	r3, r0
 80a0ffe:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a1000:	f88d 6005 	strb.w	r6, [sp, #5]
 80a1004:	e0e1      	b.n	80a11ca <_ZN17Adafruit_NeoPixel4showEv+0xf7a>
 80a1006:	bf00      	nop
 80a1008:	2000008c 	.word	0x2000008c
            ::: "r0", "cc", "memory");
 80a100c:	4600      	mov	r0, r0
 80a100e:	bf00      	nop
 80a1010:	bf00      	nop
 80a1012:	bf00      	nop
 80a1014:	bf00      	nop
 80a1016:	bf00      	nop
 80a1018:	bf00      	nop
 80a101a:	bf00      	nop
 80a101c:	bf00      	nop
 80a101e:	bf00      	nop
 80a1020:	bf00      	nop
 80a1022:	bf00      	nop
 80a1024:	bf00      	nop
 80a1026:	bf00      	nop
 80a1028:	bf00      	nop
 80a102a:	bf00      	nop
 80a102c:	bf00      	nop
 80a102e:	bf00      	nop
 80a1030:	bf00      	nop
 80a1032:	bf00      	nop
 80a1034:	bf00      	nop
 80a1036:	bf00      	nop
 80a1038:	bf00      	nop
 80a103a:	bf00      	nop
 80a103c:	bf00      	nop
 80a103e:	bf00      	nop
 80a1040:	bf00      	nop
 80a1042:	bf00      	nop
 80a1044:	bf00      	nop
 80a1046:	bf00      	nop
 80a1048:	bf00      	nop
 80a104a:	bf00      	nop
 80a104c:	bf00      	nop
 80a104e:	bf00      	nop
 80a1050:	bf00      	nop
 80a1052:	bf00      	nop
 80a1054:	bf00      	nop
 80a1056:	bf00      	nop
 80a1058:	bf00      	nop
 80a105a:	bf00      	nop
 80a105c:	bf00      	nop
 80a105e:	bf00      	nop
 80a1060:	bf00      	nop
 80a1062:	bf00      	nop
 80a1064:	bf00      	nop
 80a1066:	bf00      	nop
 80a1068:	bf00      	nop
 80a106a:	bf00      	nop
 80a106c:	bf00      	nop
 80a106e:	bf00      	nop
 80a1070:	bf00      	nop
 80a1072:	bf00      	nop
 80a1074:	bf00      	nop
 80a1076:	bf00      	nop
 80a1078:	bf00      	nop
 80a107a:	bf00      	nop
 80a107c:	bf00      	nop
 80a107e:	bf00      	nop
 80a1080:	bf00      	nop
 80a1082:	bf00      	nop
 80a1084:	bf00      	nop
 80a1086:	bf00      	nop
 80a1088:	bf00      	nop
 80a108a:	bf00      	nop
 80a108c:	bf00      	nop
 80a108e:	bf00      	nop
 80a1090:	bf00      	nop
 80a1092:	bf00      	nop
 80a1094:	bf00      	nop
 80a1096:	bf00      	nop
 80a1098:	bf00      	nop
 80a109a:	bf00      	nop
 80a109c:	bf00      	nop
 80a109e:	bf00      	nop
 80a10a0:	bf00      	nop
 80a10a2:	bf00      	nop
 80a10a4:	bf00      	nop
 80a10a6:	bf00      	nop
 80a10a8:	bf00      	nop
 80a10aa:	bf00      	nop
 80a10ac:	bf00      	nop
 80a10ae:	bf00      	nop
 80a10b0:	bf00      	nop
 80a10b2:	bf00      	nop
 80a10b4:	bf00      	nop
 80a10b6:	bf00      	nop
 80a10b8:	bf00      	nop
 80a10ba:	bf00      	nop
 80a10bc:	bf00      	nop
 80a10be:	bf00      	nop
 80a10c0:	bf00      	nop
 80a10c2:	bf00      	nop
 80a10c4:	bf00      	nop
 80a10c6:	bf00      	nop
 80a10c8:	bf00      	nop
 80a10ca:	bf00      	nop
 80a10cc:	bf00      	nop
 80a10ce:	bf00      	nop
 80a10d0:	bf00      	nop
 80a10d2:	bf00      	nop
 80a10d4:	bf00      	nop
 80a10d6:	bf00      	nop
 80a10d8:	bf00      	nop
 80a10da:	bf00      	nop
 80a10dc:	bf00      	nop
 80a10de:	bf00      	nop
 80a10e0:	bf00      	nop
 80a10e2:	bf00      	nop
 80a10e4:	bf00      	nop
 80a10e6:	bf00      	nop
 80a10e8:	bf00      	nop
 80a10ea:	bf00      	nop
 80a10ec:	bf00      	nop
 80a10ee:	bf00      	nop
 80a10f0:	bf00      	nop
 80a10f2:	bf00      	nop
 80a10f4:	bf00      	nop
 80a10f6:	bf00      	nop
 80a10f8:	bf00      	nop
 80a10fa:	bf00      	nop
 80a10fc:	bf00      	nop
 80a10fe:	bf00      	nop
 80a1100:	bf00      	nop
 80a1102:	bf00      	nop
 80a1104:	bf00      	nop
 80a1106:	bf00      	nop
 80a1108:	bf00      	nop
 80a110a:	bf00      	nop
 80a110c:	bf00      	nop
 80a110e:	bf00      	nop
 80a1110:	bf00      	nop
 80a1112:	bf00      	nop
 80a1114:	bf00      	nop
 80a1116:	bf00      	nop
 80a1118:	bf00      	nop
 80a111a:	bf00      	nop
 80a111c:	bf00      	nop
 80a111e:	bf00      	nop
 80a1120:	bf00      	nop
 80a1122:	bf00      	nop
 80a1124:	bf00      	nop
 80a1126:	bf00      	nop
 80a1128:	bf00      	nop
 80a112a:	bf00      	nop
 80a112c:	bf00      	nop
          pinSet(pin, LOW); // LOW
 80a112e:	79e3      	ldrb	r3, [r4, #7]
 80a1130:	6810      	ldr	r0, [r2, #0]
 80a1132:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1136:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a113a:	88bf      	ldrh	r7, [r7, #4]
 80a113c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1140:	835f      	strh	r7, [r3, #26]
            ::: "r0", "cc", "memory");
 80a1142:	4600      	mov	r0, r0
 80a1144:	bf00      	nop
 80a1146:	bf00      	nop
 80a1148:	bf00      	nop
 80a114a:	bf00      	nop
 80a114c:	bf00      	nop
 80a114e:	bf00      	nop
 80a1150:	bf00      	nop
 80a1152:	bf00      	nop
 80a1154:	bf00      	nop
 80a1156:	bf00      	nop
 80a1158:	bf00      	nop
 80a115a:	bf00      	nop
 80a115c:	bf00      	nop
 80a115e:	bf00      	nop
 80a1160:	bf00      	nop
 80a1162:	bf00      	nop
 80a1164:	bf00      	nop
 80a1166:	bf00      	nop
 80a1168:	bf00      	nop
 80a116a:	bf00      	nop
 80a116c:	bf00      	nop
 80a116e:	bf00      	nop
 80a1170:	bf00      	nop
 80a1172:	bf00      	nop
 80a1174:	bf00      	nop
 80a1176:	bf00      	nop
 80a1178:	bf00      	nop
 80a117a:	bf00      	nop
 80a117c:	bf00      	nop
 80a117e:	bf00      	nop
 80a1180:	bf00      	nop
 80a1182:	bf00      	nop
 80a1184:	bf00      	nop
 80a1186:	bf00      	nop
 80a1188:	bf00      	nop
 80a118a:	bf00      	nop
 80a118c:	bf00      	nop
 80a118e:	bf00      	nop
 80a1190:	bf00      	nop
 80a1192:	bf00      	nop
 80a1194:	bf00      	nop
 80a1196:	bf00      	nop
 80a1198:	bf00      	nop
 80a119a:	bf00      	nop
 80a119c:	bf00      	nop
 80a119e:	bf00      	nop
 80a11a0:	bf00      	nop
 80a11a2:	bf00      	nop
 80a11a4:	bf00      	nop
 80a11a6:	bf00      	nop
 80a11a8:	bf00      	nop
 80a11aa:	bf00      	nop
 80a11ac:	bf00      	nop
 80a11ae:	bf00      	nop
 80a11b0:	bf00      	nop
        mask >>= 1;
 80a11b2:	9b04      	ldr	r3, [sp, #16]
 80a11b4:	085b      	lsrs	r3, r3, #1
 80a11b6:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a11b8:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a11bc:	3301      	adds	r3, #1
 80a11be:	b2db      	uxtb	r3, r3
 80a11c0:	2b17      	cmp	r3, #23
 80a11c2:	f88d 3005 	strb.w	r3, [sp, #5]
 80a11c6:	f200 80eb 	bhi.w	80a13a0 <_ZN17Adafruit_NeoPixel4showEv+0x1150>
        pinSet(pin, HIGH); // HIGH
 80a11ca:	79e3      	ldrb	r3, [r4, #7]
 80a11cc:	6810      	ldr	r0, [r2, #0]
 80a11ce:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a11d2:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a11d6:	88bf      	ldrh	r7, [r7, #4]
 80a11d8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a11dc:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a11de:	9803      	ldr	r0, [sp, #12]
 80a11e0:	9b04      	ldr	r3, [sp, #16]
 80a11e2:	4218      	tst	r0, r3
 80a11e4:	f47f af12 	bne.w	80a100c <_ZN17Adafruit_NeoPixel4showEv+0xdbc>
            ::: "r0", "cc", "memory");
 80a11e8:	4600      	mov	r0, r0
 80a11ea:	bf00      	nop
 80a11ec:	bf00      	nop
 80a11ee:	bf00      	nop
 80a11f0:	bf00      	nop
 80a11f2:	bf00      	nop
 80a11f4:	bf00      	nop
 80a11f6:	bf00      	nop
 80a11f8:	bf00      	nop
 80a11fa:	bf00      	nop
 80a11fc:	bf00      	nop
 80a11fe:	bf00      	nop
 80a1200:	bf00      	nop
 80a1202:	bf00      	nop
 80a1204:	bf00      	nop
 80a1206:	bf00      	nop
 80a1208:	bf00      	nop
 80a120a:	bf00      	nop
 80a120c:	bf00      	nop
 80a120e:	bf00      	nop
 80a1210:	bf00      	nop
 80a1212:	bf00      	nop
 80a1214:	bf00      	nop
 80a1216:	bf00      	nop
 80a1218:	bf00      	nop
 80a121a:	bf00      	nop
 80a121c:	bf00      	nop
 80a121e:	bf00      	nop
 80a1220:	bf00      	nop
 80a1222:	bf00      	nop
 80a1224:	bf00      	nop
 80a1226:	bf00      	nop
 80a1228:	bf00      	nop
 80a122a:	bf00      	nop
 80a122c:	bf00      	nop
 80a122e:	bf00      	nop
 80a1230:	bf00      	nop
 80a1232:	bf00      	nop
 80a1234:	bf00      	nop
 80a1236:	bf00      	nop
 80a1238:	bf00      	nop
 80a123a:	bf00      	nop
 80a123c:	bf00      	nop
 80a123e:	bf00      	nop
 80a1240:	bf00      	nop
 80a1242:	bf00      	nop
 80a1244:	bf00      	nop
 80a1246:	bf00      	nop
 80a1248:	bf00      	nop
 80a124a:	bf00      	nop
 80a124c:	bf00      	nop
 80a124e:	bf00      	nop
 80a1250:	bf00      	nop
 80a1252:	bf00      	nop
 80a1254:	bf00      	nop
 80a1256:	bf00      	nop
 80a1258:	bf00      	nop
 80a125a:	bf00      	nop
 80a125c:	bf00      	nop
 80a125e:	bf00      	nop
 80a1260:	bf00      	nop
 80a1262:	bf00      	nop
 80a1264:	bf00      	nop
 80a1266:	bf00      	nop
 80a1268:	bf00      	nop
          pinSet(pin, LOW); // LOW
 80a126a:	79e3      	ldrb	r3, [r4, #7]
 80a126c:	6810      	ldr	r0, [r2, #0]
 80a126e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1272:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a1276:	88bf      	ldrh	r7, [r7, #4]
 80a1278:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a127c:	835f      	strh	r7, [r3, #26]
            ::: "r0", "cc", "memory");
 80a127e:	4600      	mov	r0, r0
 80a1280:	bf00      	nop
 80a1282:	bf00      	nop
 80a1284:	bf00      	nop
 80a1286:	bf00      	nop
 80a1288:	bf00      	nop
 80a128a:	bf00      	nop
 80a128c:	bf00      	nop
 80a128e:	bf00      	nop
 80a1290:	bf00      	nop
 80a1292:	bf00      	nop
 80a1294:	bf00      	nop
 80a1296:	bf00      	nop
 80a1298:	bf00      	nop
 80a129a:	bf00      	nop
 80a129c:	bf00      	nop
 80a129e:	bf00      	nop
 80a12a0:	bf00      	nop
 80a12a2:	bf00      	nop
 80a12a4:	bf00      	nop
 80a12a6:	bf00      	nop
 80a12a8:	bf00      	nop
 80a12aa:	bf00      	nop
 80a12ac:	bf00      	nop
 80a12ae:	bf00      	nop
 80a12b0:	bf00      	nop
 80a12b2:	bf00      	nop
 80a12b4:	bf00      	nop
 80a12b6:	bf00      	nop
 80a12b8:	bf00      	nop
 80a12ba:	bf00      	nop
 80a12bc:	bf00      	nop
 80a12be:	bf00      	nop
 80a12c0:	bf00      	nop
 80a12c2:	bf00      	nop
 80a12c4:	bf00      	nop
 80a12c6:	bf00      	nop
 80a12c8:	bf00      	nop
 80a12ca:	bf00      	nop
 80a12cc:	bf00      	nop
 80a12ce:	bf00      	nop
 80a12d0:	bf00      	nop
 80a12d2:	bf00      	nop
 80a12d4:	bf00      	nop
 80a12d6:	bf00      	nop
 80a12d8:	bf00      	nop
 80a12da:	bf00      	nop
 80a12dc:	bf00      	nop
 80a12de:	bf00      	nop
 80a12e0:	bf00      	nop
 80a12e2:	bf00      	nop
 80a12e4:	bf00      	nop
 80a12e6:	bf00      	nop
 80a12e8:	bf00      	nop
 80a12ea:	bf00      	nop
 80a12ec:	bf00      	nop
 80a12ee:	bf00      	nop
 80a12f0:	bf00      	nop
 80a12f2:	bf00      	nop
 80a12f4:	bf00      	nop
 80a12f6:	bf00      	nop
 80a12f8:	bf00      	nop
 80a12fa:	bf00      	nop
 80a12fc:	bf00      	nop
 80a12fe:	bf00      	nop
 80a1300:	bf00      	nop
 80a1302:	bf00      	nop
 80a1304:	bf00      	nop
 80a1306:	bf00      	nop
 80a1308:	bf00      	nop
 80a130a:	bf00      	nop
 80a130c:	bf00      	nop
 80a130e:	bf00      	nop
 80a1310:	bf00      	nop
 80a1312:	bf00      	nop
 80a1314:	bf00      	nop
 80a1316:	bf00      	nop
 80a1318:	bf00      	nop
 80a131a:	bf00      	nop
 80a131c:	bf00      	nop
 80a131e:	bf00      	nop
 80a1320:	bf00      	nop
 80a1322:	bf00      	nop
 80a1324:	bf00      	nop
 80a1326:	bf00      	nop
 80a1328:	bf00      	nop
 80a132a:	bf00      	nop
 80a132c:	bf00      	nop
 80a132e:	bf00      	nop
 80a1330:	bf00      	nop
 80a1332:	bf00      	nop
 80a1334:	bf00      	nop
 80a1336:	bf00      	nop
 80a1338:	bf00      	nop
 80a133a:	bf00      	nop
 80a133c:	bf00      	nop
 80a133e:	bf00      	nop
 80a1340:	bf00      	nop
 80a1342:	bf00      	nop
 80a1344:	bf00      	nop
 80a1346:	bf00      	nop
 80a1348:	bf00      	nop
 80a134a:	bf00      	nop
 80a134c:	bf00      	nop
 80a134e:	bf00      	nop
 80a1350:	bf00      	nop
 80a1352:	bf00      	nop
 80a1354:	bf00      	nop
 80a1356:	bf00      	nop
 80a1358:	bf00      	nop
 80a135a:	bf00      	nop
 80a135c:	bf00      	nop
 80a135e:	bf00      	nop
 80a1360:	bf00      	nop
 80a1362:	bf00      	nop
 80a1364:	bf00      	nop
 80a1366:	bf00      	nop
 80a1368:	bf00      	nop
 80a136a:	bf00      	nop
 80a136c:	bf00      	nop
 80a136e:	bf00      	nop
 80a1370:	bf00      	nop
 80a1372:	bf00      	nop
 80a1374:	bf00      	nop
 80a1376:	bf00      	nop
 80a1378:	bf00      	nop
 80a137a:	bf00      	nop
 80a137c:	bf00      	nop
 80a137e:	bf00      	nop
 80a1380:	bf00      	nop
 80a1382:	bf00      	nop
 80a1384:	bf00      	nop
 80a1386:	bf00      	nop
 80a1388:	bf00      	nop
 80a138a:	bf00      	nop
 80a138c:	bf00      	nop
 80a138e:	e710      	b.n	80a11b2 <_ZN17Adafruit_NeoPixel4showEv+0xf62>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a1390:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a1394:	b29b      	uxth	r3, r3
 80a1396:	2b00      	cmp	r3, #0
 80a1398:	f47e af92 	bne.w	80a02c0 <_ZN17Adafruit_NeoPixel4showEv+0x70>
 80a139c:	f7ff bb1f 	b.w	80a09de <_ZN17Adafruit_NeoPixel4showEv+0x78e>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a13a0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a13a4:	b29b      	uxth	r3, r3
 80a13a6:	2b00      	cmp	r3, #0
 80a13a8:	f47f ae08 	bne.w	80a0fbc <_ZN17Adafruit_NeoPixel4showEv+0xd6c>
 80a13ac:	f7ff bb17 	b.w	80a09de <_ZN17Adafruit_NeoPixel4showEv+0x78e>

080a13b0 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>:

// Set pixel color from separate R,G,B components:
void Adafruit_NeoPixel::setPixelColor(
  uint16_t n, uint8_t r, uint8_t g, uint8_t b) {
 80a13b0:	b570      	push	{r4, r5, r6, lr}
  if(n < numLEDs) {
 80a13b2:	8844      	ldrh	r4, [r0, #2]
  uint16_t n, uint8_t r, uint8_t g, uint8_t b) {
 80a13b4:	f89d 5010 	ldrb.w	r5, [sp, #16]
  if(n < numLEDs) {
 80a13b8:	428c      	cmp	r4, r1
 80a13ba:	d918      	bls.n	80a13ee <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x3e>
    if(brightness) { // See notes in setBrightness()
 80a13bc:	7a04      	ldrb	r4, [r0, #8]
 80a13be:	b12c      	cbz	r4, 80a13cc <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x1c>
      r = (r * brightness) >> 8;
 80a13c0:	4362      	muls	r2, r4
      g = (g * brightness) >> 8;
 80a13c2:	4363      	muls	r3, r4
      b = (b * brightness) >> 8;
 80a13c4:	436c      	muls	r4, r5
      r = (r * brightness) >> 8;
 80a13c6:	0a12      	lsrs	r2, r2, #8
      g = (g * brightness) >> 8;
 80a13c8:	0a1b      	lsrs	r3, r3, #8
      b = (b * brightness) >> 8;
 80a13ca:	0a25      	lsrs	r5, r4, #8
    }
    uint8_t *p = &pixels[n * 3];
 80a13cc:	68c6      	ldr	r6, [r0, #12]
 80a13ce:	7980      	ldrb	r0, [r0, #6]
 80a13d0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80a13d4:	3802      	subs	r0, #2
 80a13d6:	1874      	adds	r4, r6, r1
    switch(type) {
 80a13d8:	2806      	cmp	r0, #6
 80a13da:	d810      	bhi.n	80a13fe <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x4e>
 80a13dc:	e8df f000 	tbb	[pc, r0]
 80a13e0:	04080f04 	.word	0x04080f04
 80a13e4:	040f      	.short	0x040f
 80a13e6:	04          	.byte	0x04
 80a13e7:	00          	.byte	0x00
      case WS2812B: // WS2812, WS2812B & WS2813 is GRB order.
      case WS2812B_FAST:
      case WS2812B2:
      case WS2812B2_FAST: {
          *p++ = g;
 80a13e8:	5473      	strb	r3, [r6, r1]
          *p++ = r;
 80a13ea:	7062      	strb	r2, [r4, #1]
          *p = b;
 80a13ec:	70a5      	strb	r5, [r4, #2]
          *p++ = g;
          *p = b;
        } break;
    }
  }
}
 80a13ee:	bd70      	pop	{r4, r5, r6, pc}
          *p++ = r;
 80a13f0:	2afe      	cmp	r2, #254	; 0xfe
 80a13f2:	bf28      	it	cs
 80a13f4:	22fe      	movcs	r2, #254	; 0xfe
 80a13f6:	5472      	strb	r2, [r6, r1]
          *p++ = b;
 80a13f8:	7065      	strb	r5, [r4, #1]
          *p = g;
 80a13fa:	70a3      	strb	r3, [r4, #2]
        } break;
 80a13fc:	e7f7      	b.n	80a13ee <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x3e>
          *p++ = r;
 80a13fe:	5472      	strb	r2, [r6, r1]
          *p++ = g;
 80a1400:	7063      	strb	r3, [r4, #1]
          *p = b;
 80a1402:	70a5      	strb	r5, [r4, #2]
}
 80a1404:	e7f3      	b.n	80a13ee <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x3e>

080a1406 <_ZN17Adafruit_NeoPixel13setPixelColorEthhhh>:

// Set pixel color from separate R,G,B,W components:
void Adafruit_NeoPixel::setPixelColor(
  uint16_t n, uint8_t r, uint8_t g, uint8_t b, uint8_t w) {
 80a1406:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(n < numLEDs) {
 80a1408:	8845      	ldrh	r5, [r0, #2]
  uint16_t n, uint8_t r, uint8_t g, uint8_t b, uint8_t w) {
 80a140a:	f89d 4014 	ldrb.w	r4, [sp, #20]
  if(n < numLEDs) {
 80a140e:	428d      	cmp	r5, r1
  uint16_t n, uint8_t r, uint8_t g, uint8_t b, uint8_t w) {
 80a1410:	f89d c018 	ldrb.w	ip, [sp, #24]
  if(n < numLEDs) {
 80a1414:	d91f      	bls.n	80a1456 <_ZN17Adafruit_NeoPixel13setPixelColorEthhhh+0x50>
    if(brightness) { // See notes in setBrightness()
 80a1416:	7a05      	ldrb	r5, [r0, #8]
 80a1418:	b14d      	cbz	r5, 80a142e <_ZN17Adafruit_NeoPixel13setPixelColorEthhhh+0x28>
      r = (r * brightness) >> 8;
 80a141a:	436a      	muls	r2, r5
      g = (g * brightness) >> 8;
 80a141c:	436b      	muls	r3, r5
      b = (b * brightness) >> 8;
 80a141e:	436c      	muls	r4, r5
      w = (w * brightness) >> 8;
 80a1420:	fb05 f50c 	mul.w	r5, r5, ip
      r = (r * brightness) >> 8;
 80a1424:	0a12      	lsrs	r2, r2, #8
      g = (g * brightness) >> 8;
 80a1426:	0a1b      	lsrs	r3, r3, #8
      b = (b * brightness) >> 8;
 80a1428:	0a24      	lsrs	r4, r4, #8
      w = (w * brightness) >> 8;
 80a142a:	ea4f 2c15 	mov.w	ip, r5, lsr #8
    }
    uint8_t *p = &pixels[n * (type==SK6812RGBW?4:3)];
 80a142e:	7987      	ldrb	r7, [r0, #6]
 80a1430:	68c6      	ldr	r6, [r0, #12]
 80a1432:	2f06      	cmp	r7, #6
 80a1434:	bf0c      	ite	eq
 80a1436:	2004      	moveq	r0, #4
 80a1438:	2003      	movne	r0, #3
 80a143a:	4341      	muls	r1, r0
 80a143c:	3f02      	subs	r7, #2
 80a143e:	1870      	adds	r0, r6, r1
    switch(type) {
 80a1440:	2f06      	cmp	r7, #6
 80a1442:	d816      	bhi.n	80a1472 <_ZN17Adafruit_NeoPixel13setPixelColorEthhhh+0x6c>
 80a1444:	e8df f007 	tbb	[pc, r7]
 80a1448:	04081504 	.word	0x04081504
 80a144c:	040f      	.short	0x040f
 80a144e:	04          	.byte	0x04
 80a144f:	00          	.byte	0x00
      case WS2812B: // WS2812, WS2812B & WS2813 is GRB order.
      case WS2812B_FAST:
      case WS2812B2:
      case WS2812B2_FAST: {
          *p++ = g;
 80a1450:	5473      	strb	r3, [r6, r1]
          *p++ = r;
 80a1452:	7042      	strb	r2, [r0, #1]
          *p = b;
 80a1454:	7084      	strb	r4, [r0, #2]
          *p++ = g;
          *p = b;
        } break;
    }
  }
}
 80a1456:	bdf0      	pop	{r4, r5, r6, r7, pc}
          *p++ = r;
 80a1458:	2afe      	cmp	r2, #254	; 0xfe
 80a145a:	bf28      	it	cs
 80a145c:	22fe      	movcs	r2, #254	; 0xfe
 80a145e:	5472      	strb	r2, [r6, r1]
          *p++ = b;
 80a1460:	7044      	strb	r4, [r0, #1]
          *p = g;
 80a1462:	7083      	strb	r3, [r0, #2]
        } break;
 80a1464:	e7f7      	b.n	80a1456 <_ZN17Adafruit_NeoPixel13setPixelColorEthhhh+0x50>
          *p++ = r;
 80a1466:	5472      	strb	r2, [r6, r1]
          *p++ = g;
 80a1468:	7043      	strb	r3, [r0, #1]
          *p++ = b;
 80a146a:	7084      	strb	r4, [r0, #2]
          *p = w;
 80a146c:	f880 c003 	strb.w	ip, [r0, #3]
        } break;
 80a1470:	e7f1      	b.n	80a1456 <_ZN17Adafruit_NeoPixel13setPixelColorEthhhh+0x50>
          *p++ = r;
 80a1472:	5472      	strb	r2, [r6, r1]
          *p++ = g;
 80a1474:	7043      	strb	r3, [r0, #1]
          *p = b;
 80a1476:	7084      	strb	r4, [r0, #2]
}
 80a1478:	e7ed      	b.n	80a1456 <_ZN17Adafruit_NeoPixel13setPixelColorEthhhh+0x50>
	...

080a147c <_GLOBAL__sub_I_PIN_MAP2>:
  return brightness - 1;
}

void Adafruit_NeoPixel::clear(void) {
  memset(pixels, 0, numBytes);
}
 80a147c:	b508      	push	{r3, lr}
  STM32_Pin_Info* PIN_MAP2 = HAL_Pin_Map(); // Pointer required for highest access speed
 80a147e:	f000 f805 	bl	80a148c <HAL_Pin_Map>
 80a1482:	4b01      	ldr	r3, [pc, #4]	; (80a1488 <_GLOBAL__sub_I_PIN_MAP2+0xc>)
 80a1484:	6018      	str	r0, [r3, #0]
}
 80a1486:	bd08      	pop	{r3, pc}
 80a1488:	2000008c 	.word	0x2000008c

080a148c <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a148c:	b508      	push	{r3, lr}
 80a148e:	4b02      	ldr	r3, [pc, #8]	; (80a1498 <HAL_Pin_Map+0xc>)
 80a1490:	681b      	ldr	r3, [r3, #0]
 80a1492:	681b      	ldr	r3, [r3, #0]
 80a1494:	9301      	str	r3, [sp, #4]
 80a1496:	bd08      	pop	{r3, pc}
 80a1498:	080601b0 	.word	0x080601b0

080a149c <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a149c:	b508      	push	{r3, lr}
 80a149e:	4b02      	ldr	r3, [pc, #8]	; (80a14a8 <HAL_Pin_Mode+0xc>)
 80a14a0:	681b      	ldr	r3, [r3, #0]
 80a14a2:	689b      	ldr	r3, [r3, #8]
 80a14a4:	9301      	str	r3, [sp, #4]
 80a14a6:	bd08      	pop	{r3, pc}
 80a14a8:	080601b0 	.word	0x080601b0

080a14ac <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a14ac:	b508      	push	{r3, lr}
 80a14ae:	4b02      	ldr	r3, [pc, #8]	; (80a14b8 <HAL_Get_Pin_Mode+0xc>)
 80a14b0:	681b      	ldr	r3, [r3, #0]
 80a14b2:	68db      	ldr	r3, [r3, #12]
 80a14b4:	9301      	str	r3, [sp, #4]
 80a14b6:	bd08      	pop	{r3, pc}
 80a14b8:	080601b0 	.word	0x080601b0

080a14bc <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a14bc:	b508      	push	{r3, lr}
 80a14be:	4b02      	ldr	r3, [pc, #8]	; (80a14c8 <HAL_GPIO_Write+0xc>)
 80a14c0:	681b      	ldr	r3, [r3, #0]
 80a14c2:	691b      	ldr	r3, [r3, #16]
 80a14c4:	9301      	str	r3, [sp, #4]
 80a14c6:	bd08      	pop	{r3, pc}
 80a14c8:	080601b0 	.word	0x080601b0

080a14cc <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a14cc:	b508      	push	{r3, lr}
 80a14ce:	4b02      	ldr	r3, [pc, #8]	; (80a14d8 <HAL_RNG_GetRandomNumber+0xc>)
 80a14d0:	681b      	ldr	r3, [r3, #0]
 80a14d2:	685b      	ldr	r3, [r3, #4]
 80a14d4:	9301      	str	r3, [sp, #4]
 80a14d6:	bd08      	pop	{r3, pc}
 80a14d8:	0806019c 	.word	0x0806019c

080a14dc <HAL_Timer_Get_Micro_Seconds>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
 80a14dc:	b508      	push	{r3, lr}
 80a14de:	4b02      	ldr	r3, [pc, #8]	; (80a14e8 <HAL_Timer_Get_Micro_Seconds+0xc>)
 80a14e0:	681b      	ldr	r3, [r3, #0]
 80a14e2:	691b      	ldr	r3, [r3, #16]
 80a14e4:	9301      	str	r3, [sp, #4]
 80a14e6:	bd08      	pop	{r3, pc}
 80a14e8:	0806019c 	.word	0x0806019c

080a14ec <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a14ec:	b508      	push	{r3, lr}
 80a14ee:	4b02      	ldr	r3, [pc, #8]	; (80a14f8 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a14f0:	681b      	ldr	r3, [r3, #0]
 80a14f2:	695b      	ldr	r3, [r3, #20]
 80a14f4:	9301      	str	r3, [sp, #4]
 80a14f6:	bd08      	pop	{r3, pc}
 80a14f8:	0806019c 	.word	0x0806019c

080a14fc <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80a14fc:	b508      	push	{r3, lr}
 80a14fe:	4b02      	ldr	r3, [pc, #8]	; (80a1508 <os_mutex_recursive_create+0xc>)
 80a1500:	681b      	ldr	r3, [r3, #0]
 80a1502:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a1504:	9301      	str	r3, [sp, #4]
 80a1506:	bd08      	pop	{r3, pc}
 80a1508:	080601d0 	.word	0x080601d0

080a150c <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 80a150c:	b508      	push	{r3, lr}
 80a150e:	4b02      	ldr	r3, [pc, #8]	; (80a1518 <os_mutex_recursive_destroy+0xc>)
 80a1510:	681b      	ldr	r3, [r3, #0]
 80a1512:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a1514:	9301      	str	r3, [sp, #4]
 80a1516:	bd08      	pop	{r3, pc}
 80a1518:	080601d0 	.word	0x080601d0

080a151c <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
 80a151c:	b508      	push	{r3, lr}
 80a151e:	4b02      	ldr	r3, [pc, #8]	; (80a1528 <hal_usart_init+0xc>)
 80a1520:	681b      	ldr	r3, [r3, #0]
 80a1522:	699b      	ldr	r3, [r3, #24]
 80a1524:	9301      	str	r3, [sp, #4]
 80a1526:	bd08      	pop	{r3, pc}
 80a1528:	080601c4 	.word	0x080601c4

080a152c <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 80a152c:	b508      	push	{r3, lr}
 80a152e:	4b02      	ldr	r3, [pc, #8]	; (80a1538 <hal_usart_write+0xc>)
 80a1530:	681b      	ldr	r3, [r3, #0]
 80a1532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a1534:	9301      	str	r3, [sp, #4]
 80a1536:	bd08      	pop	{r3, pc}
 80a1538:	080601c4 	.word	0x080601c4

080a153c <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 80a153c:	b508      	push	{r3, lr}
 80a153e:	4b02      	ldr	r3, [pc, #8]	; (80a1548 <hal_usart_available+0xc>)
 80a1540:	681b      	ldr	r3, [r3, #0]
 80a1542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a1544:	9301      	str	r3, [sp, #4]
 80a1546:	bd08      	pop	{r3, pc}
 80a1548:	080601c4 	.word	0x080601c4

080a154c <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 80a154c:	b508      	push	{r3, lr}
 80a154e:	4b02      	ldr	r3, [pc, #8]	; (80a1558 <hal_usart_read+0xc>)
 80a1550:	681b      	ldr	r3, [r3, #0]
 80a1552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a1554:	9301      	str	r3, [sp, #4]
 80a1556:	bd08      	pop	{r3, pc}
 80a1558:	080601c4 	.word	0x080601c4

080a155c <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 80a155c:	b508      	push	{r3, lr}
 80a155e:	4b02      	ldr	r3, [pc, #8]	; (80a1568 <hal_usart_peek+0xc>)
 80a1560:	681b      	ldr	r3, [r3, #0]
 80a1562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1564:	9301      	str	r3, [sp, #4]
 80a1566:	bd08      	pop	{r3, pc}
 80a1568:	080601c4 	.word	0x080601c4

080a156c <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 80a156c:	b508      	push	{r3, lr}
 80a156e:	4b02      	ldr	r3, [pc, #8]	; (80a1578 <hal_usart_flush+0xc>)
 80a1570:	681b      	ldr	r3, [r3, #0]
 80a1572:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a1574:	9301      	str	r3, [sp, #4]
 80a1576:	bd08      	pop	{r3, pc}
 80a1578:	080601c4 	.word	0x080601c4

080a157c <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 80a157c:	b508      	push	{r3, lr}
 80a157e:	4b02      	ldr	r3, [pc, #8]	; (80a1588 <hal_usart_is_enabled+0xc>)
 80a1580:	681b      	ldr	r3, [r3, #0]
 80a1582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a1584:	9301      	str	r3, [sp, #4]
 80a1586:	bd08      	pop	{r3, pc}
 80a1588:	080601c4 	.word	0x080601c4

080a158c <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 80a158c:	b508      	push	{r3, lr}
 80a158e:	4b02      	ldr	r3, [pc, #8]	; (80a1598 <hal_usart_available_data_for_write+0xc>)
 80a1590:	681b      	ldr	r3, [r3, #0]
 80a1592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a1594:	9301      	str	r3, [sp, #4]
 80a1596:	bd08      	pop	{r3, pc}
 80a1598:	080601c4 	.word	0x080601c4

080a159c <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 80a159c:	b508      	push	{r3, lr}
 80a159e:	4b02      	ldr	r3, [pc, #8]	; (80a15a8 <hal_i2c_write+0xc>)
 80a15a0:	681b      	ldr	r3, [r3, #0]
 80a15a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a15a4:	9301      	str	r3, [sp, #4]
 80a15a6:	bd08      	pop	{r3, pc}
 80a15a8:	080601ac 	.word	0x080601ac

080a15ac <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 80a15ac:	b508      	push	{r3, lr}
 80a15ae:	4b02      	ldr	r3, [pc, #8]	; (80a15b8 <hal_i2c_available+0xc>)
 80a15b0:	681b      	ldr	r3, [r3, #0]
 80a15b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a15b4:	9301      	str	r3, [sp, #4]
 80a15b6:	bd08      	pop	{r3, pc}
 80a15b8:	080601ac 	.word	0x080601ac

080a15bc <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 80a15bc:	b508      	push	{r3, lr}
 80a15be:	4b02      	ldr	r3, [pc, #8]	; (80a15c8 <hal_i2c_read+0xc>)
 80a15c0:	681b      	ldr	r3, [r3, #0]
 80a15c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a15c4:	9301      	str	r3, [sp, #4]
 80a15c6:	bd08      	pop	{r3, pc}
 80a15c8:	080601ac 	.word	0x080601ac

080a15cc <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 80a15cc:	b508      	push	{r3, lr}
 80a15ce:	4b02      	ldr	r3, [pc, #8]	; (80a15d8 <hal_i2c_peek+0xc>)
 80a15d0:	681b      	ldr	r3, [r3, #0]
 80a15d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a15d4:	9301      	str	r3, [sp, #4]
 80a15d6:	bd08      	pop	{r3, pc}
 80a15d8:	080601ac 	.word	0x080601ac

080a15dc <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 80a15dc:	b508      	push	{r3, lr}
 80a15de:	4b02      	ldr	r3, [pc, #8]	; (80a15e8 <hal_i2c_flush+0xc>)
 80a15e0:	681b      	ldr	r3, [r3, #0]
 80a15e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a15e4:	9301      	str	r3, [sp, #4]
 80a15e6:	bd08      	pop	{r3, pc}
 80a15e8:	080601ac 	.word	0x080601ac

080a15ec <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 80a15ec:	b508      	push	{r3, lr}
 80a15ee:	4b02      	ldr	r3, [pc, #8]	; (80a15f8 <hal_i2c_is_enabled+0xc>)
 80a15f0:	681b      	ldr	r3, [r3, #0]
 80a15f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a15f4:	9301      	str	r3, [sp, #4]
 80a15f6:	bd08      	pop	{r3, pc}
 80a15f8:	080601ac 	.word	0x080601ac

080a15fc <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 80a15fc:	b508      	push	{r3, lr}
 80a15fe:	4b03      	ldr	r3, [pc, #12]	; (80a160c <hal_i2c_init+0x10>)
 80a1600:	681b      	ldr	r3, [r3, #0]
 80a1602:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a1606:	9301      	str	r3, [sp, #4]
 80a1608:	bd08      	pop	{r3, pc}
 80a160a:	0000      	.short	0x0000
 80a160c:	080601ac 	.word	0x080601ac

080a1610 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 80a1610:	b508      	push	{r3, lr}
 80a1612:	4b02      	ldr	r3, [pc, #8]	; (80a161c <hal_spi_init+0xc>)
 80a1614:	681b      	ldr	r3, [r3, #0]
 80a1616:	69db      	ldr	r3, [r3, #28]
 80a1618:	9301      	str	r3, [sp, #4]
 80a161a:	bd08      	pop	{r3, pc}
 80a161c:	080601b4 	.word	0x080601b4

080a1620 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 80a1620:	b508      	push	{r3, lr}
 80a1622:	4b02      	ldr	r3, [pc, #8]	; (80a162c <hal_spi_is_enabled+0xc>)
 80a1624:	681b      	ldr	r3, [r3, #0]
 80a1626:	6a1b      	ldr	r3, [r3, #32]
 80a1628:	9301      	str	r3, [sp, #4]
 80a162a:	bd08      	pop	{r3, pc}
 80a162c:	080601b4 	.word	0x080601b4

080a1630 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a1630:	b508      	push	{r3, lr}
 80a1632:	4b02      	ldr	r3, [pc, #8]	; (80a163c <HAL_USB_USART_Init+0xc>)
 80a1634:	681b      	ldr	r3, [r3, #0]
 80a1636:	681b      	ldr	r3, [r3, #0]
 80a1638:	9301      	str	r3, [sp, #4]
 80a163a:	bd08      	pop	{r3, pc}
 80a163c:	080601d8 	.word	0x080601d8

080a1640 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a1640:	b508      	push	{r3, lr}
 80a1642:	4b02      	ldr	r3, [pc, #8]	; (80a164c <HAL_USB_USART_Available_Data+0xc>)
 80a1644:	681b      	ldr	r3, [r3, #0]
 80a1646:	691b      	ldr	r3, [r3, #16]
 80a1648:	9301      	str	r3, [sp, #4]
 80a164a:	bd08      	pop	{r3, pc}
 80a164c:	080601d8 	.word	0x080601d8

080a1650 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a1650:	b508      	push	{r3, lr}
 80a1652:	4b02      	ldr	r3, [pc, #8]	; (80a165c <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a1654:	681b      	ldr	r3, [r3, #0]
 80a1656:	695b      	ldr	r3, [r3, #20]
 80a1658:	9301      	str	r3, [sp, #4]
 80a165a:	bd08      	pop	{r3, pc}
 80a165c:	080601d8 	.word	0x080601d8

080a1660 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a1660:	b508      	push	{r3, lr}
 80a1662:	4b02      	ldr	r3, [pc, #8]	; (80a166c <HAL_USB_USART_Receive_Data+0xc>)
 80a1664:	681b      	ldr	r3, [r3, #0]
 80a1666:	699b      	ldr	r3, [r3, #24]
 80a1668:	9301      	str	r3, [sp, #4]
 80a166a:	bd08      	pop	{r3, pc}
 80a166c:	080601d8 	.word	0x080601d8

080a1670 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a1670:	b508      	push	{r3, lr}
 80a1672:	4b02      	ldr	r3, [pc, #8]	; (80a167c <HAL_USB_USART_Send_Data+0xc>)
 80a1674:	681b      	ldr	r3, [r3, #0]
 80a1676:	69db      	ldr	r3, [r3, #28]
 80a1678:	9301      	str	r3, [sp, #4]
 80a167a:	bd08      	pop	{r3, pc}
 80a167c:	080601d8 	.word	0x080601d8

080a1680 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a1680:	b508      	push	{r3, lr}
 80a1682:	4b02      	ldr	r3, [pc, #8]	; (80a168c <HAL_USB_USART_Flush_Data+0xc>)
 80a1684:	681b      	ldr	r3, [r3, #0]
 80a1686:	6a1b      	ldr	r3, [r3, #32]
 80a1688:	9301      	str	r3, [sp, #4]
 80a168a:	bd08      	pop	{r3, pc}
 80a168c:	080601d8 	.word	0x080601d8

080a1690 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a1690:	b508      	push	{r3, lr}
 80a1692:	4b02      	ldr	r3, [pc, #8]	; (80a169c <inet_gethostbyname+0xc>)
 80a1694:	681b      	ldr	r3, [r3, #0]
 80a1696:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a1698:	9301      	str	r3, [sp, #4]
 80a169a:	bd08      	pop	{r3, pc}
 80a169c:	080601c0 	.word	0x080601c0

080a16a0 <LED_SetSignalingColor>:
#endif // defined(DYNALIB_EXPORT)

DYNALIB_BEGIN(services)

DYNALIB_FN(0, services, LED_SetRGBColor, void(uint32_t))
DYNALIB_FN(1, services, LED_SetSignalingColor, void(uint32_t))
 80a16a0:	b508      	push	{r3, lr}
 80a16a2:	4b02      	ldr	r3, [pc, #8]	; (80a16ac <LED_SetSignalingColor+0xc>)
 80a16a4:	681b      	ldr	r3, [r3, #0]
 80a16a6:	685b      	ldr	r3, [r3, #4]
 80a16a8:	9301      	str	r3, [sp, #4]
 80a16aa:	bd08      	pop	{r3, pc}
 80a16ac:	080201a8 	.word	0x080201a8

080a16b0 <LED_Signaling_Start>:
DYNALIB_FN(2, services, LED_Signaling_Start, void(void))
 80a16b0:	b508      	push	{r3, lr}
 80a16b2:	4b02      	ldr	r3, [pc, #8]	; (80a16bc <LED_Signaling_Start+0xc>)
 80a16b4:	681b      	ldr	r3, [r3, #0]
 80a16b6:	689b      	ldr	r3, [r3, #8]
 80a16b8:	9301      	str	r3, [sp, #4]
 80a16ba:	bd08      	pop	{r3, pc}
 80a16bc:	080201a8 	.word	0x080201a8

080a16c0 <LED_Signaling_Stop>:
DYNALIB_FN(3, services, LED_Signaling_Stop, void(void))
 80a16c0:	b508      	push	{r3, lr}
 80a16c2:	4b02      	ldr	r3, [pc, #8]	; (80a16cc <LED_Signaling_Stop+0xc>)
 80a16c4:	681b      	ldr	r3, [r3, #0]
 80a16c6:	68db      	ldr	r3, [r3, #12]
 80a16c8:	9301      	str	r3, [sp, #4]
 80a16ca:	bd08      	pop	{r3, pc}
 80a16cc:	080201a8 	.word	0x080201a8

080a16d0 <LED_SetBrightness>:
DYNALIB_FN(4, services, LED_SetBrightness, void(uint8_t))
 80a16d0:	b508      	push	{r3, lr}
 80a16d2:	4b02      	ldr	r3, [pc, #8]	; (80a16dc <LED_SetBrightness+0xc>)
 80a16d4:	681b      	ldr	r3, [r3, #0]
 80a16d6:	691b      	ldr	r3, [r3, #16]
 80a16d8:	9301      	str	r3, [sp, #4]
 80a16da:	bd08      	pop	{r3, pc}
 80a16dc:	080201a8 	.word	0x080201a8

080a16e0 <LED_RGB_IsOverRidden>:
DYNALIB_FN(5, services, LED_RGB_Get, void(uint8_t*))
DYNALIB_FN(6, services, LED_RGB_IsOverRidden, bool(void))
 80a16e0:	b508      	push	{r3, lr}
 80a16e2:	4b02      	ldr	r3, [pc, #8]	; (80a16ec <LED_RGB_IsOverRidden+0xc>)
 80a16e4:	681b      	ldr	r3, [r3, #0]
 80a16e6:	699b      	ldr	r3, [r3, #24]
 80a16e8:	9301      	str	r3, [sp, #4]
 80a16ea:	bd08      	pop	{r3, pc}
 80a16ec:	080201a8 	.word	0x080201a8

080a16f0 <LED_On>:
DYNALIB_FN(7, services, LED_On, void(Led_TypeDef))
 80a16f0:	b508      	push	{r3, lr}
 80a16f2:	4b02      	ldr	r3, [pc, #8]	; (80a16fc <LED_On+0xc>)
 80a16f4:	681b      	ldr	r3, [r3, #0]
 80a16f6:	69db      	ldr	r3, [r3, #28]
 80a16f8:	9301      	str	r3, [sp, #4]
 80a16fa:	bd08      	pop	{r3, pc}
 80a16fc:	080201a8 	.word	0x080201a8

080a1700 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a1700:	b508      	push	{r3, lr}
 80a1702:	4b02      	ldr	r3, [pc, #8]	; (80a170c <set_system_mode+0xc>)
 80a1704:	681b      	ldr	r3, [r3, #0]
 80a1706:	685b      	ldr	r3, [r3, #4]
 80a1708:	9301      	str	r3, [sp, #4]
 80a170a:	bd08      	pop	{r3, pc}
 80a170c:	080601a4 	.word	0x080601a4

080a1710 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a1710:	b508      	push	{r3, lr}
 80a1712:	4b02      	ldr	r3, [pc, #8]	; (80a171c <system_delay_ms+0xc>)
 80a1714:	681b      	ldr	r3, [r3, #0]
 80a1716:	695b      	ldr	r3, [r3, #20]
 80a1718:	9301      	str	r3, [sp, #4]
 80a171a:	bd08      	pop	{r3, pc}
 80a171c:	080601a4 	.word	0x080601a4

080a1720 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a1720:	b508      	push	{r3, lr}
 80a1722:	4b03      	ldr	r3, [pc, #12]	; (80a1730 <system_ctrl_set_app_request_handler+0x10>)
 80a1724:	681b      	ldr	r3, [r3, #0]
 80a1726:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a172a:	9301      	str	r3, [sp, #4]
 80a172c:	bd08      	pop	{r3, pc}
 80a172e:	0000      	.short	0x0000
 80a1730:	080601a4 	.word	0x080601a4

080a1734 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a1734:	b508      	push	{r3, lr}
 80a1736:	4b03      	ldr	r3, [pc, #12]	; (80a1744 <system_ctrl_set_result+0x10>)
 80a1738:	681b      	ldr	r3, [r3, #0]
 80a173a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a173e:	9301      	str	r3, [sp, #4]
 80a1740:	bd08      	pop	{r3, pc}
 80a1742:	0000      	.short	0x0000
 80a1744:	080601a4 	.word	0x080601a4

080a1748 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a1748:	b508      	push	{r3, lr}
 80a174a:	4b02      	ldr	r3, [pc, #8]	; (80a1754 <network_connect+0xc>)
 80a174c:	681b      	ldr	r3, [r3, #0]
 80a174e:	685b      	ldr	r3, [r3, #4]
 80a1750:	9301      	str	r3, [sp, #4]
 80a1752:	bd08      	pop	{r3, pc}
 80a1754:	080601c8 	.word	0x080601c8

080a1758 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a1758:	b508      	push	{r3, lr}
 80a175a:	4b02      	ldr	r3, [pc, #8]	; (80a1764 <network_connecting+0xc>)
 80a175c:	681b      	ldr	r3, [r3, #0]
 80a175e:	689b      	ldr	r3, [r3, #8]
 80a1760:	9301      	str	r3, [sp, #4]
 80a1762:	bd08      	pop	{r3, pc}
 80a1764:	080601c8 	.word	0x080601c8

080a1768 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a1768:	b508      	push	{r3, lr}
 80a176a:	4b02      	ldr	r3, [pc, #8]	; (80a1774 <network_disconnect+0xc>)
 80a176c:	681b      	ldr	r3, [r3, #0]
 80a176e:	68db      	ldr	r3, [r3, #12]
 80a1770:	9301      	str	r3, [sp, #4]
 80a1772:	bd08      	pop	{r3, pc}
 80a1774:	080601c8 	.word	0x080601c8

080a1778 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a1778:	b508      	push	{r3, lr}
 80a177a:	4b02      	ldr	r3, [pc, #8]	; (80a1784 <network_ready+0xc>)
 80a177c:	681b      	ldr	r3, [r3, #0]
 80a177e:	691b      	ldr	r3, [r3, #16]
 80a1780:	9301      	str	r3, [sp, #4]
 80a1782:	bd08      	pop	{r3, pc}
 80a1784:	080601c8 	.word	0x080601c8

080a1788 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a1788:	b508      	push	{r3, lr}
 80a178a:	4b02      	ldr	r3, [pc, #8]	; (80a1794 <network_on+0xc>)
 80a178c:	681b      	ldr	r3, [r3, #0]
 80a178e:	695b      	ldr	r3, [r3, #20]
 80a1790:	9301      	str	r3, [sp, #4]
 80a1792:	bd08      	pop	{r3, pc}
 80a1794:	080601c8 	.word	0x080601c8

080a1798 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a1798:	b508      	push	{r3, lr}
 80a179a:	4b02      	ldr	r3, [pc, #8]	; (80a17a4 <network_off+0xc>)
 80a179c:	681b      	ldr	r3, [r3, #0]
 80a179e:	699b      	ldr	r3, [r3, #24]
 80a17a0:	9301      	str	r3, [sp, #4]
 80a17a2:	bd08      	pop	{r3, pc}
 80a17a4:	080601c8 	.word	0x080601c8

080a17a8 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a17a8:	b508      	push	{r3, lr}
 80a17aa:	4b02      	ldr	r3, [pc, #8]	; (80a17b4 <network_listen+0xc>)
 80a17ac:	681b      	ldr	r3, [r3, #0]
 80a17ae:	69db      	ldr	r3, [r3, #28]
 80a17b0:	9301      	str	r3, [sp, #4]
 80a17b2:	bd08      	pop	{r3, pc}
 80a17b4:	080601c8 	.word	0x080601c8

080a17b8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a17b8:	b508      	push	{r3, lr}
 80a17ba:	4b02      	ldr	r3, [pc, #8]	; (80a17c4 <network_listening+0xc>)
 80a17bc:	681b      	ldr	r3, [r3, #0]
 80a17be:	6a1b      	ldr	r3, [r3, #32]
 80a17c0:	9301      	str	r3, [sp, #4]
 80a17c2:	bd08      	pop	{r3, pc}
 80a17c4:	080601c8 	.word	0x080601c8

080a17c8 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a17c8:	b508      	push	{r3, lr}
 80a17ca:	4b02      	ldr	r3, [pc, #8]	; (80a17d4 <network_set_listen_timeout+0xc>)
 80a17cc:	681b      	ldr	r3, [r3, #0]
 80a17ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a17d0:	9301      	str	r3, [sp, #4]
 80a17d2:	bd08      	pop	{r3, pc}
 80a17d4:	080601c8 	.word	0x080601c8

080a17d8 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a17d8:	b508      	push	{r3, lr}
 80a17da:	4b02      	ldr	r3, [pc, #8]	; (80a17e4 <network_get_listen_timeout+0xc>)
 80a17dc:	681b      	ldr	r3, [r3, #0]
 80a17de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a17e0:	9301      	str	r3, [sp, #4]
 80a17e2:	bd08      	pop	{r3, pc}
 80a17e4:	080601c8 	.word	0x080601c8

080a17e8 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 80a17e8:	b508      	push	{r3, lr}
 80a17ea:	4b02      	ldr	r3, [pc, #8]	; (80a17f4 <network_is_on+0xc>)
 80a17ec:	681b      	ldr	r3, [r3, #0]
 80a17ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a17f0:	9301      	str	r3, [sp, #4]
 80a17f2:	bd08      	pop	{r3, pc}
 80a17f4:	080601c8 	.word	0x080601c8

080a17f8 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 80a17f8:	b508      	push	{r3, lr}
 80a17fa:	4b02      	ldr	r3, [pc, #8]	; (80a1804 <network_is_off+0xc>)
 80a17fc:	681b      	ldr	r3, [r3, #0]
 80a17fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a1800:	9301      	str	r3, [sp, #4]
 80a1802:	bd08      	pop	{r3, pc}
 80a1804:	080601c8 	.word	0x080601c8

080a1808 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a1808:	b508      	push	{r3, lr}
 80a180a:	4b02      	ldr	r3, [pc, #8]	; (80a1814 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a180c:	681b      	ldr	r3, [r3, #0]
 80a180e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a1810:	9301      	str	r3, [sp, #4]
 80a1812:	bd08      	pop	{r3, pc}
 80a1814:	080601cc 	.word	0x080601cc

080a1818 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a1818:	b508      	push	{r3, lr}
 80a181a:	4b02      	ldr	r3, [pc, #8]	; (80a1824 <malloc+0xc>)
 80a181c:	681b      	ldr	r3, [r3, #0]
 80a181e:	681b      	ldr	r3, [r3, #0]
 80a1820:	9301      	str	r3, [sp, #4]
 80a1822:	bd08      	pop	{r3, pc}
 80a1824:	080601a0 	.word	0x080601a0

080a1828 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a1828:	b508      	push	{r3, lr}
 80a182a:	4b02      	ldr	r3, [pc, #8]	; (80a1834 <free+0xc>)
 80a182c:	681b      	ldr	r3, [r3, #0]
 80a182e:	685b      	ldr	r3, [r3, #4]
 80a1830:	9301      	str	r3, [sp, #4]
 80a1832:	bd08      	pop	{r3, pc}
 80a1834:	080601a0 	.word	0x080601a0

080a1838 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 80a1838:	b508      	push	{r3, lr}
 80a183a:	4b02      	ldr	r3, [pc, #8]	; (80a1844 <newlib_impure_ptr_callback+0xc>)
 80a183c:	681b      	ldr	r3, [r3, #0]
 80a183e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a1840:	9301      	str	r3, [sp, #4]
 80a1842:	bd08      	pop	{r3, pc}
 80a1844:	080601a0 	.word	0x080601a0

080a1848 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 80a1848:	b570      	push	{r4, r5, r6, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 80a184a:	2600      	movs	r6, #0
 80a184c:	4604      	mov	r4, r0
 80a184e:	460d      	mov	r5, r1
 80a1850:	f840 6f08 	str.w	r6, [r0, #8]!
    {
        os_mutex_recursive_create(&handle_);
 80a1854:	f7ff fe52 	bl	80a14fc <os_mutex_recursive_create>
{
    _spi = spi;
    hal_spi_init(_spi);
 80a1858:	4628      	mov	r0, r5
    _spi = spi;
 80a185a:	7025      	strb	r5, [r4, #0]
    hal_spi_init(_spi);
 80a185c:	f7ff fed8 	bl	80a1610 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
}
 80a1860:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 80a1862:	6066      	str	r6, [r4, #4]
}
 80a1864:	bd70      	pop	{r4, r5, r6, pc}
	...

080a1868 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a1868:	2202      	movs	r2, #2

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 80a186a:	2000      	movs	r0, #0
 80a186c:	4b04      	ldr	r3, [pc, #16]	; (80a1880 <_GLOBAL__sub_I_System+0x18>)
 80a186e:	601a      	str	r2, [r3, #0]
 80a1870:	4b04      	ldr	r3, [pc, #16]	; (80a1884 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
 80a1872:	4a05      	ldr	r2, [pc, #20]	; (80a1888 <_GLOBAL__sub_I_System+0x20>)
              error_(SYSTEM_ERROR_NONE) {
 80a1874:	6018      	str	r0, [r3, #0]
 80a1876:	8098      	strh	r0, [r3, #4]
    SleepResult() {}
 80a1878:	7198      	strb	r0, [r3, #6]
 80a187a:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a187c:	f7ff bf40 	b.w	80a1700 <set_system_mode>
 80a1880:	2000009c 	.word	0x2000009c
 80a1884:	20000090 	.word	0x20000090
 80a1888:	ffff0000 	.word	0xffff0000

080a188c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a188c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a188e:	4606      	mov	r6, r0
 80a1890:	460d      	mov	r5, r1
  size_t n = 0;
 80a1892:	2400      	movs	r4, #0
 80a1894:	188f      	adds	r7, r1, r2
  while (size--) {
 80a1896:	42bd      	cmp	r5, r7
 80a1898:	d00c      	beq.n	80a18b4 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a189a:	6833      	ldr	r3, [r6, #0]
 80a189c:	4630      	mov	r0, r6
 80a189e:	689b      	ldr	r3, [r3, #8]
 80a18a0:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a18a4:	4798      	blx	r3
     if (chunk>=0)
 80a18a6:	1e03      	subs	r3, r0, #0
 80a18a8:	db01      	blt.n	80a18ae <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a18aa:	441c      	add	r4, r3
  while (size--) {
 80a18ac:	e7f3      	b.n	80a1896 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a18ae:	2c00      	cmp	r4, #0
 80a18b0:	bf08      	it	eq
 80a18b2:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 80a18b4:	4620      	mov	r0, r4
 80a18b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a18b8 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a18b8:	b570      	push	{r4, r5, r6, lr}
 80a18ba:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a18bc:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a18be:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 80a18c0:	b149      	cbz	r1, 80a18d6 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a18c2:	f000 fcd3 	bl	80a226c <strlen>
 80a18c6:	682b      	ldr	r3, [r5, #0]
 80a18c8:	4602      	mov	r2, r0
 80a18ca:	4621      	mov	r1, r4
 80a18cc:	4628      	mov	r0, r5
    }
 80a18ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return write((const uint8_t *)str, strlen(str));
 80a18d2:	68db      	ldr	r3, [r3, #12]
 80a18d4:	4718      	bx	r3
    }
 80a18d6:	bd70      	pop	{r4, r5, r6, pc}

080a18d8 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a18d8:	6803      	ldr	r3, [r0, #0]
 80a18da:	689b      	ldr	r3, [r3, #8]
 80a18dc:	4718      	bx	r3

080a18de <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a18de:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a18e0:	2a01      	cmp	r2, #1
 80a18e2:	bf98      	it	ls
 80a18e4:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a18e6:	b530      	push	{r4, r5, lr}
 80a18e8:	b08b      	sub	sp, #44	; 0x2c
 80a18ea:	460c      	mov	r4, r1
  *str = '\0';
 80a18ec:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 80a18f0:	a909      	add	r1, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 80a18f2:	4625      	mov	r5, r4
 80a18f4:	fbb4 f4f2 	udiv	r4, r4, r2
   char c = m - base * n;
 80a18f8:	fb04 5312 	mls	r3, r4, r2, r5
 80a18fc:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a18fe:	2b09      	cmp	r3, #9
 80a1900:	bf94      	ite	ls
 80a1902:	3330      	addls	r3, #48	; 0x30
 80a1904:	3337      	addhi	r3, #55	; 0x37
 80a1906:	b2db      	uxtb	r3, r3
  } while(n);
 80a1908:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a190a:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while(n);
 80a190e:	d9f0      	bls.n	80a18f2 <_ZN5Print11printNumberEmh+0x14>

  return write(str);
 80a1910:	f7ff ffd2 	bl	80a18b8 <_ZN5Print5writeEPKc>
}
 80a1914:	b00b      	add	sp, #44	; 0x2c
 80a1916:	bd30      	pop	{r4, r5, pc}

080a1918 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a1918:	2300      	movs	r3, #0
 80a191a:	6840      	ldr	r0, [r0, #4]
 80a191c:	461a      	mov	r2, r3
 80a191e:	4619      	mov	r1, r3
 80a1920:	f7ff bf32 	b.w	80a1788 <network_on>

080a1924 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a1924:	4b01      	ldr	r3, [pc, #4]	; (80a192c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a1926:	4a02      	ldr	r2, [pc, #8]	; (80a1930 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a1928:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 80a192a:	4770      	bx	lr
 80a192c:	200000a0 	.word	0x200000a0
 80a1930:	080a2374 	.word	0x080a2374

080a1934 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a1934:	4b02      	ldr	r3, [pc, #8]	; (80a1940 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a1936:	681a      	ldr	r2, [r3, #0]
 80a1938:	4b02      	ldr	r3, [pc, #8]	; (80a1944 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a193a:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 80a193c:	4770      	bx	lr
 80a193e:	bf00      	nop
 80a1940:	20000000 	.word	0x20000000
 80a1944:	200000a4 	.word	0x200000a4

080a1948 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a1948:	2100      	movs	r1, #0
 80a194a:	f7ff bee1 	b.w	80a1710 <system_delay_ms>

080a194e <_ZN8RGBClass7controlEb>:
{
    return LED_RGB_IsOverRidden();
}

void RGBClass::control(bool override)
{
 80a194e:	b510      	push	{r4, lr}
 80a1950:	4604      	mov	r4, r0
    return LED_RGB_IsOverRidden();
 80a1952:	f7ff fec5 	bl	80a16e0 <LED_RGB_IsOverRidden>
    if (override == controlled()) {
 80a1956:	4284      	cmp	r4, r0
 80a1958:	d008      	beq.n	80a196c <_ZN8RGBClass7controlEb+0x1e>
        return;
    } else if (override) {
 80a195a:	b11c      	cbz	r4, 80a1964 <_ZN8RGBClass7controlEb+0x16>
        LED_Signaling_Start();
    } else {
        LED_Signaling_Stop();
    }
}
 80a195c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        LED_Signaling_Start();
 80a1960:	f7ff bea6 	b.w	80a16b0 <LED_Signaling_Start>
}
 80a1964:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        LED_Signaling_Stop();
 80a1968:	f7ff beaa 	b.w	80a16c0 <LED_Signaling_Stop>
}
 80a196c:	bd10      	pop	{r4, pc}

080a196e <_ZN8RGBClass5colorEiii>:
void RGBClass::color(uint32_t rgb) {
    color((rgb>>16)&0xFF, (rgb>>8)&0xFF, (rgb)&0xFF);
}

void RGBClass::color(int red, int green, int blue)
{
 80a196e:	b570      	push	{r4, r5, r6, lr}
 80a1970:	4605      	mov	r5, r0
 80a1972:	460e      	mov	r6, r1
 80a1974:	4614      	mov	r4, r2
    return LED_RGB_IsOverRidden();
 80a1976:	f7ff feb3 	bl	80a16e0 <LED_RGB_IsOverRidden>
    if (!controlled()) {
 80a197a:	b150      	cbz	r0, 80a1992 <_ZN8RGBClass5colorEiii+0x24>
        return;
    }
    LED_SetSignalingColor(red << 16 | green << 8 | blue);
 80a197c:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
 80a1980:	ea44 4005 	orr.w	r0, r4, r5, lsl #16
 80a1984:	f7ff fe8c 	bl	80a16a0 <LED_SetSignalingColor>
    LED_On(LED_RGB);
}
 80a1988:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    LED_On(LED_RGB);
 80a198c:	20e7      	movs	r0, #231	; 0xe7
 80a198e:	f7ff beaf 	b.w	80a16f0 <LED_On>
}
 80a1992:	bd70      	pop	{r4, r5, r6, pc}

080a1994 <_ZN8RGBClass10brightnessEhb>:

void RGBClass::brightness(uint8_t brightness, bool update)
{
 80a1994:	b510      	push	{r4, lr}
 80a1996:	460c      	mov	r4, r1
    LED_SetBrightness(brightness);
 80a1998:	f7ff fe9a 	bl	80a16d0 <LED_SetBrightness>
    return LED_RGB_IsOverRidden();
 80a199c:	f7ff fea0 	bl	80a16e0 <LED_RGB_IsOverRidden>
    if (controlled() && update) {
 80a19a0:	b128      	cbz	r0, 80a19ae <_ZN8RGBClass10brightnessEhb+0x1a>
 80a19a2:	b124      	cbz	r4, 80a19ae <_ZN8RGBClass10brightnessEhb+0x1a>
        LED_On(LED_RGB);
    }
}
 80a19a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        LED_On(LED_RGB);
 80a19a8:	20e7      	movs	r0, #231	; 0xe7
 80a19aa:	f7ff bea1 	b.w	80a16f0 <LED_On>
}
 80a19ae:	bd10      	pop	{r4, pc}

080a19b0 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 80a19b0:	2200      	movs	r2, #0
 80a19b2:	4b01      	ldr	r3, [pc, #4]	; (80a19b8 <_GLOBAL__sub_I_RGB+0x8>)
 80a19b4:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
 80a19b6:	4770      	bx	lr
 80a19b8:	200000a8 	.word	0x200000a8

080a19bc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 80a19bc:	4b01      	ldr	r3, [pc, #4]	; (80a19c4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 80a19be:	6018      	str	r0, [r3, #0]
    }, nullptr);
 80a19c0:	4770      	bx	lr
 80a19c2:	bf00      	nop
 80a19c4:	20000004 	.word	0x20000004

080a19c8 <serialEventRun>:
{
 80a19c8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a19ca:	4b13      	ldr	r3, [pc, #76]	; (80a1a18 <serialEventRun+0x50>)
 80a19cc:	b143      	cbz	r3, 80a19e0 <serialEventRun+0x18>
 80a19ce:	f000 f963 	bl	80a1c98 <_Z16_fetch_usbserialv>
 80a19d2:	6803      	ldr	r3, [r0, #0]
 80a19d4:	691b      	ldr	r3, [r3, #16]
 80a19d6:	4798      	blx	r3
 80a19d8:	2800      	cmp	r0, #0
 80a19da:	dd01      	ble.n	80a19e0 <serialEventRun+0x18>
        serialEvent();
 80a19dc:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
 80a19e0:	4b0e      	ldr	r3, [pc, #56]	; (80a1a1c <serialEventRun+0x54>)
 80a19e2:	b143      	cbz	r3, 80a19f6 <serialEventRun+0x2e>
 80a19e4:	f000 f9fa 	bl	80a1ddc <_Z22__fetch_global_Serial1v>
 80a19e8:	6803      	ldr	r3, [r0, #0]
 80a19ea:	691b      	ldr	r3, [r3, #16]
 80a19ec:	4798      	blx	r3
 80a19ee:	2800      	cmp	r0, #0
 80a19f0:	dd01      	ble.n	80a19f6 <serialEventRun+0x2e>
        serialEvent1();
 80a19f2:	f3af 8000 	nop.w
    if (serialEventRun2) serialEventRun2();
 80a19f6:	4b0a      	ldr	r3, [pc, #40]	; (80a1a20 <serialEventRun+0x58>)
 80a19f8:	b10b      	cbz	r3, 80a19fe <serialEventRun+0x36>
 80a19fa:	f3af 8000 	nop.w
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a19fe:	4b09      	ldr	r3, [pc, #36]	; (80a1a24 <serialEventRun+0x5c>)
 80a1a00:	b143      	cbz	r3, 80a1a14 <serialEventRun+0x4c>
 80a1a02:	f000 f975 	bl	80a1cf0 <_Z17_fetch_usbserial1v>
 80a1a06:	6803      	ldr	r3, [r0, #0]
 80a1a08:	691b      	ldr	r3, [r3, #16]
 80a1a0a:	4798      	blx	r3
 80a1a0c:	2800      	cmp	r0, #0
 80a1a0e:	dd01      	ble.n	80a1a14 <serialEventRun+0x4c>
        usbSerialEvent1();
 80a1a10:	f3af 8000 	nop.w
}
 80a1a14:	bd08      	pop	{r3, pc}
 80a1a16:	bf00      	nop
	...

080a1a28 <_post_loop>:
{
 80a1a28:	b508      	push	{r3, lr}
	serialEventRun();
 80a1a2a:	f7ff ffcd 	bl	80a19c8 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a1a2e:	f7ff fd5d 	bl	80a14ec <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a1a32:	4b01      	ldr	r3, [pc, #4]	; (80a1a38 <_post_loop+0x10>)
 80a1a34:	6018      	str	r0, [r3, #0]
}
 80a1a36:	bd08      	pop	{r3, pc}
 80a1a38:	20000130 	.word	0x20000130

080a1a3c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a1a3c:	4805      	ldr	r0, [pc, #20]	; (80a1a54 <_Z33system_initialize_user_backup_ramv+0x18>)
 80a1a3e:	4a06      	ldr	r2, [pc, #24]	; (80a1a58 <_Z33system_initialize_user_backup_ramv+0x1c>)
{
 80a1a40:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a1a42:	1a12      	subs	r2, r2, r0
 80a1a44:	4905      	ldr	r1, [pc, #20]	; (80a1a5c <_Z33system_initialize_user_backup_ramv+0x20>)
 80a1a46:	f000 fbd7 	bl	80a21f8 <memcpy>
    __backup_sram_signature = signature;
 80a1a4a:	4b05      	ldr	r3, [pc, #20]	; (80a1a60 <_Z33system_initialize_user_backup_ramv+0x24>)
 80a1a4c:	4a05      	ldr	r2, [pc, #20]	; (80a1a64 <_Z33system_initialize_user_backup_ramv+0x28>)
 80a1a4e:	601a      	str	r2, [r3, #0]
}
 80a1a50:	bd08      	pop	{r3, pc}
 80a1a52:	bf00      	nop
 80a1a54:	40024000 	.word	0x40024000
 80a1a58:	40024004 	.word	0x40024004
 80a1a5c:	080a24d0 	.word	0x080a24d0
 80a1a60:	40024000 	.word	0x40024000
 80a1a64:	9a271c1e 	.word	0x9a271c1e

080a1a68 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a1a68:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a1a6a:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a1a6c:	461a      	mov	r2, r3
 80a1a6e:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a1a72:	9300      	str	r3, [sp, #0]
 80a1a74:	f7ff fe5e 	bl	80a1734 <system_ctrl_set_result>
}
 80a1a78:	b003      	add	sp, #12
 80a1a7a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a1a80 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 80a1a80:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a1a82:	8843      	ldrh	r3, [r0, #2]
 80a1a84:	2b0a      	cmp	r3, #10
 80a1a86:	d008      	beq.n	80a1a9a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a1a88:	2b50      	cmp	r3, #80	; 0x50
 80a1a8a:	d10b      	bne.n	80a1aa4 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 80a1a8c:	4b09      	ldr	r3, [pc, #36]	; (80a1ab4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a1a8e:	681b      	ldr	r3, [r3, #0]
 80a1a90:	b14b      	cbz	r3, 80a1aa6 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 80a1a92:	b003      	add	sp, #12
 80a1a94:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 80a1a98:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 80a1a9a:	f7ff ffe5 	bl	80a1a68 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 80a1a9e:	b003      	add	sp, #12
 80a1aa0:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a1aa4:	2300      	movs	r3, #0
 80a1aa6:	461a      	mov	r2, r3
 80a1aa8:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a1aac:	9300      	str	r3, [sp, #0]
 80a1aae:	f7ff fe41 	bl	80a1734 <system_ctrl_set_result>
}
 80a1ab2:	e7f4      	b.n	80a1a9e <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 80a1ab4:	200000bc 	.word	0x200000bc

080a1ab8 <module_user_init_hook>:
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a1ab8:	2100      	movs	r1, #0
{
 80a1aba:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a1abc:	4811      	ldr	r0, [pc, #68]	; (80a1b04 <module_user_init_hook+0x4c>)
 80a1abe:	f7ff febb 	bl	80a1838 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
 80a1ac2:	4b11      	ldr	r3, [pc, #68]	; (80a1b08 <module_user_init_hook+0x50>)
 80a1ac4:	681a      	ldr	r2, [r3, #0]
 80a1ac6:	4b11      	ldr	r3, [pc, #68]	; (80a1b0c <module_user_init_hook+0x54>)
 80a1ac8:	429a      	cmp	r2, r3
 80a1aca:	bf0c      	ite	eq
 80a1acc:	2201      	moveq	r2, #1
 80a1ace:	2200      	movne	r2, #0
 80a1ad0:	4b0f      	ldr	r3, [pc, #60]	; (80a1b10 <module_user_init_hook+0x58>)
 80a1ad2:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a1ad4:	d001      	beq.n	80a1ada <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
 80a1ad6:	f7ff ffb1 	bl	80a1a3c <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a1ada:	f7ff fcf7 	bl	80a14cc <HAL_RNG_GetRandomNumber>
 80a1ade:	4604      	mov	r4, r0
    srand(seed);
 80a1ae0:	f000 fba0 	bl	80a2224 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a1ae4:	4b0b      	ldr	r3, [pc, #44]	; (80a1b14 <module_user_init_hook+0x5c>)
 80a1ae6:	b113      	cbz	r3, 80a1aee <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
 80a1ae8:	4620      	mov	r0, r4
 80a1aea:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a1aee:	2100      	movs	r1, #0
 80a1af0:	4808      	ldr	r0, [pc, #32]	; (80a1b14 <module_user_init_hook+0x5c>)
 80a1af2:	f7ff fe89 	bl	80a1808 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a1af6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a1afa:	2100      	movs	r1, #0
 80a1afc:	4806      	ldr	r0, [pc, #24]	; (80a1b18 <module_user_init_hook+0x60>)
 80a1afe:	f7ff be0f 	b.w	80a1720 <system_ctrl_set_app_request_handler>
 80a1b02:	bf00      	nop
 80a1b04:	080a19bd 	.word	0x080a19bd
 80a1b08:	40024000 	.word	0x40024000
 80a1b0c:	9a271c1e 	.word	0x9a271c1e
 80a1b10:	200000b8 	.word	0x200000b8
 80a1b14:	00000000 	.word	0x00000000
 80a1b18:	080a1a81 	.word	0x080a1a81

080a1b1c <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a1b1c:	4770      	bx	lr

080a1b1e <_ZN9IPAddressD0Ev>:
 80a1b1e:	b510      	push	{r4, lr}
 80a1b20:	4604      	mov	r4, r0
 80a1b22:	2118      	movs	r1, #24
 80a1b24:	f000 fb5e 	bl	80a21e4 <_ZdlPvj>
 80a1b28:	4620      	mov	r0, r4
 80a1b2a:	bd10      	pop	{r4, pc}

080a1b2c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a1b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1b2e:	460e      	mov	r6, r1
 80a1b30:	2400      	movs	r4, #0
 80a1b32:	f100 0708 	add.w	r7, r0, #8
 80a1b36:	1d05      	adds	r5, r0, #4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 80a1b38:	f817 1d01 	ldrb.w	r1, [r7, #-1]!
 80a1b3c:	220a      	movs	r2, #10
 80a1b3e:	4630      	mov	r0, r6
 80a1b40:	f7ff fecd 	bl	80a18de <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a1b44:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a1b46:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 80a1b48:	d101      	bne.n	80a1b4e <_ZNK9IPAddress7printToER5Print+0x22>
    }
    return n;
}
 80a1b4a:	4620      	mov	r0, r4
 80a1b4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (n)
 80a1b4e:	2c00      	cmp	r4, #0
 80a1b50:	d0f2      	beq.n	80a1b38 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a1b52:	212e      	movs	r1, #46	; 0x2e
 80a1b54:	4630      	mov	r0, r6
 80a1b56:	f7ff febf 	bl	80a18d8 <_ZN5Print5printEc>
 80a1b5a:	4404      	add	r4, r0
 80a1b5c:	e7ec      	b.n	80a1b38 <_ZNK9IPAddress7printToER5Print+0xc>
	...

080a1b60 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 80a1b60:	b510      	push	{r4, lr}
 80a1b62:	4604      	mov	r4, r0
 80a1b64:	4b04      	ldr	r3, [pc, #16]	; (80a1b78 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a1b66:	2211      	movs	r2, #17
 80a1b68:	2100      	movs	r1, #0
 80a1b6a:	f840 3b04 	str.w	r3, [r0], #4
 80a1b6e:	f000 fb51 	bl	80a2214 <memset>
}
 80a1b72:	4620      	mov	r0, r4
 80a1b74:	bd10      	pop	{r4, pc}
 80a1b76:	bf00      	nop
 80a1b78:	080a239c 	.word	0x080a239c

080a1b7c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 80a1b7c:	4603      	mov	r3, r0
 80a1b7e:	4a07      	ldr	r2, [pc, #28]	; (80a1b9c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a1b80:	b510      	push	{r4, lr}
 80a1b82:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 80a1b86:	f101 0210 	add.w	r2, r1, #16
 80a1b8a:	f851 4b04 	ldr.w	r4, [r1], #4
 80a1b8e:	4291      	cmp	r1, r2
 80a1b90:	f843 4b04 	str.w	r4, [r3], #4
 80a1b94:	d1f9      	bne.n	80a1b8a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a1b96:	780a      	ldrb	r2, [r1, #0]
 80a1b98:	701a      	strb	r2, [r3, #0]
}
 80a1b9a:	bd10      	pop	{r4, pc}
 80a1b9c:	080a239c 	.word	0x080a239c

080a1ba0 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t address)
 80a1ba0:	4a02      	ldr	r2, [pc, #8]	; (80a1bac <_ZN9IPAddressC1Em+0xc>)
    address.ipv4 = ipv4;
 80a1ba2:	e9c0 2100 	strd	r2, r1, [r0]
        address.v = version;
 80a1ba6:	2204      	movs	r2, #4
 80a1ba8:	7502      	strb	r2, [r0, #20]
}
 80a1baa:	4770      	bx	lr
 80a1bac:	080a239c 	.word	0x080a239c

080a1bb0 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 80a1bb0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a1bb2:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a1bb6:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 80a1bba:	2304      	movs	r3, #4
 80a1bbc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80a1bc0:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 80a1bc4:	6044      	str	r4, [r0, #4]
 80a1bc6:	7503      	strb	r3, [r0, #20]
}
 80a1bc8:	bd10      	pop	{r4, pc}
	...

080a1bcc <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a1bcc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a1bce:	4d04      	ldr	r5, [pc, #16]	; (80a1be0 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a1bd0:	6005      	str	r5, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a1bd2:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a1bd6:	9500      	str	r5, [sp, #0]
 80a1bd8:	f7ff ffea 	bl	80a1bb0 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a1bdc:	b003      	add	sp, #12
 80a1bde:	bd30      	pop	{r4, r5, pc}
 80a1be0:	080a239c 	.word	0x080a239c

080a1be4 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a1be4:	7441      	strb	r1, [r0, #17]
}
 80a1be6:	4770      	bx	lr

080a1be8 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a1be8:	4770      	bx	lr

080a1bea <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a1bea:	4770      	bx	lr

080a1bec <_ZN9USBSerial4readEv>:
{
 80a1bec:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a1bee:	2100      	movs	r1, #0
 80a1bf0:	7c00      	ldrb	r0, [r0, #16]
 80a1bf2:	f7ff fd35 	bl	80a1660 <HAL_USB_USART_Receive_Data>
}
 80a1bf6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a1bfa:	bd08      	pop	{r3, pc}

080a1bfc <_ZN9USBSerial4peekEv>:
{
 80a1bfc:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a1bfe:	2101      	movs	r1, #1
 80a1c00:	7c00      	ldrb	r0, [r0, #16]
 80a1c02:	f7ff fd2d 	bl	80a1660 <HAL_USB_USART_Receive_Data>
}
 80a1c06:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a1c0a:	bd08      	pop	{r3, pc}

080a1c0c <_ZN9USBSerial17availableForWriteEv>:
{
 80a1c0c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a1c0e:	7c00      	ldrb	r0, [r0, #16]
 80a1c10:	f7ff fd1e 	bl	80a1650 <HAL_USB_USART_Available_Data_For_Write>
}
 80a1c14:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1c18:	bd08      	pop	{r3, pc}

080a1c1a <_ZN9USBSerial9availableEv>:
{
 80a1c1a:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a1c1c:	7c00      	ldrb	r0, [r0, #16]
 80a1c1e:	f7ff fd0f 	bl	80a1640 <HAL_USB_USART_Available_Data>
}
 80a1c22:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1c26:	bd08      	pop	{r3, pc}

080a1c28 <_ZN9USBSerial5writeEh>:
{
 80a1c28:	b538      	push	{r3, r4, r5, lr}
 80a1c2a:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a1c2c:	7c00      	ldrb	r0, [r0, #16]
{
 80a1c2e:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a1c30:	f7ff fd0e 	bl	80a1650 <HAL_USB_USART_Available_Data_For_Write>
 80a1c34:	2800      	cmp	r0, #0
 80a1c36:	dc01      	bgt.n	80a1c3c <_ZN9USBSerial5writeEh+0x14>
 80a1c38:	7c60      	ldrb	r0, [r4, #17]
 80a1c3a:	b128      	cbz	r0, 80a1c48 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a1c3c:	4629      	mov	r1, r5
 80a1c3e:	7c20      	ldrb	r0, [r4, #16]
 80a1c40:	f7ff fd16 	bl	80a1670 <HAL_USB_USART_Send_Data>
 80a1c44:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 80a1c48:	bd38      	pop	{r3, r4, r5, pc}

080a1c4a <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 80a1c4a:	7c00      	ldrb	r0, [r0, #16]
 80a1c4c:	f7ff bd18 	b.w	80a1680 <HAL_USB_USART_Flush_Data>

080a1c50 <_ZN9USBSerialD0Ev>:
 80a1c50:	b510      	push	{r4, lr}
 80a1c52:	4604      	mov	r4, r0
 80a1c54:	2114      	movs	r1, #20
 80a1c56:	f000 fac5 	bl	80a21e4 <_ZdlPvj>
 80a1c5a:	4620      	mov	r0, r4
 80a1c5c:	bd10      	pop	{r4, pc}

080a1c5e <__tcf_1>:
 80a1c5e:	4770      	bx	lr

080a1c60 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a1c60:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a1c62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1c66:	4604      	mov	r4, r0
 80a1c68:	4608      	mov	r0, r1
 80a1c6a:	2100      	movs	r1, #0
 80a1c6c:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a1c70:	4b04      	ldr	r3, [pc, #16]	; (80a1c84 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 80a1c72:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a1c74:	6023      	str	r3, [r4, #0]
  _blocking = true;
 80a1c76:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 80a1c78:	4611      	mov	r1, r2
  _blocking = true;
 80a1c7a:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 80a1c7c:	f7ff fcd8 	bl	80a1630 <HAL_USB_USART_Init>
}
 80a1c80:	4620      	mov	r0, r4
 80a1c82:	bd10      	pop	{r4, pc}
 80a1c84:	080a23b0 	.word	0x080a23b0

080a1c88 <_Z19acquireSerialBufferv>:
{
 80a1c88:	b510      	push	{r4, lr}
 80a1c8a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a1c8c:	2214      	movs	r2, #20
 80a1c8e:	2100      	movs	r1, #0
 80a1c90:	f000 fac0 	bl	80a2214 <memset>
}
 80a1c94:	4620      	mov	r0, r4
 80a1c96:	bd10      	pop	{r4, pc}

080a1c98 <_Z16_fetch_usbserialv>:
{
 80a1c98:	b530      	push	{r4, r5, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a1c9a:	4d0e      	ldr	r5, [pc, #56]	; (80a1cd4 <_Z16_fetch_usbserialv+0x3c>)
{
 80a1c9c:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a1c9e:	a801      	add	r0, sp, #4
 80a1ca0:	f7ff fff2 	bl	80a1c88 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a1ca4:	7829      	ldrb	r1, [r5, #0]
 80a1ca6:	f3bf 8f5b 	dmb	ish
 80a1caa:	f011 0401 	ands.w	r4, r1, #1
 80a1cae:	d10e      	bne.n	80a1cce <_Z16_fetch_usbserialv+0x36>
 80a1cb0:	4628      	mov	r0, r5
 80a1cb2:	f7fe f9f6 	bl	80a00a2 <__cxa_guard_acquire>
 80a1cb6:	b150      	cbz	r0, 80a1cce <_Z16_fetch_usbserialv+0x36>
 80a1cb8:	4621      	mov	r1, r4
 80a1cba:	aa01      	add	r2, sp, #4
 80a1cbc:	4806      	ldr	r0, [pc, #24]	; (80a1cd8 <_Z16_fetch_usbserialv+0x40>)
 80a1cbe:	f7ff ffcf 	bl	80a1c60 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a1cc2:	4628      	mov	r0, r5
 80a1cc4:	f7fe f9f2 	bl	80a00ac <__cxa_guard_release>
 80a1cc8:	4804      	ldr	r0, [pc, #16]	; (80a1cdc <_Z16_fetch_usbserialv+0x44>)
 80a1cca:	f000 fa8f 	bl	80a21ec <atexit>
	return _usbserial;
}
 80a1cce:	4802      	ldr	r0, [pc, #8]	; (80a1cd8 <_Z16_fetch_usbserialv+0x40>)
 80a1cd0:	b007      	add	sp, #28
 80a1cd2:	bd30      	pop	{r4, r5, pc}
 80a1cd4:	200000c0 	.word	0x200000c0
 80a1cd8:	200000c8 	.word	0x200000c8
 80a1cdc:	080a1be9 	.word	0x080a1be9

080a1ce0 <_Z23acquireUSBSerial1Bufferv>:
 80a1ce0:	b510      	push	{r4, lr}
 80a1ce2:	4604      	mov	r4, r0
 80a1ce4:	2214      	movs	r2, #20
 80a1ce6:	2100      	movs	r1, #0
 80a1ce8:	f000 fa94 	bl	80a2214 <memset>
 80a1cec:	4620      	mov	r0, r4
 80a1cee:	bd10      	pop	{r4, pc}

080a1cf0 <_Z17_fetch_usbserial1v>:

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a1cf0:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a1cf2:	4c0e      	ldr	r4, [pc, #56]	; (80a1d2c <_Z17_fetch_usbserial1v+0x3c>)
{
 80a1cf4:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a1cf6:	a801      	add	r0, sp, #4
 80a1cf8:	f7ff fff2 	bl	80a1ce0 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a1cfc:	7823      	ldrb	r3, [r4, #0]
 80a1cfe:	f3bf 8f5b 	dmb	ish
 80a1d02:	07db      	lsls	r3, r3, #31
 80a1d04:	d40e      	bmi.n	80a1d24 <_Z17_fetch_usbserial1v+0x34>
 80a1d06:	4620      	mov	r0, r4
 80a1d08:	f7fe f9cb 	bl	80a00a2 <__cxa_guard_acquire>
 80a1d0c:	b150      	cbz	r0, 80a1d24 <_Z17_fetch_usbserial1v+0x34>
 80a1d0e:	2101      	movs	r1, #1
 80a1d10:	aa01      	add	r2, sp, #4
 80a1d12:	4807      	ldr	r0, [pc, #28]	; (80a1d30 <_Z17_fetch_usbserial1v+0x40>)
 80a1d14:	f7ff ffa4 	bl	80a1c60 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a1d18:	4620      	mov	r0, r4
 80a1d1a:	f7fe f9c7 	bl	80a00ac <__cxa_guard_release>
 80a1d1e:	4805      	ldr	r0, [pc, #20]	; (80a1d34 <_Z17_fetch_usbserial1v+0x44>)
 80a1d20:	f000 fa64 	bl	80a21ec <atexit>
  return _usbserial1;
}
 80a1d24:	4802      	ldr	r0, [pc, #8]	; (80a1d30 <_Z17_fetch_usbserial1v+0x40>)
 80a1d26:	b006      	add	sp, #24
 80a1d28:	bd10      	pop	{r4, pc}
 80a1d2a:	bf00      	nop
 80a1d2c:	200000c4 	.word	0x200000c4
 80a1d30:	200000dc 	.word	0x200000dc
 80a1d34:	080a1c5f 	.word	0x080a1c5f

080a1d38 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
 80a1d38:	4770      	bx	lr

080a1d3a <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a1d3a:	7441      	strb	r1, [r0, #17]
}
 80a1d3c:	4770      	bx	lr

080a1d3e <__tcf_0>:
    serial1_rx_buffer = new hal_usart_ring_buffer_t();
  }
  if (!serial1_tx_buffer) {
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
 80a1d3e:	4770      	bx	lr

080a1d40 <_ZN11USARTSerial17availableForWriteEv>:
{
 80a1d40:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 80a1d42:	7c00      	ldrb	r0, [r0, #16]
 80a1d44:	f7ff fc22 	bl	80a158c <hal_usart_available_data_for_write>
}
 80a1d48:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1d4c:	bd08      	pop	{r3, pc}

080a1d4e <_ZN11USARTSerial9availableEv>:
{
 80a1d4e:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 80a1d50:	7c00      	ldrb	r0, [r0, #16]
 80a1d52:	f7ff fbf3 	bl	80a153c <hal_usart_available>
}
 80a1d56:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1d5a:	bd08      	pop	{r3, pc}

080a1d5c <_ZN11USARTSerial4peekEv>:
{
 80a1d5c:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 80a1d5e:	7c00      	ldrb	r0, [r0, #16]
 80a1d60:	f7ff fbfc 	bl	80a155c <hal_usart_peek>
}
 80a1d64:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a1d68:	bd08      	pop	{r3, pc}

080a1d6a <_ZN11USARTSerial4readEv>:
{
 80a1d6a:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 80a1d6c:	7c00      	ldrb	r0, [r0, #16]
 80a1d6e:	f7ff fbed 	bl	80a154c <hal_usart_read>
}
 80a1d72:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a1d76:	bd08      	pop	{r3, pc}

080a1d78 <_ZN11USARTSerial5flushEv>:
  hal_usart_flush(_serial);
 80a1d78:	7c00      	ldrb	r0, [r0, #16]
 80a1d7a:	f7ff bbf7 	b.w	80a156c <hal_usart_flush>

080a1d7e <_ZN11USARTSerial5writeEh>:
{
 80a1d7e:	b570      	push	{r4, r5, r6, lr}
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a1d80:	7c46      	ldrb	r6, [r0, #17]
{
 80a1d82:	4604      	mov	r4, r0
 80a1d84:	460d      	mov	r5, r1
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a1d86:	b12e      	cbz	r6, 80a1d94 <_ZN11USARTSerial5writeEh+0x16>
	  return hal_usart_write(_serial, c);
 80a1d88:	4629      	mov	r1, r5
 80a1d8a:	7c20      	ldrb	r0, [r4, #16]
}
 80a1d8c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  return hal_usart_write(_serial, c);
 80a1d90:	f7ff bbcc 	b.w	80a152c <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a1d94:	7c00      	ldrb	r0, [r0, #16]
 80a1d96:	f7ff fbf9 	bl	80a158c <hal_usart_available_data_for_write>
 80a1d9a:	2800      	cmp	r0, #0
 80a1d9c:	dcf4      	bgt.n	80a1d88 <_ZN11USARTSerial5writeEh+0xa>
}
 80a1d9e:	4630      	mov	r0, r6
 80a1da0:	bd70      	pop	{r4, r5, r6, pc}

080a1da2 <_ZN11USARTSerialD0Ev>:
 80a1da2:	b510      	push	{r4, lr}
 80a1da4:	4604      	mov	r4, r0
 80a1da6:	2114      	movs	r1, #20
 80a1da8:	f000 fa1c 	bl	80a21e4 <_ZdlPvj>
 80a1dac:	4620      	mov	r0, r4
 80a1dae:	bd10      	pop	{r4, pc}

080a1db0 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
 80a1db0:	f04f 0c00 	mov.w	ip, #0
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a1db4:	b510      	push	{r4, lr}
 80a1db6:	4604      	mov	r4, r0
 80a1db8:	4608      	mov	r0, r1
 80a1dba:	4611      	mov	r1, r2
 80a1dbc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a1dc0:	e9c4 c201 	strd	ip, r2, [r4, #4]
 80a1dc4:	4a04      	ldr	r2, [pc, #16]	; (80a1dd8 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
  _serial = serial;
 80a1dc6:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a1dc8:	6022      	str	r2, [r4, #0]
  _blocking = true;
 80a1dca:	2201      	movs	r2, #1
 80a1dcc:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
 80a1dce:	461a      	mov	r2, r3
 80a1dd0:	f7ff fba4 	bl	80a151c <hal_usart_init>
}
 80a1dd4:	4620      	mov	r0, r4
 80a1dd6:	bd10      	pop	{r4, pc}
 80a1dd8:	080a23e0 	.word	0x080a23e0

080a1ddc <_Z22__fetch_global_Serial1v>:
{
 80a1ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (!serial1_rx_buffer) {
 80a1dde:	4c19      	ldr	r4, [pc, #100]	; (80a1e44 <_Z22__fetch_global_Serial1v+0x68>)
 80a1de0:	6826      	ldr	r6, [r4, #0]
 80a1de2:	b94e      	cbnz	r6, 80a1df8 <_Z22__fetch_global_Serial1v+0x1c>
    serial1_rx_buffer = new hal_usart_ring_buffer_t();
 80a1de4:	2084      	movs	r0, #132	; 0x84
 80a1de6:	f7fe f956 	bl	80a0096 <_Znwj>
 80a1dea:	4605      	mov	r5, r0
 80a1dec:	b118      	cbz	r0, 80a1df6 <_Z22__fetch_global_Serial1v+0x1a>
 80a1dee:	2284      	movs	r2, #132	; 0x84
 80a1df0:	4631      	mov	r1, r6
 80a1df2:	f000 fa0f 	bl	80a2214 <memset>
 80a1df6:	6025      	str	r5, [r4, #0]
  if (!serial1_tx_buffer) {
 80a1df8:	4d13      	ldr	r5, [pc, #76]	; (80a1e48 <_Z22__fetch_global_Serial1v+0x6c>)
 80a1dfa:	682f      	ldr	r7, [r5, #0]
 80a1dfc:	b94f      	cbnz	r7, 80a1e12 <_Z22__fetch_global_Serial1v+0x36>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
 80a1dfe:	2084      	movs	r0, #132	; 0x84
 80a1e00:	f7fe f949 	bl	80a0096 <_Znwj>
 80a1e04:	4606      	mov	r6, r0
 80a1e06:	b118      	cbz	r0, 80a1e10 <_Z22__fetch_global_Serial1v+0x34>
 80a1e08:	2284      	movs	r2, #132	; 0x84
 80a1e0a:	4639      	mov	r1, r7
 80a1e0c:	f000 fa02 	bl	80a2214 <memset>
 80a1e10:	602e      	str	r6, [r5, #0]
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
 80a1e12:	4f0e      	ldr	r7, [pc, #56]	; (80a1e4c <_Z22__fetch_global_Serial1v+0x70>)
 80a1e14:	7839      	ldrb	r1, [r7, #0]
 80a1e16:	f3bf 8f5b 	dmb	ish
 80a1e1a:	f011 0601 	ands.w	r6, r1, #1
 80a1e1e:	d10f      	bne.n	80a1e40 <_Z22__fetch_global_Serial1v+0x64>
 80a1e20:	4638      	mov	r0, r7
 80a1e22:	f7fe f93e 	bl	80a00a2 <__cxa_guard_acquire>
 80a1e26:	b158      	cbz	r0, 80a1e40 <_Z22__fetch_global_Serial1v+0x64>
 80a1e28:	4631      	mov	r1, r6
 80a1e2a:	682b      	ldr	r3, [r5, #0]
 80a1e2c:	6822      	ldr	r2, [r4, #0]
 80a1e2e:	4808      	ldr	r0, [pc, #32]	; (80a1e50 <_Z22__fetch_global_Serial1v+0x74>)
 80a1e30:	f7ff ffbe 	bl	80a1db0 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
 80a1e34:	4638      	mov	r0, r7
 80a1e36:	f7fe f939 	bl	80a00ac <__cxa_guard_release>
 80a1e3a:	4806      	ldr	r0, [pc, #24]	; (80a1e54 <_Z22__fetch_global_Serial1v+0x78>)
 80a1e3c:	f000 f9d6 	bl	80a21ec <atexit>
#endif
	return serial1;
}
 80a1e40:	4803      	ldr	r0, [pc, #12]	; (80a1e50 <_Z22__fetch_global_Serial1v+0x74>)
 80a1e42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a1e44:	200000f4 	.word	0x200000f4
 80a1e48:	200000f8 	.word	0x200000f8
 80a1e4c:	200000f0 	.word	0x200000f0
 80a1e50:	200000fc 	.word	0x200000fc
 80a1e54:	080a1d3f 	.word	0x080a1d3f

080a1e58 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 80a1e58:	4770      	bx	lr

080a1e5a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a1e5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1e5c:	4606      	mov	r6, r0
 80a1e5e:	4615      	mov	r5, r2
 80a1e60:	460c      	mov	r4, r1
 80a1e62:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a1e64:	42bc      	cmp	r4, r7
 80a1e66:	d006      	beq.n	80a1e76 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a1e68:	6833      	ldr	r3, [r6, #0]
 80a1e6a:	4630      	mov	r0, r6
 80a1e6c:	689b      	ldr	r3, [r3, #8]
 80a1e6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a1e72:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 80a1e74:	e7f6      	b.n	80a1e64 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 80a1e76:	4628      	mov	r0, r5
 80a1e78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1e7a <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 80a1e7a:	2200      	movs	r2, #0
 80a1e7c:	7c00      	ldrb	r0, [r0, #16]
 80a1e7e:	f7ff bb8d 	b.w	80a159c <hal_i2c_write>

080a1e82 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 80a1e82:	2100      	movs	r1, #0
 80a1e84:	7c00      	ldrb	r0, [r0, #16]
 80a1e86:	f7ff bb91 	b.w	80a15ac <hal_i2c_available>

080a1e8a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 80a1e8a:	2100      	movs	r1, #0
 80a1e8c:	7c00      	ldrb	r0, [r0, #16]
 80a1e8e:	f7ff bb95 	b.w	80a15bc <hal_i2c_read>

080a1e92 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 80a1e92:	2100      	movs	r1, #0
 80a1e94:	7c00      	ldrb	r0, [r0, #16]
 80a1e96:	f7ff bb99 	b.w	80a15cc <hal_i2c_peek>

080a1e9a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 80a1e9a:	2100      	movs	r1, #0
 80a1e9c:	7c00      	ldrb	r0, [r0, #16]
 80a1e9e:	f7ff bb9d 	b.w	80a15dc <hal_i2c_flush>

080a1ea2 <_ZN7TwoWireD0Ev>:
 80a1ea2:	b510      	push	{r4, lr}
 80a1ea4:	4604      	mov	r4, r0
 80a1ea6:	2114      	movs	r1, #20
 80a1ea8:	f000 f99c 	bl	80a21e4 <_ZdlPvj>
 80a1eac:	4620      	mov	r0, r4
 80a1eae:	bd10      	pop	{r4, pc}

080a1eb0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a1eb0:	b510      	push	{r4, lr}
 80a1eb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1eb6:	4604      	mov	r4, r0
 80a1eb8:	4608      	mov	r0, r1
 80a1eba:	2100      	movs	r1, #0
 80a1ebc:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a1ec0:	4b03      	ldr	r3, [pc, #12]	; (80a1ed0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
  hal_i2c_init(_i2c, &conf);
 80a1ec2:	4611      	mov	r1, r2
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a1ec4:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
 80a1ec6:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
 80a1ec8:	f7ff fb98 	bl	80a15fc <hal_i2c_init>
}
 80a1ecc:	4620      	mov	r0, r4
 80a1ece:	bd10      	pop	{r4, pc}
 80a1ed0:	080a2410 	.word	0x080a2410

080a1ed4 <_ZN5spark9WiFiClass5readyEv>:
        return network_ready(*this, 0, NULL);
 80a1ed4:	2200      	movs	r2, #0
 80a1ed6:	6840      	ldr	r0, [r0, #4]
 80a1ed8:	4611      	mov	r1, r2
 80a1eda:	f7ff bc4d 	b.w	80a1778 <network_ready>

080a1ede <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a1ede:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a1ee0:	4615      	mov	r5, r2
 80a1ee2:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a1ee4:	2211      	movs	r2, #17
    IPAddress resolve(const char* name)
 80a1ee6:	460e      	mov	r6, r1
 80a1ee8:	4604      	mov	r4, r0
        HAL_IPAddress ip = {};
 80a1eea:	2100      	movs	r1, #0
 80a1eec:	a803      	add	r0, sp, #12
 80a1eee:	f000 f991 	bl	80a2214 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a1ef2:	4628      	mov	r0, r5
 80a1ef4:	f000 f9ba 	bl	80a226c <strlen>
 80a1ef8:	2700      	movs	r7, #0
 80a1efa:	b281      	uxth	r1, r0
 80a1efc:	6873      	ldr	r3, [r6, #4]
 80a1efe:	4628      	mov	r0, r5
 80a1f00:	9700      	str	r7, [sp, #0]
 80a1f02:	aa03      	add	r2, sp, #12
 80a1f04:	f7ff fbc4 	bl	80a1690 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a1f08:	b130      	cbz	r0, 80a1f18 <_ZN5spark9WiFiClass7resolveEPKc+0x3a>
 80a1f0a:	4639      	mov	r1, r7
 80a1f0c:	4620      	mov	r0, r4
 80a1f0e:	f7ff fe47 	bl	80a1ba0 <_ZN9IPAddressC1Em>
    }
 80a1f12:	4620      	mov	r0, r4
 80a1f14:	b009      	add	sp, #36	; 0x24
 80a1f16:	bdf0      	pop	{r4, r5, r6, r7, pc}
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a1f18:	4620      	mov	r0, r4
 80a1f1a:	a903      	add	r1, sp, #12
 80a1f1c:	f7ff fe2e 	bl	80a1b7c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 80a1f20:	e7f7      	b.n	80a1f12 <_ZN5spark9WiFiClass7resolveEPKc+0x34>

080a1f22 <_ZN5spark9WiFiClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 80a1f22:	2200      	movs	r2, #0
 80a1f24:	6840      	ldr	r0, [r0, #4]
 80a1f26:	4611      	mov	r1, r2
 80a1f28:	f7ff bc46 	b.w	80a17b8 <network_listening>

080a1f2c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 80a1f2c:	2200      	movs	r2, #0
 80a1f2e:	6840      	ldr	r0, [r0, #4]
 80a1f30:	4611      	mov	r1, r2
 80a1f32:	f7ff bc51 	b.w	80a17d8 <network_get_listen_timeout>

080a1f36 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 80a1f36:	2200      	movs	r2, #0
 80a1f38:	6840      	ldr	r0, [r0, #4]
 80a1f3a:	f7ff bc45 	b.w	80a17c8 <network_set_listen_timeout>

080a1f3e <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 80a1f3e:	2200      	movs	r2, #0
 80a1f40:	6840      	ldr	r0, [r0, #4]
 80a1f42:	f081 0101 	eor.w	r1, r1, #1
 80a1f46:	f7ff bc2f 	b.w	80a17a8 <network_listen>

080a1f4a <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 80a1f4a:	2300      	movs	r3, #0
 80a1f4c:	6840      	ldr	r0, [r0, #4]
 80a1f4e:	461a      	mov	r2, r3
 80a1f50:	4619      	mov	r1, r3
 80a1f52:	f7ff bc21 	b.w	80a1798 <network_off>

080a1f56 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 80a1f56:	2200      	movs	r2, #0
 80a1f58:	6840      	ldr	r0, [r0, #4]
 80a1f5a:	4611      	mov	r1, r2
 80a1f5c:	f7ff bbfc 	b.w	80a1758 <network_connecting>

080a1f60 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a1f60:	2200      	movs	r2, #0
 80a1f62:	2102      	movs	r1, #2
 80a1f64:	6840      	ldr	r0, [r0, #4]
 80a1f66:	f7ff bbff 	b.w	80a1768 <network_disconnect>

080a1f6a <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 80a1f6a:	2300      	movs	r3, #0
 80a1f6c:	6840      	ldr	r0, [r0, #4]
 80a1f6e:	461a      	mov	r2, r3
 80a1f70:	f7ff bbea 	b.w	80a1748 <network_connect>

080a1f74 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a1f74:	2204      	movs	r2, #4
 80a1f76:	4b02      	ldr	r3, [pc, #8]	; (80a1f80 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a1f78:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a1f7a:	4a02      	ldr	r2, [pc, #8]	; (80a1f84 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a1f7c:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 80a1f7e:	4770      	bx	lr
 80a1f80:	20000110 	.word	0x20000110
 80a1f84:	080a2438 	.word	0x080a2438

080a1f88 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a1f88:	2300      	movs	r3, #0
 80a1f8a:	6840      	ldr	r0, [r0, #4]
 80a1f8c:	461a      	mov	r2, r3
 80a1f8e:	f7ff bbdb 	b.w	80a1748 <network_connect>

080a1f92 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a1f92:	2200      	movs	r2, #0
 80a1f94:	2102      	movs	r1, #2
 80a1f96:	6840      	ldr	r0, [r0, #4]
 80a1f98:	f7ff bbe6 	b.w	80a1768 <network_disconnect>

080a1f9c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a1f9c:	2200      	movs	r2, #0
 80a1f9e:	6840      	ldr	r0, [r0, #4]
 80a1fa0:	4611      	mov	r1, r2
 80a1fa2:	f7ff bbd9 	b.w	80a1758 <network_connecting>

080a1fa6 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a1fa6:	2200      	movs	r2, #0
 80a1fa8:	6840      	ldr	r0, [r0, #4]
 80a1faa:	4611      	mov	r1, r2
 80a1fac:	f7ff bbe4 	b.w	80a1778 <network_ready>

080a1fb0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a1fb0:	2300      	movs	r3, #0
 80a1fb2:	6840      	ldr	r0, [r0, #4]
 80a1fb4:	461a      	mov	r2, r3
 80a1fb6:	4619      	mov	r1, r3
 80a1fb8:	f7ff bbe6 	b.w	80a1788 <network_on>

080a1fbc <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a1fbc:	2300      	movs	r3, #0
 80a1fbe:	6840      	ldr	r0, [r0, #4]
 80a1fc0:	461a      	mov	r2, r3
 80a1fc2:	4619      	mov	r1, r3
 80a1fc4:	f7ff bbe8 	b.w	80a1798 <network_off>

080a1fc8 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 80a1fc8:	2100      	movs	r1, #0
 80a1fca:	6840      	ldr	r0, [r0, #4]
 80a1fcc:	f7ff bc0c 	b.w	80a17e8 <network_is_on>

080a1fd0 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 80a1fd0:	2100      	movs	r1, #0
 80a1fd2:	6840      	ldr	r0, [r0, #4]
 80a1fd4:	f7ff bc10 	b.w	80a17f8 <network_is_off>

080a1fd8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a1fd8:	2200      	movs	r2, #0
 80a1fda:	6840      	ldr	r0, [r0, #4]
 80a1fdc:	f081 0101 	eor.w	r1, r1, #1
 80a1fe0:	f7ff bbe2 	b.w	80a17a8 <network_listen>

080a1fe4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a1fe4:	2200      	movs	r2, #0
 80a1fe6:	6840      	ldr	r0, [r0, #4]
 80a1fe8:	f7ff bbee 	b.w	80a17c8 <network_set_listen_timeout>

080a1fec <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a1fec:	2200      	movs	r2, #0
 80a1fee:	6840      	ldr	r0, [r0, #4]
 80a1ff0:	4611      	mov	r1, r2
 80a1ff2:	f7ff bbf1 	b.w	80a17d8 <network_get_listen_timeout>

080a1ff6 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a1ff6:	2200      	movs	r2, #0
 80a1ff8:	6840      	ldr	r0, [r0, #4]
 80a1ffa:	4611      	mov	r1, r2
 80a1ffc:	f7ff bbdc 	b.w	80a17b8 <network_listening>

080a2000 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a2000:	b570      	push	{r4, r5, r6, lr}
 80a2002:	4615      	mov	r5, r2
 80a2004:	b08e      	sub	sp, #56	; 0x38
 80a2006:	4604      	mov	r4, r0
    IPAddress addr;
 80a2008:	a808      	add	r0, sp, #32
 80a200a:	f7ff fda9 	bl	80a1b60 <_ZN9IPAddressC1Ev>
        HAL_IPAddress ip = {};
 80a200e:	2211      	movs	r2, #17
 80a2010:	2100      	movs	r1, #0
 80a2012:	a803      	add	r0, sp, #12
 80a2014:	f000 f8fe 	bl	80a2214 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a2018:	2600      	movs	r6, #0
 80a201a:	4628      	mov	r0, r5
 80a201c:	f000 f926 	bl	80a226c <strlen>
 80a2020:	4b0a      	ldr	r3, [pc, #40]	; (80a204c <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a2022:	9600      	str	r6, [sp, #0]
 80a2024:	b281      	uxth	r1, r0
 80a2026:	685b      	ldr	r3, [r3, #4]
 80a2028:	4628      	mov	r0, r5
 80a202a:	aa03      	add	r2, sp, #12
 80a202c:	f7ff fb30 	bl	80a1690 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a2030:	b130      	cbz	r0, 80a2040 <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 80a2032:	4631      	mov	r1, r6
 80a2034:	4620      	mov	r0, r4
 80a2036:	f7ff fdb3 	bl	80a1ba0 <_ZN9IPAddressC1Em>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a203a:	4620      	mov	r0, r4
 80a203c:	b00e      	add	sp, #56	; 0x38
 80a203e:	bd70      	pop	{r4, r5, r6, pc}
 80a2040:	4620      	mov	r0, r4
 80a2042:	a903      	add	r1, sp, #12
 80a2044:	f7ff fd9a 	bl	80a1b7c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    virtual ~IPAddress() {}
 80a2048:	e7f7      	b.n	80a203a <_ZN5spark12NetworkClass7resolveEPKc+0x3a>
 80a204a:	bf00      	nop
 80a204c:	20000110 	.word	0x20000110

080a2050 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 80a2050:	4b02      	ldr	r3, [pc, #8]	; (80a205c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a2052:	4a03      	ldr	r2, [pc, #12]	; (80a2060 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a2054:	601a      	str	r2, [r3, #0]
 80a2056:	2200      	movs	r2, #0
 80a2058:	605a      	str	r2, [r3, #4]

} // spark
 80a205a:	4770      	bx	lr
 80a205c:	20000118 	.word	0x20000118
 80a2060:	080a2474 	.word	0x080a2474

080a2064 <__tcf_0>:
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80a2064:	4b02      	ldr	r3, [pc, #8]	; (80a2070 <__tcf_0+0xc>)
 80a2066:	6898      	ldr	r0, [r3, #8]
 80a2068:	b108      	cbz	r0, 80a206e <__tcf_0+0xa>
            os_mutex_recursive_destroy(handle_);
 80a206a:	f7ff ba4f 	b.w	80a150c <os_mutex_recursive_destroy>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80a206e:	4770      	bx	lr
 80a2070:	20000124 	.word	0x20000124

080a2074 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 80a2074:	2817      	cmp	r0, #23
bool pinAvailable(uint16_t pin) {
 80a2076:	b570      	push	{r4, r5, r6, lr}
 80a2078:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 80a207a:	d901      	bls.n	80a2080 <pinAvailable+0xc>
    return false;
 80a207c:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 80a207e:	bd70      	pop	{r4, r5, r6, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a2080:	f1a0 030d 	sub.w	r3, r0, #13
 80a2084:	2b02      	cmp	r3, #2
 80a2086:	d90b      	bls.n	80a20a0 <pinAvailable+0x2c>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 80a2088:	2801      	cmp	r0, #1
 80a208a:	d824      	bhi.n	80a20d6 <pinAvailable+0x62>
 80a208c:	f000 f886 	bl	80a219c <_Z19__fetch_global_Wirev>
 80a2090:	2100      	movs	r1, #0
 80a2092:	7c00      	ldrb	r0, [r0, #16]
 80a2094:	f7ff faaa 	bl	80a15ec <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a2098:	f080 0001 	eor.w	r0, r0, #1
 80a209c:	b2c0      	uxtb	r0, r0
 80a209e:	e7ee      	b.n	80a207e <pinAvailable+0xa>
 80a20a0:	4e12      	ldr	r6, [pc, #72]	; (80a20ec <pinAvailable+0x78>)
 80a20a2:	7831      	ldrb	r1, [r6, #0]
 80a20a4:	f3bf 8f5b 	dmb	ish
 80a20a8:	f011 0501 	ands.w	r5, r1, #1
 80a20ac:	d10d      	bne.n	80a20ca <pinAvailable+0x56>
 80a20ae:	4630      	mov	r0, r6
 80a20b0:	f7fd fff7 	bl	80a00a2 <__cxa_guard_acquire>
 80a20b4:	b148      	cbz	r0, 80a20ca <pinAvailable+0x56>
 80a20b6:	4629      	mov	r1, r5
 80a20b8:	480d      	ldr	r0, [pc, #52]	; (80a20f0 <pinAvailable+0x7c>)
 80a20ba:	f7ff fbc5 	bl	80a1848 <_ZN8SPIClassC1E19hal_spi_interface_t>
 80a20be:	4630      	mov	r0, r6
 80a20c0:	f7fd fff4 	bl	80a00ac <__cxa_guard_release>
 80a20c4:	480b      	ldr	r0, [pc, #44]	; (80a20f4 <pinAvailable+0x80>)
 80a20c6:	f000 f891 	bl	80a21ec <atexit>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a20ca:	4b09      	ldr	r3, [pc, #36]	; (80a20f0 <pinAvailable+0x7c>)
 80a20cc:	7818      	ldrb	r0, [r3, #0]
 80a20ce:	f7ff faa7 	bl	80a1620 <hal_spi_is_enabled>
 80a20d2:	2800      	cmp	r0, #0
 80a20d4:	d1d2      	bne.n	80a207c <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a20d6:	3c12      	subs	r4, #18
 80a20d8:	2c01      	cmp	r4, #1
 80a20da:	d805      	bhi.n	80a20e8 <pinAvailable+0x74>
 80a20dc:	f7ff fe7e 	bl	80a1ddc <_Z22__fetch_global_Serial1v>
 80a20e0:	7c00      	ldrb	r0, [r0, #16]
 80a20e2:	f7ff fa4b 	bl	80a157c <hal_usart_is_enabled>
 80a20e6:	e7d7      	b.n	80a2098 <pinAvailable+0x24>
  return true; // 'pin' is available
 80a20e8:	2001      	movs	r0, #1
 80a20ea:	e7c8      	b.n	80a207e <pinAvailable+0xa>
 80a20ec:	20000120 	.word	0x20000120
 80a20f0:	20000124 	.word	0x20000124
 80a20f4:	080a2065 	.word	0x080a2065

080a20f8 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a20f8:	2817      	cmp	r0, #23
{
 80a20fa:	b538      	push	{r3, r4, r5, lr}
 80a20fc:	4604      	mov	r4, r0
 80a20fe:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a2100:	d80a      	bhi.n	80a2118 <pinMode+0x20>
 80a2102:	29ff      	cmp	r1, #255	; 0xff
 80a2104:	d008      	beq.n	80a2118 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 80a2106:	f7ff ffb5 	bl	80a2074 <pinAvailable>
 80a210a:	b128      	cbz	r0, 80a2118 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
 80a210c:	4629      	mov	r1, r5
 80a210e:	4620      	mov	r0, r4
}
 80a2110:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
 80a2114:	f7ff b9c2 	b.w	80a149c <HAL_Pin_Mode>
}
 80a2118:	bd38      	pop	{r3, r4, r5, pc}

080a211a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a211a:	b538      	push	{r3, r4, r5, lr}
 80a211c:	4604      	mov	r4, r0
 80a211e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a2120:	f7ff f9c4 	bl	80a14ac <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a2124:	28ff      	cmp	r0, #255	; 0xff
 80a2126:	d010      	beq.n	80a214a <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 80a2128:	2806      	cmp	r0, #6
 80a212a:	d804      	bhi.n	80a2136 <digitalWrite+0x1c>
 80a212c:	234d      	movs	r3, #77	; 0x4d
 80a212e:	fa23 f000 	lsr.w	r0, r3, r0
 80a2132:	07c3      	lsls	r3, r0, #31
 80a2134:	d409      	bmi.n	80a214a <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a2136:	4620      	mov	r0, r4
 80a2138:	f7ff ff9c 	bl	80a2074 <pinAvailable>
 80a213c:	b128      	cbz	r0, 80a214a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a213e:	4629      	mov	r1, r5
 80a2140:	4620      	mov	r0, r4
}
 80a2142:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
 80a2146:	f7ff b9b9 	b.w	80a14bc <HAL_GPIO_Write>
}
 80a214a:	bd38      	pop	{r3, r4, r5, pc}

080a214c <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a214c:	2300      	movs	r3, #0
 80a214e:	b507      	push	{r0, r1, r2, lr}
 80a2150:	461a      	mov	r2, r3
 80a2152:	4619      	mov	r1, r3
 80a2154:	9300      	str	r3, [sp, #0]
 80a2156:	4803      	ldr	r0, [pc, #12]	; (80a2164 <_GLOBAL__sub_I_INADDR_NONE+0x18>)
 80a2158:	f7ff fd38 	bl	80a1bcc <_ZN9IPAddressC1Ehhhh>
 80a215c:	b003      	add	sp, #12
 80a215e:	f85d fb04 	ldr.w	pc, [sp], #4
 80a2162:	bf00      	nop
 80a2164:	20000134 	.word	0x20000134

080a2168 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a2168:	4770      	bx	lr
	...

080a216c <_Z17acquireWireBufferv>:
	hal_i2c_config_t config = {
 80a216c:	2300      	movs	r3, #0
{
 80a216e:	b570      	push	{r4, r5, r6, lr}
	hal_i2c_config_t config = {
 80a2170:	2520      	movs	r5, #32
 80a2172:	8043      	strh	r3, [r0, #2]
 80a2174:	2314      	movs	r3, #20
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a2176:	4e08      	ldr	r6, [pc, #32]	; (80a2198 <_Z17acquireWireBufferv+0x2c>)
{
 80a2178:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 80a217a:	8003      	strh	r3, [r0, #0]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a217c:	4631      	mov	r1, r6
	hal_i2c_config_t config = {
 80a217e:	6085      	str	r5, [r0, #8]
 80a2180:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a2182:	4628      	mov	r0, r5
 80a2184:	f000 f830 	bl	80a21e8 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a2188:	4631      	mov	r1, r6
	};
 80a218a:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a218c:	4628      	mov	r0, r5
 80a218e:	f000 f82b 	bl	80a21e8 <_ZnajRKSt9nothrow_t>
	};
 80a2192:	60e0      	str	r0, [r4, #12]
}
 80a2194:	4620      	mov	r0, r4
 80a2196:	bd70      	pop	{r4, r5, r6, pc}
 80a2198:	080a24a8 	.word	0x080a24a8

080a219c <_Z19__fetch_global_Wirev>:
{
 80a219c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a219e:	4d0e      	ldr	r5, [pc, #56]	; (80a21d8 <_Z19__fetch_global_Wirev+0x3c>)
{
 80a21a0:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a21a2:	7829      	ldrb	r1, [r5, #0]
 80a21a4:	f3bf 8f5b 	dmb	ish
 80a21a8:	f011 0401 	ands.w	r4, r1, #1
 80a21ac:	d111      	bne.n	80a21d2 <_Z19__fetch_global_Wirev+0x36>
 80a21ae:	4628      	mov	r0, r5
 80a21b0:	f7fd ff77 	bl	80a00a2 <__cxa_guard_acquire>
 80a21b4:	b168      	cbz	r0, 80a21d2 <_Z19__fetch_global_Wirev+0x36>
 80a21b6:	a801      	add	r0, sp, #4
 80a21b8:	f7ff ffd8 	bl	80a216c <_Z17acquireWireBufferv>
 80a21bc:	4621      	mov	r1, r4
 80a21be:	aa01      	add	r2, sp, #4
 80a21c0:	4806      	ldr	r0, [pc, #24]	; (80a21dc <_Z19__fetch_global_Wirev+0x40>)
 80a21c2:	f7ff fe75 	bl	80a1eb0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 80a21c6:	4628      	mov	r0, r5
 80a21c8:	f7fd ff70 	bl	80a00ac <__cxa_guard_release>
 80a21cc:	4804      	ldr	r0, [pc, #16]	; (80a21e0 <_Z19__fetch_global_Wirev+0x44>)
 80a21ce:	f000 f80d 	bl	80a21ec <atexit>
	return wire;
}
 80a21d2:	4802      	ldr	r0, [pc, #8]	; (80a21dc <_Z19__fetch_global_Wirev+0x40>)
 80a21d4:	b007      	add	sp, #28
 80a21d6:	bd30      	pop	{r4, r5, pc}
 80a21d8:	2000014c 	.word	0x2000014c
 80a21dc:	20000150 	.word	0x20000150
 80a21e0:	080a2169 	.word	0x080a2169

080a21e4 <_ZdlPvj>:
 80a21e4:	f7fd bf5b 	b.w	80a009e <_ZdlPv>

080a21e8 <_ZnajRKSt9nothrow_t>:
 80a21e8:	f7fd bf57 	b.w	80a009a <_Znaj>

080a21ec <atexit>:
 80a21ec:	2300      	movs	r3, #0
 80a21ee:	4601      	mov	r1, r0
 80a21f0:	461a      	mov	r2, r3
 80a21f2:	4618      	mov	r0, r3
 80a21f4:	f000 b842 	b.w	80a227c <__register_exitproc>

080a21f8 <memcpy>:
 80a21f8:	440a      	add	r2, r1
 80a21fa:	4291      	cmp	r1, r2
 80a21fc:	f100 33ff 	add.w	r3, r0, #4294967295
 80a2200:	d100      	bne.n	80a2204 <memcpy+0xc>
 80a2202:	4770      	bx	lr
 80a2204:	b510      	push	{r4, lr}
 80a2206:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a220a:	4291      	cmp	r1, r2
 80a220c:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a2210:	d1f9      	bne.n	80a2206 <memcpy+0xe>
 80a2212:	bd10      	pop	{r4, pc}

080a2214 <memset>:
 80a2214:	4603      	mov	r3, r0
 80a2216:	4402      	add	r2, r0
 80a2218:	4293      	cmp	r3, r2
 80a221a:	d100      	bne.n	80a221e <memset+0xa>
 80a221c:	4770      	bx	lr
 80a221e:	f803 1b01 	strb.w	r1, [r3], #1
 80a2222:	e7f9      	b.n	80a2218 <memset+0x4>

080a2224 <srand>:
 80a2224:	b538      	push	{r3, r4, r5, lr}
 80a2226:	4b0d      	ldr	r3, [pc, #52]	; (80a225c <srand+0x38>)
 80a2228:	4604      	mov	r4, r0
 80a222a:	681d      	ldr	r5, [r3, #0]
 80a222c:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a222e:	b97b      	cbnz	r3, 80a2250 <srand+0x2c>
 80a2230:	2018      	movs	r0, #24
 80a2232:	f7ff faf1 	bl	80a1818 <malloc>
 80a2236:	4a0a      	ldr	r2, [pc, #40]	; (80a2260 <srand+0x3c>)
 80a2238:	4b0a      	ldr	r3, [pc, #40]	; (80a2264 <srand+0x40>)
 80a223a:	63a8      	str	r0, [r5, #56]	; 0x38
 80a223c:	e9c0 2300 	strd	r2, r3, [r0]
 80a2240:	4b09      	ldr	r3, [pc, #36]	; (80a2268 <srand+0x44>)
 80a2242:	2201      	movs	r2, #1
 80a2244:	6083      	str	r3, [r0, #8]
 80a2246:	230b      	movs	r3, #11
 80a2248:	8183      	strh	r3, [r0, #12]
 80a224a:	2300      	movs	r3, #0
 80a224c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a2250:	2200      	movs	r2, #0
 80a2252:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a2254:	611c      	str	r4, [r3, #16]
 80a2256:	615a      	str	r2, [r3, #20]
 80a2258:	bd38      	pop	{r3, r4, r5, pc}
 80a225a:	bf00      	nop
 80a225c:	20000004 	.word	0x20000004
 80a2260:	abcd330e 	.word	0xabcd330e
 80a2264:	e66d1234 	.word	0xe66d1234
 80a2268:	0005deec 	.word	0x0005deec

080a226c <strlen>:
 80a226c:	4603      	mov	r3, r0
 80a226e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a2272:	2a00      	cmp	r2, #0
 80a2274:	d1fb      	bne.n	80a226e <strlen+0x2>
 80a2276:	1a18      	subs	r0, r3, r0
 80a2278:	3801      	subs	r0, #1
 80a227a:	4770      	bx	lr

080a227c <__register_exitproc>:
 80a227c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a2280:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 80a2340 <__register_exitproc+0xc4>
 80a2284:	4606      	mov	r6, r0
 80a2286:	f8d8 0000 	ldr.w	r0, [r8]
 80a228a:	461f      	mov	r7, r3
 80a228c:	460d      	mov	r5, r1
 80a228e:	4691      	mov	r9, r2
 80a2290:	f000 f858 	bl	80a2344 <__retarget_lock_acquire_recursive>
 80a2294:	4b26      	ldr	r3, [pc, #152]	; (80a2330 <__register_exitproc+0xb4>)
 80a2296:	681c      	ldr	r4, [r3, #0]
 80a2298:	b934      	cbnz	r4, 80a22a8 <__register_exitproc+0x2c>
 80a229a:	4c26      	ldr	r4, [pc, #152]	; (80a2334 <__register_exitproc+0xb8>)
 80a229c:	601c      	str	r4, [r3, #0]
 80a229e:	4b26      	ldr	r3, [pc, #152]	; (80a2338 <__register_exitproc+0xbc>)
 80a22a0:	b113      	cbz	r3, 80a22a8 <__register_exitproc+0x2c>
 80a22a2:	681b      	ldr	r3, [r3, #0]
 80a22a4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80a22a8:	6863      	ldr	r3, [r4, #4]
 80a22aa:	2b1f      	cmp	r3, #31
 80a22ac:	dd07      	ble.n	80a22be <__register_exitproc+0x42>
 80a22ae:	f8d8 0000 	ldr.w	r0, [r8]
 80a22b2:	f000 f849 	bl	80a2348 <__retarget_lock_release_recursive>
 80a22b6:	f04f 30ff 	mov.w	r0, #4294967295
 80a22ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a22be:	b35e      	cbz	r6, 80a2318 <__register_exitproc+0x9c>
 80a22c0:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80a22c4:	b988      	cbnz	r0, 80a22ea <__register_exitproc+0x6e>
 80a22c6:	4b1d      	ldr	r3, [pc, #116]	; (80a233c <__register_exitproc+0xc0>)
 80a22c8:	b923      	cbnz	r3, 80a22d4 <__register_exitproc+0x58>
 80a22ca:	f8d8 0000 	ldr.w	r0, [r8]
 80a22ce:	f000 f83a 	bl	80a2346 <__retarget_lock_release>
 80a22d2:	e7f0      	b.n	80a22b6 <__register_exitproc+0x3a>
 80a22d4:	f44f 7084 	mov.w	r0, #264	; 0x108
 80a22d8:	f7ff fa9e 	bl	80a1818 <malloc>
 80a22dc:	2800      	cmp	r0, #0
 80a22de:	d0f4      	beq.n	80a22ca <__register_exitproc+0x4e>
 80a22e0:	2300      	movs	r3, #0
 80a22e2:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 80a22e6:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 80a22ea:	2201      	movs	r2, #1
 80a22ec:	6863      	ldr	r3, [r4, #4]
 80a22ee:	2e02      	cmp	r6, #2
 80a22f0:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 80a22f4:	fa02 f203 	lsl.w	r2, r2, r3
 80a22f8:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 80a22fc:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 80a2300:	ea43 0302 	orr.w	r3, r3, r2
 80a2304:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 80a2308:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 80a230c:	bf02      	ittt	eq
 80a230e:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 80a2312:	431a      	orreq	r2, r3
 80a2314:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 80a2318:	6863      	ldr	r3, [r4, #4]
 80a231a:	f8d8 0000 	ldr.w	r0, [r8]
 80a231e:	1c5a      	adds	r2, r3, #1
 80a2320:	3302      	adds	r3, #2
 80a2322:	6062      	str	r2, [r4, #4]
 80a2324:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 80a2328:	f000 f80e 	bl	80a2348 <__retarget_lock_release_recursive>
 80a232c:	2000      	movs	r0, #0
 80a232e:	e7c4      	b.n	80a22ba <__register_exitproc+0x3e>
 80a2330:	200001f0 	.word	0x200001f0
 80a2334:	20000164 	.word	0x20000164
 80a2338:	00000000 	.word	0x00000000
 80a233c:	080a1819 	.word	0x080a1819
 80a2340:	20000068 	.word	0x20000068

080a2344 <__retarget_lock_acquire_recursive>:
 80a2344:	4770      	bx	lr

080a2346 <__retarget_lock_release>:
 80a2346:	4770      	bx	lr

080a2348 <__retarget_lock_release_recursive>:
 80a2348:	4770      	bx	lr

080a234a <link_code_end>:
	...

080a234c <dynalib_user>:
 80a234c:	001d 080a 005d 080a 0085 080a 0089 080a     ....]...........
 80a235c:	0000 0000                                   ....

080a2360 <CSWTCH.189>:
 80a2360:	012c 0000 0018 0000 01f4 0000 012c 0000     ,...........,...
 80a2370:	0050 0000 7061 0070 5925 252d 2d6d 6425     P...app.%Y-%m-%d
 80a2380:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
 80a2390:	6d69 0065                                   ime.

080a2394 <_ZTV9IPAddress>:
	...
 80a239c:	1b2d 080a 1b1d 080a 1b1f 080a               -...........

080a23a8 <_ZTV9USBSerial>:
	...
 80a23b0:	1beb 080a 1c51 080a 1c29 080a 188d 080a     ....Q...).......
 80a23c0:	1c1b 080a 1bed 080a 1bfd 080a 1c4b 080a     ............K...
 80a23d0:	1c0d 080a 1be5 080a                         ........

080a23d8 <_ZTV11USARTSerial>:
	...
 80a23e0:	1d39 080a 1da3 080a 1d7f 080a 188d 080a     9...............
 80a23f0:	1d4f 080a 1d6b 080a 1d5d 080a 1d79 080a     O...k...]...y...
 80a2400:	1d3b 080a 1d41 080a                         ;...A...

080a2408 <_ZTV7TwoWire>:
	...
 80a2410:	1e59 080a 1ea3 080a 1e7b 080a 1e5b 080a     Y.......{...[...
 80a2420:	1e83 080a 1e8b 080a 1e93 080a 1e9b 080a     ................

080a2430 <_ZTVN5spark9WiFiClassE>:
	...
 80a2438:	1f6b 080a 1f61 080a 1f57 080a 1ed5 080a     k...a...W.......
 80a2448:	1919 080a 1f4b 080a 1fc9 080a 1fd1 080a     ....K...........
 80a2458:	1f3f 080a 1f37 080a 1f2d 080a 1f23 080a     ?...7...-...#...
 80a2468:	1edf 080a                                   ....

080a246c <_ZTVN5spark12NetworkClassE>:
	...
 80a2474:	1f89 080a 1f93 080a 1f9d 080a 1fa7 080a     ................
 80a2484:	1fb1 080a 1fbd 080a 1fc9 080a 1fd1 080a     ................
 80a2494:	1fd9 080a 1fe5 080a 1fed 080a 1ff7 080a     ................
 80a24a4:	2001 080a                                   . ..

080a24a8 <_ZSt7nothrow>:
	...

080a24a9 <link_const_variable_data_end>:
 80a24a9:	00          	.byte	0x00
	...

080a24ac <link_constructors_location>:
 80a24ac:	080a017d 	.word	0x080a017d
 80a24b0:	080a147d 	.word	0x080a147d
 80a24b4:	080a1869 	.word	0x080a1869
 80a24b8:	080a1925 	.word	0x080a1925
 80a24bc:	080a1935 	.word	0x080a1935
 80a24c0:	080a19b1 	.word	0x080a19b1
 80a24c4:	080a1f75 	.word	0x080a1f75
 80a24c8:	080a2051 	.word	0x080a2051
 80a24cc:	080a214d 	.word	0x080a214d
